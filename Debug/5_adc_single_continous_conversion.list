
5_adc_single_continous_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  4 .ARM          00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010480  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c58  00000000  00000000  000104b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000369  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00011478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00011528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019136  00000000  00000000  000115a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012c5  00000000  00000000  0002a6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bab4  00000000  00000000  0002b99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b744f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000170  00000000  00000000  000b74a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000460 	.word	0x08000460

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000460 	.word	0x08000460

080001e8 <PA4_ADC_Init>:
#define ADC_Channel4	(0x4<<0)
#define ADC_Channel1	(0x1<<4)



void PA4_ADC_Init(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	/*------------------------------Configurate the GPIO ADC------------------------*/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=(1<<0);
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <PA4_ADC_Init+0x4c>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a10      	ldr	r2, [pc, #64]	; (8000234 <PA4_ADC_Init+0x4c>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of GPIOA to analog*/
	GPIOA->MODER |=(0x3<<8);			/*Pointer PA4*/
 80001f8:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <PA4_ADC_Init+0x50>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <PA4_ADC_Init+0x50>)
 80001fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000202:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER |=(0x3<<2);			/*Temperate sensor*/

	/*--------------------------------Configurate ADC module--------------------------*/
	/*Enable clock for ADC1*/
	RCC->APB2ENR |=(1<<8);
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <PA4_ADC_Init+0x4c>)
 8000206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000208:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <PA4_ADC_Init+0x4c>)
 800020a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800020e:	6453      	str	r3, [r2, #68]	; 0x44

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_Channel4;			/*Channel 4 SQR1*/
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <PA4_ADC_Init+0x54>)
 8000212:	2204      	movs	r2, #4
 8000214:	635a      	str	r2, [r3, #52]	; 0x34
	//ADC1->SQR3 = ADC_Channel1;			/*Channel 1 SQR2*/

	/*Conversion sequence length*/
	ADC1->SQR1 |=(0x0<<20);  /* 1 conversion*/
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <PA4_ADC_Init+0x54>)
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <PA4_ADC_Init+0x54>)
 800021a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800021c:	62d3      	str	r3, [r2, #44]	; 0x2c
	/**/
	/*Enable ADC*/
	ADC1->CR2 |=(1<<0);
 800021e:	4b07      	ldr	r3, [pc, #28]	; (800023c <PA4_ADC_Init+0x54>)
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <PA4_ADC_Init+0x54>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6093      	str	r3, [r2, #8]
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000
 800023c:	40012000 	.word	0x40012000

08000240 <start_conversion>:

void start_conversion(void){
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	/*Enable continous mode*/
	ADC1->CR2 |=(1<<1);
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <start_conversion+0x28>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4a07      	ldr	r2, [pc, #28]	; (8000268 <start_conversion+0x28>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6093      	str	r3, [r2, #8]
	/*Start conversion*/
	ADC1->CR2 |=(1<<30);
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <start_conversion+0x28>)
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	4a04      	ldr	r2, [pc, #16]	; (8000268 <start_conversion+0x28>)
 8000256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800025a:	6093      	str	r3, [r2, #8]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40012000 	.word	0x40012000

0800026c <adc_read>:

uint32_t adc_read(void){
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	while( !(ADC1->SR & (1<<1))){}
 8000270:	bf00      	nop
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <adc_read+0x20>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f003 0302 	and.w	r3, r3, #2
 800027a:	2b00      	cmp	r3, #0
 800027c:	d0f9      	beq.n	8000272 <adc_read+0x6>
	return ADC1->DR;
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <adc_read+0x20>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000282:	4618      	mov	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	40012000 	.word	0x40012000

08000290 <main>:
#include <stdio.h>

uint32_t value_sensor;

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);   //ENABLE clock for port D
 8000296:	4b20      	ldr	r3, [pc, #128]	; (8000318 <main+0x88>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a1f      	ldr	r2, [pc, #124]	; (8000318 <main+0x88>)
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (0x55<<24);  // Output for D12 ,D13, D14, D15
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <main+0x8c>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a1d      	ldr	r2, [pc, #116]	; (800031c <main+0x8c>)
 80002a8:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002ac:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &=~ (0xF<<12);
 80002ae:	4b1b      	ldr	r3, [pc, #108]	; (800031c <main+0x8c>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a1a      	ldr	r2, [pc, #104]	; (800031c <main+0x8c>)
 80002b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002b8:	6153      	str	r3, [r2, #20]
	PA4_ADC_Init();
 80002ba:	f7ff ff95 	bl	80001e8 <PA4_ADC_Init>
	UART2_Init();
 80002be:	f000 f833 	bl	8000328 <UART2_Init>
	start_conversion();
 80002c2:	f7ff ffbd 	bl	8000240 <start_conversion>
	while(1){

		value_sensor =  adc_read();
 80002c6:	f7ff ffd1 	bl	800026c <adc_read>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <main+0x90>)
 80002ce:	6013      	str	r3, [r2, #0]
		GPIOD->ODR ^= (1<<14);
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <main+0x8c>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a11      	ldr	r2, [pc, #68]	; (800031c <main+0x8c>)
 80002d6:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80002da:	6153      	str	r3, [r2, #20]
		GPIOD->ODR ^= (1<<15);
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <main+0x8c>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <main+0x8c>)
 80002e2:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80002e6:	6153      	str	r3, [r2, #20]
		GPIOD->ODR ^= (1<<12);
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <main+0x8c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <main+0x8c>)
 80002ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80002f2:	6153      	str	r3, [r2, #20]
		GPIOD->ODR ^= (1<<13);
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <main+0x8c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a08      	ldr	r2, [pc, #32]	; (800031c <main+0x8c>)
 80002fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002fe:	6153      	str	r3, [r2, #20]
		for (int i=0; i< 2000000;i++){
 8000300:	2300      	movs	r3, #0
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	e002      	b.n	800030c <main+0x7c>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3301      	adds	r3, #1
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a05      	ldr	r2, [pc, #20]	; (8000324 <main+0x94>)
 8000310:	4293      	cmp	r3, r2
 8000312:	ddf8      	ble.n	8000306 <main+0x76>
		value_sensor =  adc_read();
 8000314:	e7d7      	b.n	80002c6 <main+0x36>
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800
 800031c:	40020c00 	.word	0x40020c00
 8000320:	2000001c 	.word	0x2000001c
 8000324:	001e847f 	.word	0x001e847f

08000328 <UART2_Init>:
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
 800032c:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <UART2_Init+0x90>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <UART2_Init+0x90>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <UART2_Init+0x94>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a1f      	ldr	r2, [pc, #124]	; (80003bc <UART2_Init+0x94>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6013      	str	r3, [r2, #0]
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <UART2_Init+0x94>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <UART2_Init+0x94>)
 800034a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034e:	6013      	str	r3, [r2, #0]
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <UART2_Init+0x94>)
 8000352:	6a1b      	ldr	r3, [r3, #32]
 8000354:	4a19      	ldr	r2, [pc, #100]	; (80003bc <UART2_Init+0x94>)
 8000356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800035a:	6213      	str	r3, [r2, #32]
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <UART2_Init+0x94>)
 800035e:	6a1b      	ldr	r3, [r3, #32]
 8000360:	4a16      	ldr	r2, [pc, #88]	; (80003bc <UART2_Init+0x94>)
 8000362:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000366:	6213      	str	r3, [r2, #32]
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <UART2_Init+0x90>)
 800036a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800036e:	641a      	str	r2, [r3, #64]	; 0x40
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <UART2_Init+0x98>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <UART2_Init+0x98>)
 8000376:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 800037a:	6093      	str	r3, [r2, #8]
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <UART2_Init+0x98>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	4a0f      	ldr	r2, [pc, #60]	; (80003c0 <UART2_Init+0x98>)
 8000382:	f043 0303 	orr.w	r3, r3, #3
 8000386:	6093      	str	r3, [r2, #8]
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <UART2_Init+0x98>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <UART2_Init+0x98>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	60d3      	str	r3, [r2, #12]
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <UART2_Init+0x98>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a09      	ldr	r2, [pc, #36]	; (80003c0 <UART2_Init+0x98>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	60d3      	str	r3, [r2, #12]
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <UART2_Init+0x98>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <UART2_Init+0x98>)
 80003a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003aa:	60d3      	str	r3, [r2, #12]
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40023800 	.word	0x40023800
 80003bc:	40020000 	.word	0x40020000
 80003c0:	40004400 	.word	0x40004400

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff ff4b 	bl	8000290 <main>

080003fa <LoopForever>:

LoopForever:
  b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000410:	20000020 	.word	0x20000020

08000414 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4d0d      	ldr	r5, [pc, #52]	; (8000450 <__libc_init_array+0x38>)
 800041c:	4c0d      	ldr	r4, [pc, #52]	; (8000454 <__libc_init_array+0x3c>)
 800041e:	1b64      	subs	r4, r4, r5
 8000420:	10a4      	asrs	r4, r4, #2
 8000422:	2600      	movs	r6, #0
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	4d0b      	ldr	r5, [pc, #44]	; (8000458 <__libc_init_array+0x40>)
 800042a:	4c0c      	ldr	r4, [pc, #48]	; (800045c <__libc_init_array+0x44>)
 800042c:	f000 f818 	bl	8000460 <_init>
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	2600      	movs	r6, #0
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
