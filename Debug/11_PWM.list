
11_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  4 .ARM          00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010434  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000535  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000120  00000000  00000000  00010999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018efd  00000000  00000000  00010b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b97  00000000  00000000  00029a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b92e  00000000  00000000  0002a60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b5f3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a8  00000000  00000000  000b5f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000414 	.word	0x08000414

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000414 	.word	0x08000414

080001e8 <PWM_Init>:
#include <stm32f407xx.h>

#define RCC_GPIOAEN		(1<<0)

void PWM_Init(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	/*Enable clock for port E*/
	RCC->AHB1ENR = RCC_GPIOAEN;
 80001ec:	4b1b      	ldr	r3, [pc, #108]	; (800025c <PWM_Init+0x74>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	631a      	str	r2, [r3, #48]	; 0x30

	/*Alternate Mode*/
	GPIOA->MODER |=(0x2<<0);
 80001f2:	4b1b      	ldr	r3, [pc, #108]	; (8000260 <PWM_Init+0x78>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a1a      	ldr	r2, [pc, #104]	; (8000260 <PWM_Init+0x78>)
 80001f8:	f043 0302 	orr.w	r3, r3, #2
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(0x2<<2);
 80001fe:	4b18      	ldr	r3, [pc, #96]	; (8000260 <PWM_Init+0x78>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <PWM_Init+0x78>)
 8000204:	f043 0308 	orr.w	r3, r3, #8
 8000208:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(0x2<<4);
 800020a:	4b15      	ldr	r3, [pc, #84]	; (8000260 <PWM_Init+0x78>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a14      	ldr	r2, [pc, #80]	; (8000260 <PWM_Init+0x78>)
 8000210:	f043 0320 	orr.w	r3, r3, #32
 8000214:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(0x2<<6);
 8000216:	4b12      	ldr	r3, [pc, #72]	; (8000260 <PWM_Init+0x78>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a11      	ldr	r2, [pc, #68]	; (8000260 <PWM_Init+0x78>)
 800021c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000220:	6013      	str	r3, [r2, #0]

	/*Alternate Function*/
	GPIOA->AFR[0] |= (0x1<<0);
 8000222:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <PWM_Init+0x78>)
 8000224:	6a1b      	ldr	r3, [r3, #32]
 8000226:	4a0e      	ldr	r2, [pc, #56]	; (8000260 <PWM_Init+0x78>)
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x1<<4);
 800022e:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <PWM_Init+0x78>)
 8000230:	6a1b      	ldr	r3, [r3, #32]
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <PWM_Init+0x78>)
 8000234:	f043 0310 	orr.w	r3, r3, #16
 8000238:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x1<<8);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <PWM_Init+0x78>)
 800023c:	6a1b      	ldr	r3, [r3, #32]
 800023e:	4a08      	ldr	r2, [pc, #32]	; (8000260 <PWM_Init+0x78>)
 8000240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000244:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x1<<12);
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <PWM_Init+0x78>)
 8000248:	6a1b      	ldr	r3, [r3, #32]
 800024a:	4a05      	ldr	r2, [pc, #20]	; (8000260 <PWM_Init+0x78>)
 800024c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000250:	6213      	str	r3, [r2, #32]

}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000

08000264 <SetPWM>:



void SetPWM(){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	 * Channel 3: PE14
	 *
	 * */

	/*Enable clock for Timer 2*/
	RCC->APB1ENR |=(1U<<0);
 8000268:	4b3e      	ldr	r3, [pc, #248]	; (8000364 <SetPWM+0x100>)
 800026a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800026c:	4a3d      	ldr	r2, [pc, #244]	; (8000364 <SetPWM+0x100>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6413      	str	r3, [r2, #64]	; 0x40
	/* Prescaler Value : = 2 = > 16.000.000/2 = 8.000.000*/
	TIM2->PSC = 2 - 1;  // Devide by 10 : 16.000.000 / 2 = 8000000
 8000274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000278:	2201      	movs	r2, #1
 800027a:	629a      	str	r2, [r3, #40]	; 0x28
	/*Auto Reaload Register : = 4 => F = 8.000.000 / 4 = 2.000.000*/
	TIM2->ARR = 4 - 1; // 1.000.000
 800027c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000280:	2203      	movs	r2, #3
 8000282:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Clear counter*/
	TIM2->CNT = 0;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000288:	2200      	movs	r2, #0
 800028a:	625a      	str	r2, [r3, #36]	; 0x24


	/*Enable PWM mode for TIM2 channel */
	//TIM2->CCMR1 |= (0x6<<4);			// Channel 1
	//TIM2->CCMR1 |= (0x6<<12);			// Channel 2
	TIM2->CCMR2 = 0x6060;			// Channel 3
 800028c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000290:	f246 0260 	movw	r2, #24672	; 0x6060
 8000294:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 = 0x6060;		// Channel 4
 8000296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029a:	f246 0260 	movw	r2, #24672	; 0x6060
 800029e:	61da      	str	r2, [r3, #28]
	/*Can be changed ARR when complete 1 duty*/
	TIM2->CCMR1 |=(1<<3);
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=(1<<11);
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002be:	6193      	str	r3, [r2, #24]
	TIM2->CCMR2 |=(1U<<3);
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c4:	69db      	ldr	r3, [r3, #28]
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |=(1U<<11);
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002de:	61d3      	str	r3, [r2, #28]

	/*OUT*/
	/*Channel 1: PE9*/
	TIM2->CCR1 = (30*8)/100 ;
 80002e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e4:	2202      	movs	r2, #2
 80002e6:	635a      	str	r2, [r3, #52]	; 0x34
	/*Channel 2: PE11*/
	TIM2->CCR2 = (60*4)/100;
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ec:	2202      	movs	r2, #2
 80002ee:	639a      	str	r2, [r3, #56]	; 0x38
	/*Channel 3: PE13*/
	TIM2->CCR3 = (80*4)/100;
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f4:	2203      	movs	r2, #3
 80002f6:	63da      	str	r2, [r3, #60]	; 0x3c
	/*Channel 4: PE14*/
	TIM2->CCR4 = (10*4)/100;
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	2200      	movs	r2, #0
 80002fe:	641a      	str	r2, [r3, #64]	; 0x40

	/*Enable output capture for channel*/
	TIM2->CCER |= (1U<<0); 			// Channel 1
 8000300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000304:	6a1b      	ldr	r3, [r3, #32]
 8000306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1U<<4); 			// Channel 2
 8000310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000314:	6a1b      	ldr	r3, [r3, #32]
 8000316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1U<<8); 			// Channel 3
 8000320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000324:	6a1b      	ldr	r3, [r3, #32]
 8000326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032e:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1U<<12); 			// Channel 4
 8000330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000334:	6a1b      	ldr	r3, [r3, #32]
 8000336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800033e:	6213      	str	r3, [r2, #32]

	/**/
	TIM2->EGR = 0x01;
 8000340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000344:	2201      	movs	r2, #1
 8000346:	615a      	str	r2, [r3, #20]

	/*Enable Timer*/
	TIM2->CR1 |= (1U<<0);
 8000348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]


}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40023800 	.word	0x40023800

08000368 <main>:
#include <stdio.h>
#include <PWM.h>


int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	PWM_Init();
 800036c:	f7ff ff3c 	bl	80001e8 <PWM_Init>
	SetPWM();
 8000370:	f7ff ff78 	bl	8000264 <SetPWM>
	while(1){
 8000374:	e7fe      	b.n	8000374 <main+0xc>
	...

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ffdd 	bl	8000368 <main>

080003ae <LoopForever>:

LoopForever:
  b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	2000001c 	.word	0x2000001c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
