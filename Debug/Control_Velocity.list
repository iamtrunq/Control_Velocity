
Control_Velocity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb4  08002eb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb4  08002eb4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb4  08002eb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000007c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000308c  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a7c  00000000  00000000  00023126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00023ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  00023d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c39  00000000  00000000  00023ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000341d  00000000  00000000  0003db19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d1d9  00000000  00000000  00040f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ce10f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000da0  00000000  00000000  000ce160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002d04 	.word	0x08002d04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08002d04 	.word	0x08002d04

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2iz>:
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30f      	bcc.n	8000fc2 <__aeabi_f2iz+0x2a>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d90d      	bls.n	8000fc8 <__aeabi_f2iz+0x30>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	bf18      	it	ne
 8000fbe:	4240      	negne	r0, r0
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2iz+0x3a>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d105      	bne.n	8000fde <__aeabi_f2iz+0x46>
 8000fd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd6:	bf08      	it	eq
 8000fd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4906      	ldr	r1, [pc, #24]	; (8001018 <__NVIC_EnableIRQ+0x34>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Read_Encoder_Init>:
#ifndef ENCODER_C_
#define ENCODER_C_

#include<stm32f407xx.h>

void Read_Encoder_Init(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	/*Use PC1 and PC2 to read encoder signal from channel A and channel B*/
	/*Enable clock for port C*/
	RCC->AHB1ENR |= (1<<2);
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <Read_Encoder_Init+0xb0>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a29      	ldr	r2, [pc, #164]	; (8001120 <Read_Encoder_Init+0xb0>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Configurate input mode*/
	GPIOC->MODER &=~(0x3<<2);	//PC1
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <Read_Encoder_Init+0xb4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <Read_Encoder_Init+0xb4>)
 8001086:	f023 030c 	bic.w	r3, r3, #12
 800108a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(0x3<<4);	//PC2
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <Read_Encoder_Init+0xb4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a24      	ldr	r2, [pc, #144]	; (8001124 <Read_Encoder_Init+0xb4>)
 8001092:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001096:	6013      	str	r3, [r2, #0]

	RCC->APB2ENR |= (1<<14);
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <Read_Encoder_Init+0xb0>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	4a20      	ldr	r2, [pc, #128]	; (8001120 <Read_Encoder_Init+0xb0>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	6453      	str	r3, [r2, #68]	; 0x44
	/*Configurate Port to EXTI line*/
	SYSCFG->EXTICR[0] |= (0x2<<4);
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <Read_Encoder_Init+0xb8>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <Read_Encoder_Init+0xb8>)
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= (0x2<<8);
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <Read_Encoder_Init+0xb8>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <Read_Encoder_Init+0xb8>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6093      	str	r3, [r2, #8]

	/*EXTI with rising edge and falling edge*/
	EXTI->RTSR |= (0x3<<1);
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <Read_Encoder_Init+0xbc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <Read_Encoder_Init+0xbc>)
 80010c2:	f043 0306 	orr.w	r3, r3, #6
 80010c6:	6093      	str	r3, [r2, #8]
	EXTI->FTSR |= (0x3<<1);
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <Read_Encoder_Init+0xbc>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <Read_Encoder_Init+0xbc>)
 80010ce:	f043 0306 	orr.w	r3, r3, #6
 80010d2:	60d3      	str	r3, [r2, #12]

	/*Enable mask interrupt*/
	EXTI->IMR |= (0x3<<1);
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <Read_Encoder_Init+0xbc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <Read_Encoder_Init+0xbc>)
 80010da:	f043 0306 	orr.w	r3, r3, #6
 80010de:	6013      	str	r3, [r2, #0]

	/*Configurate NVIC*/
	/*Clear pending*/
	//NVIC->IP[0] |= (1<< (EXTI0_IRQn%32));
	//NVIC->IP[0] |= (1<< (EXTI1_IRQn%32));
	NVIC->ICPR[0] |= (1U << (EXTI1_IRQn % 32));
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <Read_Encoder_Init+0xc0>)
 80010e2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <Read_Encoder_Init+0xc0>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ec:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	NVIC->ICPR[0] |= (1U << (EXTI2_IRQn % 32));
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <Read_Encoder_Init+0xc0>)
 80010f2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <Read_Encoder_Init+0xc0>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	/*Set priority*/
	NVIC_SetPriority(EXTI1_IRQn,0);
 8001100:	2100      	movs	r1, #0
 8001102:	2007      	movs	r0, #7
 8001104:	f7ff ff8a 	bl	800101c <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI2_IRQn,0);
 8001108:	2100      	movs	r1, #0
 800110a:	2008      	movs	r0, #8
 800110c:	f7ff ff86 	bl	800101c <__NVIC_SetPriority>

	/*Enable interrupt*/
	NVIC_EnableIRQ(EXTI1_IRQn);
 8001110:	2007      	movs	r0, #7
 8001112:	f7ff ff67 	bl	8000fe4 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 8001116:	2008      	movs	r0, #8
 8001118:	f7ff ff64 	bl	8000fe4 <__NVIC_EnableIRQ>

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40020800 	.word	0x40020800
 8001128:	40013800 	.word	0x40013800
 800112c:	40013c00 	.word	0x40013c00
 8001130:	e000e100 	.word	0xe000e100

08001134 <GPIO_Toggle_Init>:
#include <stm32f407xx.h>

void GPIO_Toggle_Init(){
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);   //ENABLE clock for port D
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <GPIO_Toggle_Init+0x30>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <GPIO_Toggle_Init+0x30>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (0x55<<24);  // Output for D12 ,D13, D14, D15
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <GPIO_Toggle_Init+0x34>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <GPIO_Toggle_Init+0x34>)
 800114a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800114e:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &=~ (0xF<<12);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <GPIO_Toggle_Init+0x34>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <GPIO_Toggle_Init+0x34>)
 8001156:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800115a:	6153      	str	r3, [r2, #20]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40023800 	.word	0x40023800
 8001168:	40020c00 	.word	0x40020c00

0800116c <PWM_Init>:
 * PC 6

 *
 *
 * */
void PWM_Init(void){
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	/*Enable clock for port C*/
	RCC->AHB1ENR |= (1U<<2);
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <PWM_Init+0x30>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <PWM_Init+0x30>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Alternate Mode*/
	GPIOC->MODER |=(0x2<<12);
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <PWM_Init+0x34>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <PWM_Init+0x34>)
 8001182:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001186:	6013      	str	r3, [r2, #0]

	/*Alternate Function*/
	GPIOC->AFR[0] |= (0x2<<24);
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <PWM_Init+0x34>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <PWM_Init+0x34>)
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001192:	6213      	str	r3, [r2, #32]

}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800

080011a4 <SetPWM>:



void SetPWM(uint8_t PWM){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	 * Channel 1: PC6

	 * */

	/*Enable clock for Timer 3*/
	RCC->APB1ENR |=(1U<<1);
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <SetPWM+0x60>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <SetPWM+0x60>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
	/* Prescaler Value : = 2 = > 16.000.000/2 = 8.000.000*/
	TIM3->PSC = 8 - 1;  // 16.000.000 / 8 = 2.000.000
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <SetPWM+0x64>)
 80011bc:	2207      	movs	r2, #7
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
	/*Auto Reaload Register : = 100 => F = 2.000.000 / 100 = 10.000 Hz */
	TIM3->ARR = 100 - 1;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <SetPWM+0x64>)
 80011c2:	2263      	movs	r2, #99	; 0x63
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Clear counter*/
	TIM3->CNT = 0;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <SetPWM+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24


	/*Enable PWM mode for TIM2 channel */
	TIM3->CCMR1 = 0x6060;		// Channel 3
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <SetPWM+0x64>)
 80011ce:	f246 0260 	movw	r2, #24672	; 0x6060
 80011d2:	619a      	str	r2, [r3, #24]
	TIM3->CCMR2 = 0x6060;		// Channel 4
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <SetPWM+0x64>)
 80011d6:	f246 0260 	movw	r2, #24672	; 0x6060
 80011da:	61da      	str	r2, [r3, #28]

	/*OUT*/
	/*Channel 1: PC6*/
	TIM3->CCR1 = (PWM*100)/100 ;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SetPWM+0x64>)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	6353      	str	r3, [r2, #52]	; 0x34


	/*Enable output capture for channel*/
	TIM3->CCER |= (1U<<0); 			// Channel 1
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <SetPWM+0x64>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <SetPWM+0x64>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]


	/*Enable Timer*/
	TIM3->CR1 |= (1U<<0);
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SetPWM+0x64>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SetPWM+0x64>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6013      	str	r3, [r2, #0]


}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40023800 	.word	0x40023800
 8001208:	40000400 	.word	0x40000400

0800120c <main>:
void Put_Number_Left(uint16_t value);
void NVIC_UART2(void);


int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	NVIC_UART2();
 8001210:	f000 fb50 	bl	80018b4 <NVIC_UART2>
	UART2_Init();
 8001214:	f000 fea0 	bl	8001f58 <UART2_Init>
	SPI2_Init();
 8001218:	f000 fd20 	bl	8001c5c <SPI2_Init>
	Max7219_init();
 800121c:	f000 fbbe 	bl	800199c <Max7219_init>
	GPIO_Toggle_Init();
 8001220:	f7ff ff88 	bl	8001134 <GPIO_Toggle_Init>
	HELLO();
 8001224:	f000 fbd2 	bl	80019cc <HELLO>
	Read_Encoder_Init();
 8001228:	f7ff ff22 	bl	8001070 <Read_Encoder_Init>
	PWM_Init();
 800122c:	f7ff ff9e 	bl	800116c <PWM_Init>
	TIM1_Init();
 8001230:	f000 fe48 	bl	8001ec4 <TIM1_Init>
	TIM1_Interrupt_Init();
 8001234:	f000 fe76 	bl	8001f24 <TIM1_Interrupt_Init>

	/*A4 & A5 is dir pin*/
	/*Out mode*/
	GPIOA->MODER |=(0x1<<8);
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <main+0x60>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <main+0x60>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(0x1<<10);
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <main+0x60>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a08      	ldr	r2, [pc, #32]	; (800126c <main+0x60>)
 800124a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124e:	6013      	str	r3, [r2, #0]
	/*Reset State*/
	GPIOA->ODR &=~ (1<<4);
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <main+0x60>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	4a05      	ldr	r2, [pc, #20]	; (800126c <main+0x60>)
 8001256:	f023 0310 	bic.w	r3, r3, #16
 800125a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &=~ (1<<5);
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <main+0x60>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	4a02      	ldr	r2, [pc, #8]	; (800126c <main+0x60>)
 8001262:	f023 0320 	bic.w	r3, r3, #32
 8001266:	6153      	str	r3, [r2, #20]

	while(1)
 8001268:	e7fe      	b.n	8001268 <main+0x5c>
 800126a:	bf00      	nop
 800126c:	40020000 	.word	0x40020000

08001270 <PID>:
	}


}
/*PID  algorithm */
int PID(float Desired, float Current , float p_coef, float i_coef, float d_coef){
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b08d      	sub	sp, #52	; 0x34
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]


	int16_t pidout;


	HILIM = 100; LOLIM = 0;
 800127e:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <PID+0x184>)
 8001280:	2264      	movs	r2, #100	; 0x64
 8001282:	801a      	strh	r2, [r3, #0]
 8001284:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <PID+0x188>)
 8001286:	2200      	movs	r2, #0
 8001288:	801a      	strh	r2, [r3, #0]
	err=Desired-Current;
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff fc29 	bl	8000ae4 <__aeabi_fsub>
 8001292:	4603      	mov	r3, r0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28

	// Khau P
	pterm=p_coef*err;
 8001296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fd2d 	bl	8000cf8 <__aeabi_fmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24

	// Khau D + Loc
	dterm=d_coef*(err-err_p)/Ts;
 80012a2:	4b56      	ldr	r3, [pc, #344]	; (80013fc <PID+0x18c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012aa:	f7ff fc1b 	bl	8000ae4 <__aeabi_fsub>
 80012ae:	4603      	mov	r3, r0
 80012b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd20 	bl	8000cf8 <__aeabi_fmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b50      	ldr	r3, [pc, #320]	; (8001400 <PID+0x190>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f7ff fdcc 	bl	8000e60 <__aeabi_fdiv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	623b      	str	r3, [r7, #32]
	dterm_f=(1-anpha)*dterm_f_p + anpha*dterm;
 80012cc:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <PID+0x194>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80012d6:	f7ff fc05 	bl	8000ae4 <__aeabi_fsub>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b4a      	ldr	r3, [pc, #296]	; (8001408 <PID+0x198>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f7ff fd07 	bl	8000cf8 <__aeabi_fmul>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461c      	mov	r4, r3
 80012ee:	4b45      	ldr	r3, [pc, #276]	; (8001404 <PID+0x194>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6a39      	ldr	r1, [r7, #32]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fcff 	bl	8000cf8 <__aeabi_fmul>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4619      	mov	r1, r3
 80012fe:	4620      	mov	r0, r4
 8001300:	f7ff fbf2 	bl	8000ae8 <__addsf3>
 8001304:	4603      	mov	r3, r0
 8001306:	61fb      	str	r3, [r7, #28]


	//Khau I
	err_windup=i_coef*err + Kb*err_sat;
 8001308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f7ff fcf4 	bl	8000cf8 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	461c      	mov	r4, r3
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <PID+0x19c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <PID+0x1a0>)
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fcea 	bl	8000cf8 <__aeabi_fmul>
 8001324:	4603      	mov	r3, r0
 8001326:	4619      	mov	r1, r3
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff fbdd 	bl	8000ae8 <__addsf3>
 800132e:	4603      	mov	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
	iterm=iterm_p + Ts*err_windup;
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <PID+0x190>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fcdd 	bl	8000cf8 <__aeabi_fmul>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <PID+0x1a4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f7ff fbcd 	bl	8000ae8 <__addsf3>
 800134e:	4603      	mov	r3, r0
 8001350:	617b      	str	r3, [r7, #20]

	iterm_p = iterm;
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <PID+0x1a4>)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	6013      	str	r3, [r2, #0]
	dterm_f_p = dterm_f;
 8001358:	4a2b      	ldr	r2, [pc, #172]	; (8001408 <PID+0x198>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	6013      	str	r3, [r2, #0]
	err_p = err;
 800135e:	4a27      	ldr	r2, [pc, #156]	; (80013fc <PID+0x18c>)
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	6013      	str	r3, [r2, #0]
	//PID :
	pidout=pterm + dterm_f + iterm;
 8001364:	69f9      	ldr	r1, [r7, #28]
 8001366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001368:	f7ff fbbe 	bl	8000ae8 <__addsf3>
 800136c:	4603      	mov	r3, r0
 800136e:	6979      	ldr	r1, [r7, #20]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fbb9 	bl	8000ae8 <__addsf3>
 8001376:	4603      	mov	r3, r0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe0d 	bl	8000f98 <__aeabi_f2iz>
 800137e:	4603      	mov	r3, r0
 8001380:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Bao hoa:
	if(pidout > HILIM){
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <PID+0x184>)
 8001384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001388:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800138c:	429a      	cmp	r2, r3
 800138e:	dd0f      	ble.n	80013b0 <PID+0x140>
		pidout = 100;
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	85fb      	strh	r3, [r7, #46]	; 0x2e
		err_sat = HILIM - pidout;
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <PID+0x184>)
 8001396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139a:	461a      	mov	r2, r3
 800139c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fc54 	bl	8000c50 <__aeabi_i2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a19      	ldr	r2, [pc, #100]	; (8001410 <PID+0x1a0>)
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01a      	b.n	80013e6 <PID+0x176>
	}else if(pidout < LOLIM){
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <PID+0x188>)
 80013b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80013ba:	429a      	cmp	r2, r3
 80013bc:	da0f      	bge.n	80013de <PID+0x16e>
		pidout = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		err_sat =LOLIM - pidout;
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <PID+0x188>)
 80013c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c8:	461a      	mov	r2, r3
 80013ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fc3d 	bl	8000c50 <__aeabi_i2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <PID+0x1a0>)
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e003      	b.n	80013e6 <PID+0x176>
	}else{
		pidout=pidout;
		err_sat = 0;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <PID+0x1a0>)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
	}
	return pidout;
 80013e6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e

}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3734      	adds	r7, #52	; 0x34
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200000ae 	.word	0x200000ae
 80013f8:	200000b0 	.word	0x200000b0
 80013fc:	200000c4 	.word	0x200000c4
 8001400:	200000a0 	.word	0x200000a0
 8001404:	200000a4 	.word	0x200000a4
 8001408:	200000c8 	.word	0x200000c8
 800140c:	200000a8 	.word	0x200000a8
 8001410:	200000cc 	.word	0x200000cc
 8001414:	200000d0 	.word	0x200000d0

08001418 <EXTI1_IRQHandler>:

/*Encoder channel A */
void EXTI1_IRQHandler(void){
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1U<<1)){
 800141e:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <EXTI1_IRQHandler+0x180>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80aa 	beq.w	8001580 <EXTI1_IRQHandler+0x168>
		uint8_t State1;
		State1 = ((GPIOC->IDR & (1<<1)) ? 1 : 0) | ((GPIOC->IDR & (1<<2)) ? 2 : 0);
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <EXTI1_IRQHandler+0x184>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	b25b      	sxtb	r3, r3
 8001440:	4a56      	ldr	r2, [pc, #344]	; (800159c <EXTI1_IRQHandler+0x184>)
 8001442:	6912      	ldr	r2, [r2, #16]
 8001444:	f002 0204 	and.w	r2, r2, #4
 8001448:	2a00      	cmp	r2, #0
 800144a:	d001      	beq.n	8001450 <EXTI1_IRQHandler+0x38>
 800144c:	2202      	movs	r2, #2
 800144e:	e000      	b.n	8001452 <EXTI1_IRQHandler+0x3a>
 8001450:	2200      	movs	r2, #0
 8001452:	4313      	orrs	r3, r2
 8001454:	b25b      	sxtb	r3, r3
 8001456:	71fb      	strb	r3, [r7, #7]
		switch (State1) {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d86a      	bhi.n	8001534 <EXTI1_IRQHandler+0x11c>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <EXTI1_IRQHandler+0x4c>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	08001475 	.word	0x08001475
 8001468:	080014a5 	.word	0x080014a5
 800146c:	080014d5 	.word	0x080014d5
 8001470:	08001505 	.word	0x08001505
			case 0:
				if(PreviousState==1) CountValue++;
 8001474:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <EXTI1_IRQHandler+0x188>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d109      	bne.n	8001490 <EXTI1_IRQHandler+0x78>
 800147c:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	b29b      	uxth	r3, r3
 8001484:	3301      	adds	r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 800148c:	801a      	strh	r2, [r3, #0]
				else CountValue--;
				break;
 800148e:	e051      	b.n	8001534 <EXTI1_IRQHandler+0x11c>
				else CountValue--;
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	b29b      	uxth	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b29b      	uxth	r3, r3
 800149c:	b21a      	sxth	r2, r3
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 80014a0:	801a      	strh	r2, [r3, #0]
				break;
 80014a2:	e047      	b.n	8001534 <EXTI1_IRQHandler+0x11c>
			case 1:
				if(PreviousState==3) CountValue++;
 80014a4:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <EXTI1_IRQHandler+0x188>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d109      	bne.n	80014c0 <EXTI1_IRQHandler+0xa8>
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 80014bc:	801a      	strh	r2, [r3, #0]
				else CountValue--;
				break;
 80014be:	e039      	b.n	8001534 <EXTI1_IRQHandler+0x11c>
				else CountValue--;
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 80014d0:	801a      	strh	r2, [r3, #0]
				break;
 80014d2:	e02f      	b.n	8001534 <EXTI1_IRQHandler+0x11c>
			case 2:
				if(PreviousState==0) CountValue++;
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <EXTI1_IRQHandler+0x188>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d109      	bne.n	80014f0 <EXTI1_IRQHandler+0xd8>
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 80014ec:	801a      	strh	r2, [r3, #0]
				else CountValue--;
				break;
 80014ee:	e021      	b.n	8001534 <EXTI1_IRQHandler+0x11c>
				else CountValue--;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 80014f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 8001500:	801a      	strh	r2, [r3, #0]
				break;
 8001502:	e017      	b.n	8001534 <EXTI1_IRQHandler+0x11c>
			case 3:
				if(PreviousState==2) CountValue++;
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <EXTI1_IRQHandler+0x188>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d109      	bne.n	8001520 <EXTI1_IRQHandler+0x108>
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	b29b      	uxth	r3, r3
 8001514:	3301      	adds	r3, #1
 8001516:	b29b      	uxth	r3, r3
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 800151c:	801a      	strh	r2, [r3, #0]
				else CountValue--;
				break;
 800151e:	e008      	b.n	8001532 <EXTI1_IRQHandler+0x11a>
				else CountValue--;
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	b29b      	uxth	r3, r3
 8001528:	3b01      	subs	r3, #1
 800152a:	b29b      	uxth	r3, r3
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 8001530:	801a      	strh	r2, [r3, #0]
				break;
 8001532:	bf00      	nop
		}
		PreviousState = State1;
 8001534:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <EXTI1_IRQHandler+0x188>)
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	7013      	strb	r3, [r2, #0]
		CntVel++;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <EXTI1_IRQHandler+0x190>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <EXTI1_IRQHandler+0x190>)
 8001544:	801a      	strh	r2, [r3, #0]
		if (CountValue>=105*4) {
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001550:	db08      	blt.n	8001564 <EXTI1_IRQHandler+0x14c>
			CountValue = 0;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 8001554:	2200      	movs	r2, #0
 8001556:	801a      	strh	r2, [r3, #0]
			PosCnt++;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <EXTI1_IRQHandler+0x194>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <EXTI1_IRQHandler+0x194>)
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00d      	b.n	8001580 <EXTI1_IRQHandler+0x168>
		}
		else if	(CountValue<=-105*4) {
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 8001566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156a:	f513 7fd2 	cmn.w	r3, #420	; 0x1a4
 800156e:	dc07      	bgt.n	8001580 <EXTI1_IRQHandler+0x168>
			CountValue = 0;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <EXTI1_IRQHandler+0x18c>)
 8001572:	2200      	movs	r2, #0
 8001574:	801a      	strh	r2, [r3, #0]
			PosCnt--;
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <EXTI1_IRQHandler+0x194>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3b01      	subs	r3, #1
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <EXTI1_IRQHandler+0x194>)
 800157e:	6013      	str	r3, [r2, #0]
		}
	}
	/*Clear Pending*/
	EXTI->PR |= (1<<1);
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <EXTI1_IRQHandler+0x180>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <EXTI1_IRQHandler+0x180>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	6153      	str	r3, [r2, #20]

}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40013c00 	.word	0x40013c00
 800159c:	40020800 	.word	0x40020800
 80015a0:	2000008c 	.word	0x2000008c
 80015a4:	2000008e 	.word	0x2000008e
 80015a8:	20000090 	.word	0x20000090
 80015ac:	20000094 	.word	0x20000094

080015b0 <EXTI2_IRQHandler>:

/*Encoder channel B*/
void EXTI2_IRQHandler(void){
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1U<<2)){
 80015b6:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <EXTI2_IRQHandler+0x180>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80aa 	beq.w	8001718 <EXTI2_IRQHandler+0x168>
		uint8_t State0;
		State0 = ((GPIOC->IDR & (1<<1)) ? 1 : 0) | ((GPIOC->IDR & (1<<2)) ? 2 : 0);
 80015c4:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <EXTI2_IRQHandler+0x184>)
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	4a56      	ldr	r2, [pc, #344]	; (8001734 <EXTI2_IRQHandler+0x184>)
 80015da:	6912      	ldr	r2, [r2, #16]
 80015dc:	f002 0204 	and.w	r2, r2, #4
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	d001      	beq.n	80015e8 <EXTI2_IRQHandler+0x38>
 80015e4:	2202      	movs	r2, #2
 80015e6:	e000      	b.n	80015ea <EXTI2_IRQHandler+0x3a>
 80015e8:	2200      	movs	r2, #0
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	71fb      	strb	r3, [r7, #7]
		switch (State0) {
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d86a      	bhi.n	80016cc <EXTI2_IRQHandler+0x11c>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <EXTI2_IRQHandler+0x4c>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	0800160d 	.word	0x0800160d
 8001600:	0800163d 	.word	0x0800163d
 8001604:	0800166d 	.word	0x0800166d
 8001608:	0800169d 	.word	0x0800169d
			case 0:
				if(PreviousState==1) CountValue++;
 800160c:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <EXTI2_IRQHandler+0x188>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d109      	bne.n	8001628 <EXTI2_IRQHandler+0x78>
 8001614:	4b49      	ldr	r3, [pc, #292]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161a:	b29b      	uxth	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	b21a      	sxth	r2, r3
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001624:	801a      	strh	r2, [r3, #0]
				else CountValue--;
				break;
 8001626:	e051      	b.n	80016cc <EXTI2_IRQHandler+0x11c>
				else CountValue--;
 8001628:	4b44      	ldr	r3, [pc, #272]	; (800173c <EXTI2_IRQHandler+0x18c>)
 800162a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29b      	uxth	r3, r3
 8001634:	b21a      	sxth	r2, r3
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001638:	801a      	strh	r2, [r3, #0]
				break;
 800163a:	e047      	b.n	80016cc <EXTI2_IRQHandler+0x11c>
			case 1:
				if(PreviousState==3) CountValue++;
 800163c:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <EXTI2_IRQHandler+0x188>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d109      	bne.n	8001658 <EXTI2_IRQHandler+0xa8>
 8001644:	4b3d      	ldr	r3, [pc, #244]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164a:	b29b      	uxth	r3, r3
 800164c:	3301      	adds	r3, #1
 800164e:	b29b      	uxth	r3, r3
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001654:	801a      	strh	r2, [r3, #0]
				else CountValue--;
				break;
 8001656:	e039      	b.n	80016cc <EXTI2_IRQHandler+0x11c>
				else CountValue--;
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <EXTI2_IRQHandler+0x18c>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001668:	801a      	strh	r2, [r3, #0]
				break;
 800166a:	e02f      	b.n	80016cc <EXTI2_IRQHandler+0x11c>
			case 2:
				if(PreviousState==0) CountValue++;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <EXTI2_IRQHandler+0x188>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <EXTI2_IRQHandler+0xd8>
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	b21a      	sxth	r2, r3
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001684:	801a      	strh	r2, [r3, #0]
				else CountValue--;
				break;
 8001686:	e021      	b.n	80016cc <EXTI2_IRQHandler+0x11c>
				else CountValue--;
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <EXTI2_IRQHandler+0x18c>)
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21a      	sxth	r2, r3
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <EXTI2_IRQHandler+0x18c>)
 8001698:	801a      	strh	r2, [r3, #0]
				break;
 800169a:	e017      	b.n	80016cc <EXTI2_IRQHandler+0x11c>
			case 3:
				if(PreviousState==2) CountValue++;
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <EXTI2_IRQHandler+0x188>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d109      	bne.n	80016b8 <EXTI2_IRQHandler+0x108>
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <EXTI2_IRQHandler+0x18c>)
 80016a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <EXTI2_IRQHandler+0x18c>)
 80016b4:	801a      	strh	r2, [r3, #0]
				else CountValue--;
				break;
 80016b6:	e008      	b.n	80016ca <EXTI2_IRQHandler+0x11a>
				else CountValue--;
 80016b8:	4b20      	ldr	r3, [pc, #128]	; (800173c <EXTI2_IRQHandler+0x18c>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <EXTI2_IRQHandler+0x18c>)
 80016c8:	801a      	strh	r2, [r3, #0]
				break;
 80016ca:	bf00      	nop
			}
		PreviousState = State0;
 80016cc:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <EXTI2_IRQHandler+0x188>)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	7013      	strb	r3, [r2, #0]
		CntVel++;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <EXTI2_IRQHandler+0x190>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <EXTI2_IRQHandler+0x190>)
 80016dc:	801a      	strh	r2, [r3, #0]
		if (CountValue>=105*4) {
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <EXTI2_IRQHandler+0x18c>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80016e8:	db08      	blt.n	80016fc <EXTI2_IRQHandler+0x14c>
			CountValue = 0;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <EXTI2_IRQHandler+0x18c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	801a      	strh	r2, [r3, #0]
			PosCnt++;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <EXTI2_IRQHandler+0x194>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	4a13      	ldr	r2, [pc, #76]	; (8001744 <EXTI2_IRQHandler+0x194>)
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00d      	b.n	8001718 <EXTI2_IRQHandler+0x168>
		}
		else if	(CountValue<=-105*4) {
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <EXTI2_IRQHandler+0x18c>)
 80016fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001702:	f513 7fd2 	cmn.w	r3, #420	; 0x1a4
 8001706:	dc07      	bgt.n	8001718 <EXTI2_IRQHandler+0x168>
			CountValue = 0;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <EXTI2_IRQHandler+0x18c>)
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
			PosCnt--;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <EXTI2_IRQHandler+0x194>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3b01      	subs	r3, #1
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <EXTI2_IRQHandler+0x194>)
 8001716:	6013      	str	r3, [r2, #0]
		}
	}
	/*Clear Pending*/
	EXTI->PR |= (1<<2);
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <EXTI2_IRQHandler+0x180>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <EXTI2_IRQHandler+0x180>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6153      	str	r3, [r2, #20]

}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40013c00 	.word	0x40013c00
 8001734:	40020800 	.word	0x40020800
 8001738:	2000008c 	.word	0x2000008c
 800173c:	2000008e 	.word	0x2000008e
 8001740:	20000090 	.word	0x20000090
 8001744:	20000094 	.word	0x20000094

08001748 <TIM1_UP_TIM10_IRQHandler>:
/*Timer 5ms to read velocity and this is sample time*/
void TIM1_UP_TIM10_IRQHandler(){
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	af02      	add	r7, sp, #8
	/*Sample time = 5ms*/
	Cnttmp = CntVel;
 800174e:	4b48      	ldr	r3, [pc, #288]	; (8001870 <TIM1_UP_TIM10_IRQHandler+0x128>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b47      	ldr	r3, [pc, #284]	; (8001874 <TIM1_UP_TIM10_IRQHandler+0x12c>)
 8001756:	601a      	str	r2, [r3, #0]
	CntVel = 0;
 8001758:	4b45      	ldr	r3, [pc, #276]	; (8001870 <TIM1_UP_TIM10_IRQHandler+0x128>)
 800175a:	2200      	movs	r2, #0
 800175c:	801a      	strh	r2, [r3, #0]
	RealVel = (Cnttmp*200)/7;										//RPM
 800175e:	4b45      	ldr	r3, [pc, #276]	; (8001874 <TIM1_UP_TIM10_IRQHandler+0x12c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	22c8      	movs	r2, #200	; 0xc8
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	4a43      	ldr	r2, [pc, #268]	; (8001878 <TIM1_UP_TIM10_IRQHandler+0x130>)
 800176a:	fb82 1203 	smull	r1, r2, r2, r3
 800176e:	441a      	add	r2, r3
 8001770:	1092      	asrs	r2, r2, #2
 8001772:	17db      	asrs	r3, r3, #31
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	b21a      	sxth	r2, r3
 8001778:	4b40      	ldr	r3, [pc, #256]	; (800187c <TIM1_UP_TIM10_IRQHandler+0x134>)
 800177a:	801a      	strh	r2, [r3, #0]
	CurVel = (3.14*Cnttmp*20)/21;								//rad/s  (M*2PI)/(N*T)
 800177c:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <TIM1_UP_TIM10_IRQHandler+0x12c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fedf 	bl	8000544 <__aeabi_i2d>
 8001786:	a338      	add	r3, pc, #224	; (adr r3, 8001868 <TIM1_UP_TIM10_IRQHandler+0x120>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7fe ff44 	bl	8000618 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <TIM1_UP_TIM10_IRQHandler+0x138>)
 800179e:	f7fe ff3b 	bl	8000618 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b35      	ldr	r3, [pc, #212]	; (8001884 <TIM1_UP_TIM10_IRQHandler+0x13c>)
 80017b0:	f7ff f85c 	bl	800086c <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f93e 	bl	8000a3c <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a31      	ldr	r2, [pc, #196]	; (8001888 <TIM1_UP_TIM10_IRQHandler+0x140>)
 80017c4:	6013      	str	r3, [r2, #0]
	count++;
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <TIM1_UP_TIM10_IRQHandler+0x144>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <TIM1_UP_TIM10_IRQHandler+0x144>)
 80017d2:	701a      	strb	r2, [r3, #0]

	/*After 4x25 = 100 ms then send value to led because sample time is short*/
	if (count == 25){
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <TIM1_UP_TIM10_IRQHandler+0x144>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b19      	cmp	r3, #25
 80017dc:	d109      	bne.n	80017f2 <TIM1_UP_TIM10_IRQHandler+0xaa>
		count = 0;
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <TIM1_UP_TIM10_IRQHandler+0x144>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		Put_Number_Left(RealVel);
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <TIM1_UP_TIM10_IRQHandler+0x134>)
 80017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f92b 	bl	8001a48 <Put_Number_Left>
	}
	Ts=0.005;
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <TIM1_UP_TIM10_IRQHandler+0x148>)
 80017f4:	4a27      	ldr	r2, [pc, #156]	; (8001894 <TIM1_UP_TIM10_IRQHandler+0x14c>)
 80017f6:	601a      	str	r2, [r3, #0]
	anpha = 0.9;
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <TIM1_UP_TIM10_IRQHandler+0x150>)
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <TIM1_UP_TIM10_IRQHandler+0x154>)
 80017fc:	601a      	str	r2, [r3, #0]
	Kb=1;
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <TIM1_UP_TIM10_IRQHandler+0x158>)
 8001800:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001804:	601a      	str	r2, [r3, #0]

	//Put_Number_Left(RealVel);
	pwm=PID(SetPoint,RealVel,0.5,0.9,0);
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <TIM1_UP_TIM10_IRQHandler+0x15c>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fa1c 	bl	8000c48 <__aeabi_ui2f>
 8001810:	4604      	mov	r4, r0
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <TIM1_UP_TIM10_IRQHandler+0x134>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fa19 	bl	8000c50 <__aeabi_i2f>
 800181e:	4601      	mov	r1, r0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <TIM1_UP_TIM10_IRQHandler+0x154>)
 8001828:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff fd1f 	bl	8001270 <PID>
 8001832:	4603      	mov	r3, r0
 8001834:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <TIM1_UP_TIM10_IRQHandler+0x160>)
 8001836:	6013      	str	r3, [r2, #0]
	SetPWM(pwm);
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <TIM1_UP_TIM10_IRQHandler+0x160>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fcb0 	bl	80011a4 <SetPWM>
	GPIOA->ODR |= (1<<4);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <TIM1_UP_TIM10_IRQHandler+0x164>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <TIM1_UP_TIM10_IRQHandler+0x164>)
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6153      	str	r3, [r2, #20]
	//GPIOA->ODR &=~(1<<5);
	/* Clear pending*/
	TIM1->SR &=~ (1<<0);
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <TIM1_UP_TIM10_IRQHandler+0x168>)
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <TIM1_UP_TIM10_IRQHandler+0x168>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6113      	str	r3, [r2, #16]
}
 800185c:	bf00      	nop
 800185e:	3704      	adds	r7, #4
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	f3af 8000 	nop.w
 8001868:	51eb851f 	.word	0x51eb851f
 800186c:	40091eb8 	.word	0x40091eb8
 8001870:	20000090 	.word	0x20000090
 8001874:	200000b4 	.word	0x200000b4
 8001878:	92492493 	.word	0x92492493
 800187c:	200000ac 	.word	0x200000ac
 8001880:	40340000 	.word	0x40340000
 8001884:	40350000 	.word	0x40350000
 8001888:	20000098 	.word	0x20000098
 800188c:	200000b8 	.word	0x200000b8
 8001890:	200000a0 	.word	0x200000a0
 8001894:	3ba3d70a 	.word	0x3ba3d70a
 8001898:	200000a4 	.word	0x200000a4
 800189c:	3f666666 	.word	0x3f666666
 80018a0:	200000a8 	.word	0x200000a8
 80018a4:	200000c0 	.word	0x200000c0
 80018a8:	2000009c 	.word	0x2000009c
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40010000 	.word	0x40010000

080018b4 <NVIC_UART2>:

void NVIC_UART2(void){
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	/*Clear Pending*/
	NVIC->ICPR[USART2_IRQn/32] |=(1U << (USART2_IRQn % 32));
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <NVIC_UART2+0x38>)
 80018ba:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <NVIC_UART2+0x38>)
 80018c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c4:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	/*Enable interrupt */
	NVIC->ISER[USART2_IRQn/32] |=(1U << (USART2_IRQn % 32));
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <NVIC_UART2+0x38>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <NVIC_UART2+0x38>)
 80018ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d2:	6053      	str	r3, [r2, #4]
	/*Set priority 1*/
	NVIC->IP[USART2_IRQn/4] |= (0x01 << (8 * (USART2_IRQn%4) ) );
 80018d4:	4a05      	ldr	r2, [pc, #20]	; (80018ec <NVIC_UART2+0x38>)
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <NVIC_UART2+0x38>)
 80018d8:	f892 2309 	ldrb.w	r2, [r2, #777]	; 0x309
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <USART2_IRQHandler>:


/*Interrupt UART2 handling*/
void USART2_IRQHandler(){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	/*Check flag status interrupt*/
	if(USART2->SR & (1<<5)){
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <USART2_IRQHandler+0x6c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d021      	beq.n	8001946 <USART2_IRQHandler+0x56>
		/*Clear Data*/
		for (int i = 0; i < 4; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	e007      	b.n	8001918 <USART2_IRQHandler+0x28>
		    Data[i] = 0;
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <USART2_IRQHandler+0x70>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3301      	adds	r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	ddf4      	ble.n	8001908 <USART2_IRQHandler+0x18>
		}
		/*Receive data and then transmit backward*/
		UART_Receive(Data);
 800191e:	4810      	ldr	r0, [pc, #64]	; (8001960 <USART2_IRQHandler+0x70>)
 8001920:	f000 fb78 	bl	8002014 <UART_Receive>
		sscanf(Data,"%d.",&SetPoint);
 8001924:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <USART2_IRQHandler+0x74>)
 8001926:	4910      	ldr	r1, [pc, #64]	; (8001968 <USART2_IRQHandler+0x78>)
 8001928:	480d      	ldr	r0, [pc, #52]	; (8001960 <USART2_IRQHandler+0x70>)
 800192a:	f000 fbf5 	bl	8002118 <siscanf>
		GPIOD->ODR ^=(1<<14);
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <USART2_IRQHandler+0x7c>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <USART2_IRQHandler+0x7c>)
 8001934:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8001938:	6153      	str	r3, [r2, #20]
		GPIOD->ODR ^=(1<<13);
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <USART2_IRQHandler+0x7c>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <USART2_IRQHandler+0x7c>)
 8001940:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001944:	6153      	str	r3, [r2, #20]

		/*Transmit data */
		//UART_Transmit(Data,SizeBuffer);

	}
	USART2->SR &=~(1<<5);			//Clear Pending
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <USART2_IRQHandler+0x6c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <USART2_IRQHandler+0x6c>)
 800194c:	f023 0320 	bic.w	r3, r3, #32
 8001950:	6013      	str	r3, [r2, #0]
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40004400 	.word	0x40004400
 8001960:	200000bc 	.word	0x200000bc
 8001964:	200000c0 	.word	0x200000c0
 8001968:	08002d1c 	.word	0x08002d1c
 800196c:	40020c00 	.word	0x40020c00

08001970 <SendData>:
void SendData(uint8_t Address, uint8_t Data){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	460a      	mov	r2, r1
 800197a:	71fb      	strb	r3, [r7, #7]
 800197c:	4613      	mov	r3, r2
 800197e:	71bb      	strb	r3, [r7, #6]

	uint8_t Buffer[2];
    Buffer[0] = Address;
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	733b      	strb	r3, [r7, #12]
    Buffer[1] = Data;
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	737b      	strb	r3, [r7, #13]
    SPI_Transmit_16bits(Buffer,2);
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f9f0 	bl	8001d74 <SPI_Transmit_16bits>

}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <Max7219_init>:
void Max7219_init(){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    /* Set  no decode mode: 0x0000 */
	SendData(0x09,0x00);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2009      	movs	r0, #9
 80019a4:	f7ff ffe4 	bl	8001970 <SendData>
    /* Set intensity: 0x0A09 */
	SendData(0x0A,0x09);
 80019a8:	2109      	movs	r1, #9
 80019aa:	200a      	movs	r0, #10
 80019ac:	f7ff ffe0 	bl	8001970 <SendData>
    /* Set scanlimit */
	SendData(0x0B,0x07);
 80019b0:	2107      	movs	r1, #7
 80019b2:	200b      	movs	r0, #11
 80019b4:	f7ff ffdc 	bl	8001970 <SendData>
    /* No shutdown, turn off display test */
	SendData(0x0C,0x01);
 80019b8:	2101      	movs	r1, #1
 80019ba:	200c      	movs	r0, #12
 80019bc:	f7ff ffd8 	bl	8001970 <SendData>
	SendData(0x0F,0x00);
 80019c0:	2100      	movs	r1, #0
 80019c2:	200f      	movs	r0, #15
 80019c4:	f7ff ffd4 	bl	8001970 <SendData>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HELLO>:
void HELLO(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
	uint8_t mssv[8] = {0x08,0x37,0x4F,0x0E,0x0E,0x7E,0x08,0x00};
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HELLO+0x78>)
 80019d4:	463b      	mov	r3, r7
 80019d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019da:	e883 0003 	stmia.w	r3, {r0, r1}
    for(int i=0;i<8;i++){
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e011      	b.n	8001a08 <HELLO+0x3c>
        SendData(i+1, mssv[7-i]);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	3310      	adds	r3, #16
 80019f4:	443b      	add	r3, r7
 80019f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f7ff ffb7 	bl	8001970 <SendData>
    for(int i=0;i<8;i++){
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3301      	adds	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	ddea      	ble.n	80019e4 <HELLO+0x18>
    }
	SYS_TICK_Delay(500);
 8001a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a12:	f000 fa2d 	bl	8001e70 <SYS_TICK_Delay>

	/*Clear Display*/
    for(int i=0;i<8;i++){
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	e00a      	b.n	8001a32 <HELLO+0x66>
        SendData(i+1, 0x00);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ffa2 	bl	8001970 <SendData>
    for(int i=0;i<8;i++){
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b07      	cmp	r3, #7
 8001a36:	ddf1      	ble.n	8001a1c <HELLO+0x50>
    }

}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	08002d20 	.word	0x08002d20

08001a48 <Put_Number_Left>:

void Put_Number_Left(uint16_t value){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
	uint8_t donvi;
	uint8_t chuc;
	uint8_t tram;
	uint8_t nghin;
	if(value < 10){
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d81b      	bhi.n	8001a90 <Put_Number_Left+0x48>
		donvi = value;
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	733b      	strb	r3, [r7, #12]
		SendData(0x01,NoDecode[donvi]);
 8001a5c:	7b3b      	ldrb	r3, [r7, #12]
 8001a5e:	4a79      	ldr	r2, [pc, #484]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001a60:	5cd3      	ldrb	r3, [r2, r3]
 8001a62:	4619      	mov	r1, r3
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7ff ff83 	bl	8001970 <SendData>
		SendData(0x02,NoDecode[11]);
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001a6c:	7adb      	ldrb	r3, [r3, #11]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	2002      	movs	r0, #2
 8001a72:	f7ff ff7d 	bl	8001970 <SendData>
		SendData(0x03,NoDecode[11]);
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001a78:	7adb      	ldrb	r3, [r3, #11]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f7ff ff77 	bl	8001970 <SendData>
		SendData(0x04,NoDecode[11]);
 8001a82:	4b70      	ldr	r3, [pc, #448]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001a84:	7adb      	ldrb	r3, [r3, #11]
 8001a86:	4619      	mov	r1, r3
 8001a88:	2004      	movs	r0, #4
 8001a8a:	f7ff ff71 	bl	8001970 <SendData>
		SendData(0x03,NoDecode[tram]);
		SendData(0x04,NoDecode[nghin]);

	}

}
 8001a8e:	e0d5      	b.n	8001c3c <Put_Number_Left+0x1f4>
	}else if(value < 100 ){
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b63      	cmp	r3, #99	; 0x63
 8001a94:	d82d      	bhi.n	8001af2 <Put_Number_Left+0xaa>
		chuc = value / 10;
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4a6b      	ldr	r2, [pc, #428]	; (8001c48 <Put_Number_Left+0x200>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	737b      	strb	r3, [r7, #13]
		donvi = value % 10;
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <Put_Number_Left+0x200>)
 8001aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8001aac:	08d9      	lsrs	r1, r3, #3
 8001aae:	460b      	mov	r3, r1
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	733b      	strb	r3, [r7, #12]
		SendData(0x01,NoDecode[donvi]);
 8001abc:	7b3b      	ldrb	r3, [r7, #12]
 8001abe:	4a61      	ldr	r2, [pc, #388]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7ff ff53 	bl	8001970 <SendData>
		SendData(0x02,NoDecode[chuc]);
 8001aca:	7b7b      	ldrb	r3, [r7, #13]
 8001acc:	4a5d      	ldr	r2, [pc, #372]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f7ff ff4c 	bl	8001970 <SendData>
		SendData(0x03,NoDecode[11]);
 8001ad8:	4b5a      	ldr	r3, [pc, #360]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001ada:	7adb      	ldrb	r3, [r3, #11]
 8001adc:	4619      	mov	r1, r3
 8001ade:	2003      	movs	r0, #3
 8001ae0:	f7ff ff46 	bl	8001970 <SendData>
		SendData(0x04,NoDecode[11]);
 8001ae4:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001ae6:	7adb      	ldrb	r3, [r3, #11]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	2004      	movs	r0, #4
 8001aec:	f7ff ff40 	bl	8001970 <SendData>
}
 8001af0:	e0a4      	b.n	8001c3c <Put_Number_Left+0x1f4>
	}else if(value < 1000){
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001af8:	d244      	bcs.n	8001b84 <Put_Number_Left+0x13c>
		tram = value / 100;
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	4a53      	ldr	r2, [pc, #332]	; (8001c4c <Put_Number_Left+0x204>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	73bb      	strb	r3, [r7, #14]
		chuc = (value - tram*100) /10;
 8001b08:	88fa      	ldrh	r2, [r7, #6]
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	4a4e      	ldr	r2, [pc, #312]	; (8001c50 <Put_Number_Left+0x208>)
 8001b18:	fb82 1203 	smull	r1, r2, r2, r3
 8001b1c:	1092      	asrs	r2, r2, #2
 8001b1e:	17db      	asrs	r3, r3, #31
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	737b      	strb	r3, [r7, #13]
		donvi = (value - tram*100) % 10;
 8001b24:	88fa      	ldrh	r2, [r7, #6]
 8001b26:	7bbb      	ldrb	r3, [r7, #14]
 8001b28:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	441a      	add	r2, r3
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <Put_Number_Left+0x208>)
 8001b34:	fb83 1302 	smull	r1, r3, r3, r2
 8001b38:	1099      	asrs	r1, r3, #2
 8001b3a:	17d3      	asrs	r3, r2, #31
 8001b3c:	1ac9      	subs	r1, r1, r3
 8001b3e:	460b      	mov	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	1ad1      	subs	r1, r2, r3
 8001b48:	460b      	mov	r3, r1
 8001b4a:	733b      	strb	r3, [r7, #12]
		SendData(0x01,NoDecode[donvi]);
 8001b4c:	7b3b      	ldrb	r3, [r7, #12]
 8001b4e:	4a3d      	ldr	r2, [pc, #244]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	4619      	mov	r1, r3
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7ff ff0b 	bl	8001970 <SendData>
		SendData(0x02,NoDecode[chuc]);
 8001b5a:	7b7b      	ldrb	r3, [r7, #13]
 8001b5c:	4a39      	ldr	r2, [pc, #228]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	4619      	mov	r1, r3
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7ff ff04 	bl	8001970 <SendData>
		SendData(0x03,NoDecode[tram]);
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	4a36      	ldr	r2, [pc, #216]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	2003      	movs	r0, #3
 8001b72:	f7ff fefd 	bl	8001970 <SendData>
		SendData(0x04,NoDecode[11]);
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001b78:	7adb      	ldrb	r3, [r3, #11]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff fef7 	bl	8001970 <SendData>
}
 8001b82:	e05b      	b.n	8001c3c <Put_Number_Left+0x1f4>
		nghin = value / 1000;
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <Put_Number_Left+0x20c>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	73fb      	strb	r3, [r7, #15]
		tram = (value - nghin*1000) / 100;
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	4930      	ldr	r1, [pc, #192]	; (8001c58 <Put_Number_Left+0x210>)
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a2b      	ldr	r2, [pc, #172]	; (8001c4c <Put_Number_Left+0x204>)
 8001ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba4:	1152      	asrs	r2, r2, #5
 8001ba6:	17db      	asrs	r3, r3, #31
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	73bb      	strb	r3, [r7, #14]
		chuc = (value - nghin*1000 - tram*100) / 10;
 8001bac:	88fa      	ldrh	r2, [r7, #6]
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	4929      	ldr	r1, [pc, #164]	; (8001c58 <Put_Number_Left+0x210>)
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	441a      	add	r2, r3
 8001bb8:	7bbb      	ldrb	r3, [r7, #14]
 8001bba:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <Put_Number_Left+0x208>)
 8001bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8001bca:	1092      	asrs	r2, r2, #2
 8001bcc:	17db      	asrs	r3, r3, #31
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	737b      	strb	r3, [r7, #13]
		donvi = (value - nghin*1000 - tram*100) % 10;
 8001bd2:	88fa      	ldrh	r2, [r7, #6]
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	4920      	ldr	r1, [pc, #128]	; (8001c58 <Put_Number_Left+0x210>)
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	441a      	add	r2, r3
 8001bde:	7bbb      	ldrb	r3, [r7, #14]
 8001be0:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	441a      	add	r2, r3
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <Put_Number_Left+0x208>)
 8001bec:	fb83 1302 	smull	r1, r3, r3, r2
 8001bf0:	1099      	asrs	r1, r3, #2
 8001bf2:	17d3      	asrs	r3, r2, #31
 8001bf4:	1ac9      	subs	r1, r1, r3
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	1ad1      	subs	r1, r2, r3
 8001c00:	460b      	mov	r3, r1
 8001c02:	733b      	strb	r3, [r7, #12]
		SendData(0x01,NoDecode[donvi]);
 8001c04:	7b3b      	ldrb	r3, [r7, #12]
 8001c06:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff feaf 	bl	8001970 <SendData>
		SendData(0x02,NoDecode[chuc]);
 8001c12:	7b7b      	ldrb	r3, [r7, #13]
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f7ff fea8 	bl	8001970 <SendData>
		SendData(0x03,NoDecode[tram]);
 8001c20:	7bbb      	ldrb	r3, [r7, #14]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001c24:	5cd3      	ldrb	r3, [r2, r3]
 8001c26:	4619      	mov	r1, r3
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f7ff fea1 	bl	8001970 <SendData>
		SendData(0x04,NoDecode[nghin]);
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <Put_Number_Left+0x1fc>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	4619      	mov	r1, r3
 8001c36:	2004      	movs	r0, #4
 8001c38:	f7ff fe9a 	bl	8001970 <SendData>
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000000 	.word	0x20000000
 8001c48:	cccccccd 	.word	0xcccccccd
 8001c4c:	51eb851f 	.word	0x51eb851f
 8001c50:	66666667 	.word	0x66666667
 8001c54:	10624dd3 	.word	0x10624dd3
 8001c58:	fffffc18 	.word	0xfffffc18

08001c5c <SPI2_Init>:
#include "stm32f407xx.h"
#include "spi.h"


void SPI2_Init(void){
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	 * PB13: SCK
	 * PB14: MISO
	 * PB15: MOSI
	 * */
	/*Enable clock for SPI2*/
	RCC->APB1ENR |= APB1ENR_SPI2EN;
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <SPI2_Init+0x108>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <SPI2_Init+0x108>)
 8001c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enable Clock for port B*/

	RCC->AHB1ENR |= AHB1ENR_GPIOB_EN;
 8001c6c:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <SPI2_Init+0x108>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a3c      	ldr	r2, [pc, #240]	; (8001d64 <SPI2_Init+0x108>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30

	/*Configuates mode for port PB12 PB13 PB14*/
	/*General purpose output mode*/
	/*NSS: Output*/
	GPIOB->MODER |= (0x02<<24);
 8001c78:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <SPI2_Init+0x10c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a3a      	ldr	r2, [pc, #232]	; (8001d68 <SPI2_Init+0x10c>)
 8001c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c82:	6013      	str	r3, [r2, #0]
	/*SCK: Output*/
	GPIOB->MODER |= (0x02<<26);
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <SPI2_Init+0x10c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a37      	ldr	r2, [pc, #220]	; (8001d68 <SPI2_Init+0x10c>)
 8001c8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c8e:	6013      	str	r3, [r2, #0]
	/*MISO : Input*/
	GPIOB->MODER |= (0x02<<28);
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <SPI2_Init+0x10c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a34      	ldr	r2, [pc, #208]	; (8001d68 <SPI2_Init+0x10c>)
 8001c96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c9a:	6013      	str	r3, [r2, #0]
	/*MOSI: Output*/
	GPIOB->MODER |= (0x02<<30);
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <SPI2_Init+0x10c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <SPI2_Init+0x10c>)
 8001ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ca6:	6013      	str	r3, [r2, #0]


	/*Output push pull*/
	GPIOB->OTYPER  |= (0x0<<12);
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <SPI2_Init+0x10c>)
 8001caa:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <SPI2_Init+0x10c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	6053      	str	r3, [r2, #4]

	/*Speed for port B: Medium*/
	GPIOB->OSPEEDR |= (0x55<<24);
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <SPI2_Init+0x10c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <SPI2_Init+0x10c>)
 8001cb6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001cba:	6093      	str	r3, [r2, #8]

	/*Alternate function : ALT5*/
	GPIOB->AFR[1] |= (0x5555<<16);
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <SPI2_Init+0x10c>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <SPI2_Init+0x10c>)
 8001cc2:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001cc6:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8001cca:	6253      	str	r3, [r2, #36]	; 0x24

	/*<---------SPI Configuration----------->*/
	/*Data Frame : 16bit*/
	//SPI2->SPI_CR1 &=~ (1<<11);
	SPI2->CR1 |= CR1_DFF;
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <SPI2_Init+0x110>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a26      	ldr	r2, [pc, #152]	; (8001d6c <SPI2_Init+0x110>)
 8001cd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd6:	6013      	str	r3, [r2, #0]

	/*Software slave management: Control by hardware*/
	SPI2->CR1 &=~ CR1_SSM;
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <SPI2_Init+0x110>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <SPI2_Init+0x110>)
 8001cde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ce2:	6013      	str	r3, [r2, #0]

	/*Frame format: MBS first*/
	SPI2->CR1 &=~ CR1_LSBFIRST;
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <SPI2_Init+0x110>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <SPI2_Init+0x110>)
 8001cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cee:	6013      	str	r3, [r2, #0]

	/*Baurate speed: fAHB2/2 = 16/2=8Mhz */
	SPI2->CR1 &=~ (0x07<<3);
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <SPI2_Init+0x110>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <SPI2_Init+0x110>)
 8001cf6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cfa:	6013      	str	r3, [r2, #0]

	/*Master selection mode*/
	SPI2->CR1 |= CR1_MSTR;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <SPI2_Init+0x110>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <SPI2_Init+0x110>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6013      	str	r3, [r2, #0]

	/*Clock polarity CPOL:1*/
	SPI2->CR1 &=~ CR1_CPOL;
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <SPI2_Init+0x110>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <SPI2_Init+0x110>)
 8001d0e:	f023 0302 	bic.w	r3, r3, #2
 8001d12:	6013      	str	r3, [r2, #0]

	/*Clock phase CPHA:1*/
	SPI2->CR1 &=~ CR1_CPHA;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <SPI2_Init+0x110>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <SPI2_Init+0x110>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]

	/*Control Register 2*/
	/*No configuration interrupt mode*/
	/*Frame format*/
	SPI2->CR2 &=~ CR2_FRF;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <SPI2_Init+0x110>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <SPI2_Init+0x110>)
 8001d26:	f023 0310 	bic.w	r3, r3, #16
 8001d2a:	6053      	str	r3, [r2, #4]

	/*SSOE : SS output enable. Enable in master mode */
	//SPI2->SPI_CR2 |= (1<<2);

	/*Enable SPI peripheral*/
	SPI2->CR1|= CR1_SPE;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <SPI2_Init+0x110>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <SPI2_Init+0x110>)
 8001d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d36:	6013      	str	r3, [r2, #0]

	//RCC->RCC_APB1LPENR &=~(1<<14);
	RCC->AHB1ENR |= (1<<3);
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <SPI2_Init+0x108>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <SPI2_Init+0x108>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER|=(0x01<<18); //Output mode general purpose
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <SPI2_Init+0x114>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <SPI2_Init+0x114>)
 8001d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]
	GPIOD->ODR |= (1<<9); // Pull up
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <SPI2_Init+0x114>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <SPI2_Init+0x114>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5a:	6153      	str	r3, [r2, #20]

}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40003800 	.word	0x40003800
 8001d70:	40020c00 	.word	0x40020c00

08001d74 <SPI_Transmit_16bits>:
		/*Wait SPI2 not busy: Transmit done*/
		while( !(SPI2->SR & SR_BSY) );
		i++;
	}
}
void SPI_Transmit_16bits( uint8_t* TX_Data, uint16_t TX_Size){
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
	/* Remember set bit Frame Data SPI2->CR1 |=(1<<11) */
	GPIOD->ODR &=~(1<<9);
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <SPI_Transmit_16bits+0x88>)
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <SPI_Transmit_16bits+0x88>)
 8001d86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d8a:	6153      	str	r3, [r2, #20]
	uint16_t i = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	81fb      	strh	r3, [r7, #14]
	while(i< TX_Size){
 8001d90:	e025      	b.n	8001dde <SPI_Transmit_16bits+0x6a>
		/* Check transmit buffer empty*/
		while( !(SPI2->SR & (1<<1)) );
 8001d92:	bf00      	nop
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <SPI_Transmit_16bits+0x8c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f9      	beq.n	8001d94 <SPI_Transmit_16bits+0x20>
		/* Send data */
		uint16_t temp = ((TX_Data[i]<<8) | (TX_Data[i+1]<<0)) ;
 8001da0:	89fb      	ldrh	r3, [r7, #14]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	89fb      	ldrh	r3, [r7, #14]
 8001dae:	3301      	adds	r3, #1
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	440b      	add	r3, r1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b21b      	sxth	r3, r3
 8001dbc:	81bb      	strh	r3, [r7, #12]
		SPI2->DR = temp;
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <SPI_Transmit_16bits+0x8c>)
 8001dc0:	89bb      	ldrh	r3, [r7, #12]
 8001dc2:	60d3      	str	r3, [r2, #12]
		/*Wait SPI2 not busy: Transmit done*/
		while( !(SPI2->SR & SR_BSY) );
 8001dc4:	bf00      	nop
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <SPI_Transmit_16bits+0x8c>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f9      	beq.n	8001dc6 <SPI_Transmit_16bits+0x52>
		i++;
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	81fb      	strh	r3, [r7, #14]
		i++;
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	81fb      	strh	r3, [r7, #14]
	while(i< TX_Size){
 8001dde:	89fa      	ldrh	r2, [r7, #14]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d3d5      	bcc.n	8001d92 <SPI_Transmit_16bits+0x1e>
	}
	GPIOD->ODR |= (1<<9);
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SPI_Transmit_16bits+0x88>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <SPI_Transmit_16bits+0x88>)
 8001dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df0:	6153      	str	r3, [r2, #20]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40003800 	.word	0x40003800

08001e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <_sbrk+0x5c>)
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <_sbrk+0x60>)
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_sbrk+0x64>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <_sbrk+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d207      	bcs.n	8001e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e34:	f000 f946 	bl	80020c4 <__errno>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	e009      	b.n	8001e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <_sbrk+0x64>)
 8001e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20020000 	.word	0x20020000
 8001e64:	00000400 	.word	0x00000400
 8001e68:	200000d4 	.word	0x200000d4
 8001e6c:	200000f0 	.word	0x200000f0

08001e70 <SYS_TICK_Delay>:
#define SYSTICK_LOAD_VALUE		16000
#define CTRL_ENABLE				(1U<<0)
#define CTRL_CLKSRC				(1U<<2)
#define	CTRL_COUNTFLAG			(1U<<16)

void SYS_TICK_Delay(int ms){
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	/*Reaload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VALUE;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <SYS_TICK_Delay+0x50>)
 8001e7a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001e7e:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register*/
	SysTick->VAL = 0;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <SYS_TICK_Delay+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clock source*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <SYS_TICK_Delay+0x50>)
 8001e88:	2205      	movs	r2, #5
 8001e8a:	601a      	str	r2, [r3, #0]

	for(int i = 0;i < ms; i++){
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e009      	b.n	8001ea6 <SYS_TICK_Delay+0x36>
		/*Wait until the countflag is set*/

		while( (SysTick->CTRL & CTRL_COUNTFLAG) == 0 ){}
 8001e92:	bf00      	nop
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <SYS_TICK_Delay+0x50>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f9      	beq.n	8001e94 <SYS_TICK_Delay+0x24>
	for(int i = 0;i < ms; i++){
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	dbf1      	blt.n	8001e92 <SYS_TICK_Delay+0x22>
	}
	SysTick->CTRL = 0;
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SYS_TICK_Delay+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <TIM1_Init>:
#include <tim2.h>
#include <stm32f407xx.h>
#define TIM1_EN		(1U<<0)


void TIM1_Init(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

	/*Enable clock access to tim2*/
	RCC->APB2ENR = TIM1_EN;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <TIM1_Init+0x58>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44
	/*Set prescaler value*/
	TIM1->PSC = 800-1;    //16.000.000/800=20.000
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <TIM1_Init+0x5c>)
 8001ed0:	f240 321f 	movw	r2, #799	; 0x31f
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set auto - reload value*/
	//TIM2->ARR = 100 -1 ; //20.000/200 = 200 -> 5ms
	TIM1->ARR = 200-1;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <TIM1_Init+0x5c>)
 8001ed8:	22c7      	movs	r2, #199	; 0xc7
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Clear counter*/
	TIM1->CNT = 0;
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <TIM1_Init+0x5c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
	/*Clear interrupt flag*/
	TIM1->SR &=~(1U<<0);
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <TIM1_Init+0x5c>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <TIM1_Init+0x5c>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6113      	str	r3, [r2, #16]
	/*Configurate mode for timer*/
	/*No effect on the output*/
	TIM1->EGR |= (1<<0);
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <TIM1_Init+0x5c>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <TIM1_Init+0x5c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6153      	str	r3, [r2, #20]
	/*Enable timer*/
	TIM1->CR1 |=(1<<0);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <TIM1_Init+0x5c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <TIM1_Init+0x5c>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6013      	str	r3, [r2, #0]

	/*Enable interrupt*/
	TIM1->DIER |=(1<<0);
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <TIM1_Init+0x5c>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <TIM1_Init+0x5c>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	60d3      	str	r3, [r2, #12]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40010000 	.word	0x40010000

08001f24 <TIM1_Interrupt_Init>:
void TIM1_Interrupt_Init(void){
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

	/*Clear pending  Pos : 28*/
	NVIC->ICPR[0] |= 1 << (TIM1_UP_TIM10_IRQn % 32);
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <TIM1_Interrupt_Init+0x30>)
 8001f2a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <TIM1_Interrupt_Init+0x30>)
 8001f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f34:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	/*Set priority*/
	NVIC->IP[TIM2_IRQn] = 0x01;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <TIM1_Interrupt_Init+0x30>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

	//NVIC_SetPriority(TIM2_IRQn, 2);
	//NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
	NVIC->ISER[0] |= 1 << (TIM1_UP_TIM10_IRQn % 32);
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <TIM1_Interrupt_Init+0x30>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <TIM1_Interrupt_Init+0x30>)
 8001f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	6013      	str	r3, [r2, #0]

}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <UART2_Init>:
#include "uart2.h"

uint8_t  SizeBuffer;


void UART2_Init(void){
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
	/*--------------------------------Configuration uart gpio pin------------------------------------------*/
	/*Enble clock access to port A*/
	RCC->AHB1ENR |= (1U<<0);
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <UART2_Init+0xb0>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	4a29      	ldr	r2, [pc, #164]	; (8002008 <UART2_Init+0xb0>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2  & PA 3 mode to alternate function mode */
	GPIOA->MODER |= (0x2<<4);
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <UART2_Init+0xb4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a27      	ldr	r2, [pc, #156]	; (800200c <UART2_Init+0xb4>)
 8001f6e:	f043 0320 	orr.w	r3, r3, #32
 8001f72:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2<<6);
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <UART2_Init+0xb4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a24      	ldr	r2, [pc, #144]	; (800200c <UART2_Init+0xb4>)
 8001f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7e:	6013      	str	r3, [r2, #0]
	/*Set PA2 & PA3 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (0x7<<8);
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <UART2_Init+0xb4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <UART2_Init+0xb4>)
 8001f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7<<12);
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <UART2_Init+0xb4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	; (800200c <UART2_Init+0xb4>)
 8001f92:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001f96:	6213      	str	r3, [r2, #32]
	/*-------------------------------Configuration uart module -------------------------------------------*/
	/*Enable clock access to uart 2*/
	RCC->APB1ENR = (1U<<17);
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <UART2_Init+0xb0>)
 8001f9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
	/*Configure baudrate*/
	/*9600- 16Mhz*/
	USART2->BRR |= (0x68<<4);			/*Clock input 16Mhz*/
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <UART2_Init+0xb8>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <UART2_Init+0xb8>)
 8001fa6:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8001faa:	6093      	str	r3, [r2, #8]
	USART2->BRR |= (0x03<<0);			/*Baudrate = 9600bps*/
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <UART2_Init+0xb8>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <UART2_Init+0xb8>)
 8001fb2:	f043 0303 	orr.w	r3, r3, #3
 8001fb6:	6093      	str	r3, [r2, #8]
	/*Configure word length*/
	USART2->CR1 &=~(1U<<12);			/*8 bit Data */
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <UART2_Init+0xb8>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a14      	ldr	r2, [pc, #80]	; (8002010 <UART2_Init+0xb8>)
 8001fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fc2:	60d3      	str	r3, [r2, #12]

	/*Configure number of stop bits*/
	USART2->CR2 &=~(0x3<<12);			/* 1 stop bit*/
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <UART2_Init+0xb8>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	4a11      	ldr	r2, [pc, #68]	; (8002010 <UART2_Init+0xb8>)
 8001fca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fce:	6113      	str	r3, [r2, #16]

	/*Configure transfer direction*/
	USART2->CR1 |= (1U<<3); 			/*Transmit*/
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <UART2_Init+0xb8>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <UART2_Init+0xb8>)
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1U<<2);				/*Receiver*/
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <UART2_Init+0xb8>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <UART2_Init+0xb8>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	60d3      	str	r3, [r2, #12]

	/*Enable Interrupt when Data valid*/
	USART2->CR1 |=(1U<<5);
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <UART2_Init+0xb8>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a08      	ldr	r2, [pc, #32]	; (8002010 <UART2_Init+0xb8>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	60d3      	str	r3, [r2, #12]

	/*Enable uart module*/
	USART2->CR1 |= (1U<<13);
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <UART2_Init+0xb8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <UART2_Init+0xb8>)
 8001ffa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40023800 	.word	0x40023800
 800200c:	40020000 	.word	0x40020000
 8002010:	40004400 	.word	0x40004400

08002014 <UART_Receive>:
	}
	/*Waiting transmit complete*/
	while(!(USART2->SR &(1<<6))){}
}

void UART_Receive(uint8_t *RX_Data) {
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
    SizeBuffer = 0;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <UART_Receive+0x54>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    while (1) {
        /* Waitting Data Receive not empty <=> RXNE */
        while (!(USART2->SR & (1 << 5)));
 8002026:	bf00      	nop
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <UART_Receive+0x58>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f9      	beq.n	8002028 <UART_Receive+0x14>

        /* Clear RXNE */
        *RX_Data = (uint8_t)(USART2->DR & 0xFF);
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <UART_Receive+0x58>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	701a      	strb	r2, [r3, #0]

        if (*RX_Data == '.') {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b2e      	cmp	r3, #46	; 0x2e
 8002044:	d103      	bne.n	800204e <UART_Receive+0x3a>
            SizeBuffer = i; // Đặt giá trị cho SizeBuffer trước khi kết thúc vòng lặp
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <UART_Receive+0x54>)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	7013      	strb	r3, [r2, #0]
            break;
 800204c:	e006      	b.n	800205c <UART_Receive+0x48>
        }

        RX_Data++;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3301      	adds	r3, #1
 8002052:	607b      	str	r3, [r7, #4]
        i++;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	3301      	adds	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
        while (!(USART2->SR & (1 << 5)));
 800205a:	e7e4      	b.n	8002026 <UART_Receive+0x12>
    }
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200000d8 	.word	0x200000d8
 800206c:	40004400 	.word	0x40004400

08002070 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002072:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002074:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <LoopForever+0x6>)
  ldr r1, =_edata
 800207a:	490d      	ldr	r1, [pc, #52]	; (80020b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <LoopForever+0xe>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002080:	e002      	b.n	8002088 <LoopCopyDataInit>

08002082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002086:	3304      	adds	r3, #4

08002088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800208c:	d3f9      	bcc.n	8002082 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002090:	4c0a      	ldr	r4, [pc, #40]	; (80020bc <LoopForever+0x16>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002094:	e001      	b.n	800209a <LoopFillZerobss>

08002096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002098:	3204      	adds	r2, #4

0800209a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800209c:	d3fb      	bcc.n	8002096 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800209e:	f000 f817 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020a2:	f7ff f8b3 	bl	800120c <main>

080020a6 <LoopForever>:

LoopForever:
  b LoopForever
 80020a6:	e7fe      	b.n	80020a6 <LoopForever>
  ldr   r0, =_estack
 80020a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020b4:	08002ebc 	.word	0x08002ebc
  ldr r2, =_sbss
 80020b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020bc:	200000ec 	.word	0x200000ec

080020c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC_IRQHandler>
	...

080020c4 <__errno>:
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <__errno+0x8>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	4d0d      	ldr	r5, [pc, #52]	; (8002108 <__libc_init_array+0x38>)
 80020d4:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d6:	1b64      	subs	r4, r4, r5
 80020d8:	10a4      	asrs	r4, r4, #2
 80020da:	2600      	movs	r6, #0
 80020dc:	42a6      	cmp	r6, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	4d0b      	ldr	r5, [pc, #44]	; (8002110 <__libc_init_array+0x40>)
 80020e2:	4c0c      	ldr	r4, [pc, #48]	; (8002114 <__libc_init_array+0x44>)
 80020e4:	f000 fe0e 	bl	8002d04 <_init>
 80020e8:	1b64      	subs	r4, r4, r5
 80020ea:	10a4      	asrs	r4, r4, #2
 80020ec:	2600      	movs	r6, #0
 80020ee:	42a6      	cmp	r6, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f8:	4798      	blx	r3
 80020fa:	3601      	adds	r6, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002102:	4798      	blx	r3
 8002104:	3601      	adds	r6, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	08002eb4 	.word	0x08002eb4
 800210c:	08002eb4 	.word	0x08002eb4
 8002110:	08002eb4 	.word	0x08002eb4
 8002114:	08002eb8 	.word	0x08002eb8

08002118 <siscanf>:
 8002118:	b40e      	push	{r1, r2, r3}
 800211a:	b530      	push	{r4, r5, lr}
 800211c:	b09c      	sub	sp, #112	; 0x70
 800211e:	ac1f      	add	r4, sp, #124	; 0x7c
 8002120:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002124:	f854 5b04 	ldr.w	r5, [r4], #4
 8002128:	f8ad 2014 	strh.w	r2, [sp, #20]
 800212c:	9002      	str	r0, [sp, #8]
 800212e:	9006      	str	r0, [sp, #24]
 8002130:	f7fe f85e 	bl	80001f0 <strlen>
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <siscanf+0x4c>)
 8002136:	9003      	str	r0, [sp, #12]
 8002138:	9007      	str	r0, [sp, #28]
 800213a:	930b      	str	r3, [sp, #44]	; 0x2c
 800213c:	480a      	ldr	r0, [pc, #40]	; (8002168 <siscanf+0x50>)
 800213e:	9401      	str	r4, [sp, #4]
 8002140:	2300      	movs	r3, #0
 8002142:	930f      	str	r3, [sp, #60]	; 0x3c
 8002144:	9314      	str	r3, [sp, #80]	; 0x50
 8002146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800214a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800214e:	462a      	mov	r2, r5
 8002150:	4623      	mov	r3, r4
 8002152:	a902      	add	r1, sp, #8
 8002154:	6800      	ldr	r0, [r0, #0]
 8002156:	f000 f865 	bl	8002224 <__ssvfiscanf_r>
 800215a:	b01c      	add	sp, #112	; 0x70
 800215c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002160:	b003      	add	sp, #12
 8002162:	4770      	bx	lr
 8002164:	0800216d 	.word	0x0800216d
 8002168:	2000000c 	.word	0x2000000c

0800216c <__seofread>:
 800216c:	2000      	movs	r0, #0
 800216e:	4770      	bx	lr

08002170 <_sungetc_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	1c4b      	adds	r3, r1, #1
 8002174:	4614      	mov	r4, r2
 8002176:	d103      	bne.n	8002180 <_sungetc_r+0x10>
 8002178:	f04f 35ff 	mov.w	r5, #4294967295
 800217c:	4628      	mov	r0, r5
 800217e:	bd38      	pop	{r3, r4, r5, pc}
 8002180:	8993      	ldrh	r3, [r2, #12]
 8002182:	f023 0320 	bic.w	r3, r3, #32
 8002186:	8193      	strh	r3, [r2, #12]
 8002188:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800218a:	6852      	ldr	r2, [r2, #4]
 800218c:	b2cd      	uxtb	r5, r1
 800218e:	b18b      	cbz	r3, 80021b4 <_sungetc_r+0x44>
 8002190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002192:	4293      	cmp	r3, r2
 8002194:	dd08      	ble.n	80021a8 <_sungetc_r+0x38>
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	6022      	str	r2, [r4, #0]
 800219c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	6063      	str	r3, [r4, #4]
 80021a6:	e7e9      	b.n	800217c <_sungetc_r+0xc>
 80021a8:	4621      	mov	r1, r4
 80021aa:	f000 fc2f 	bl	8002a0c <__submore>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d0f1      	beq.n	8002196 <_sungetc_r+0x26>
 80021b2:	e7e1      	b.n	8002178 <_sungetc_r+0x8>
 80021b4:	6921      	ldr	r1, [r4, #16]
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	b151      	cbz	r1, 80021d0 <_sungetc_r+0x60>
 80021ba:	4299      	cmp	r1, r3
 80021bc:	d208      	bcs.n	80021d0 <_sungetc_r+0x60>
 80021be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80021c2:	42a9      	cmp	r1, r5
 80021c4:	d104      	bne.n	80021d0 <_sungetc_r+0x60>
 80021c6:	3b01      	subs	r3, #1
 80021c8:	3201      	adds	r2, #1
 80021ca:	6023      	str	r3, [r4, #0]
 80021cc:	6062      	str	r2, [r4, #4]
 80021ce:	e7d5      	b.n	800217c <_sungetc_r+0xc>
 80021d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80021d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021d8:	6363      	str	r3, [r4, #52]	; 0x34
 80021da:	2303      	movs	r3, #3
 80021dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80021de:	4623      	mov	r3, r4
 80021e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80021e4:	6023      	str	r3, [r4, #0]
 80021e6:	2301      	movs	r3, #1
 80021e8:	e7dc      	b.n	80021a4 <_sungetc_r+0x34>

080021ea <__ssrefill_r>:
 80021ea:	b510      	push	{r4, lr}
 80021ec:	460c      	mov	r4, r1
 80021ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80021f0:	b169      	cbz	r1, 800220e <__ssrefill_r+0x24>
 80021f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021f6:	4299      	cmp	r1, r3
 80021f8:	d001      	beq.n	80021fe <__ssrefill_r+0x14>
 80021fa:	f000 fc51 	bl	8002aa0 <_free_r>
 80021fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002200:	6063      	str	r3, [r4, #4]
 8002202:	2000      	movs	r0, #0
 8002204:	6360      	str	r0, [r4, #52]	; 0x34
 8002206:	b113      	cbz	r3, 800220e <__ssrefill_r+0x24>
 8002208:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800220a:	6023      	str	r3, [r4, #0]
 800220c:	bd10      	pop	{r4, pc}
 800220e:	6923      	ldr	r3, [r4, #16]
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	2300      	movs	r3, #0
 8002214:	6063      	str	r3, [r4, #4]
 8002216:	89a3      	ldrh	r3, [r4, #12]
 8002218:	f043 0320 	orr.w	r3, r3, #32
 800221c:	81a3      	strh	r3, [r4, #12]
 800221e:	f04f 30ff 	mov.w	r0, #4294967295
 8002222:	e7f3      	b.n	800220c <__ssrefill_r+0x22>

08002224 <__ssvfiscanf_r>:
 8002224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002228:	460c      	mov	r4, r1
 800222a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800222e:	2100      	movs	r1, #0
 8002230:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002234:	49a6      	ldr	r1, [pc, #664]	; (80024d0 <__ssvfiscanf_r+0x2ac>)
 8002236:	91a0      	str	r1, [sp, #640]	; 0x280
 8002238:	f10d 0804 	add.w	r8, sp, #4
 800223c:	49a5      	ldr	r1, [pc, #660]	; (80024d4 <__ssvfiscanf_r+0x2b0>)
 800223e:	4fa6      	ldr	r7, [pc, #664]	; (80024d8 <__ssvfiscanf_r+0x2b4>)
 8002240:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80024dc <__ssvfiscanf_r+0x2b8>
 8002244:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002248:	4606      	mov	r6, r0
 800224a:	91a1      	str	r1, [sp, #644]	; 0x284
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	7813      	ldrb	r3, [r2, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 815a 	beq.w	800250a <__ssvfiscanf_r+0x2e6>
 8002256:	5dd9      	ldrb	r1, [r3, r7]
 8002258:	f011 0108 	ands.w	r1, r1, #8
 800225c:	f102 0501 	add.w	r5, r2, #1
 8002260:	d019      	beq.n	8002296 <__ssvfiscanf_r+0x72>
 8002262:	6863      	ldr	r3, [r4, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	dd0f      	ble.n	8002288 <__ssvfiscanf_r+0x64>
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	5cba      	ldrb	r2, [r7, r2]
 800226e:	0712      	lsls	r2, r2, #28
 8002270:	d401      	bmi.n	8002276 <__ssvfiscanf_r+0x52>
 8002272:	462a      	mov	r2, r5
 8002274:	e7eb      	b.n	800224e <__ssvfiscanf_r+0x2a>
 8002276:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002278:	3201      	adds	r2, #1
 800227a:	9245      	str	r2, [sp, #276]	; 0x114
 800227c:	6862      	ldr	r2, [r4, #4]
 800227e:	3301      	adds	r3, #1
 8002280:	3a01      	subs	r2, #1
 8002282:	6062      	str	r2, [r4, #4]
 8002284:	6023      	str	r3, [r4, #0]
 8002286:	e7ec      	b.n	8002262 <__ssvfiscanf_r+0x3e>
 8002288:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800228a:	4621      	mov	r1, r4
 800228c:	4630      	mov	r0, r6
 800228e:	4798      	blx	r3
 8002290:	2800      	cmp	r0, #0
 8002292:	d0e9      	beq.n	8002268 <__ssvfiscanf_r+0x44>
 8002294:	e7ed      	b.n	8002272 <__ssvfiscanf_r+0x4e>
 8002296:	2b25      	cmp	r3, #37	; 0x25
 8002298:	d012      	beq.n	80022c0 <__ssvfiscanf_r+0x9c>
 800229a:	469a      	mov	sl, r3
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f340 8091 	ble.w	80023c6 <__ssvfiscanf_r+0x1a2>
 80022a4:	6822      	ldr	r2, [r4, #0]
 80022a6:	7813      	ldrb	r3, [r2, #0]
 80022a8:	4553      	cmp	r3, sl
 80022aa:	f040 812e 	bne.w	800250a <__ssvfiscanf_r+0x2e6>
 80022ae:	6863      	ldr	r3, [r4, #4]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	6063      	str	r3, [r4, #4]
 80022b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80022b6:	3201      	adds	r2, #1
 80022b8:	3301      	adds	r3, #1
 80022ba:	6022      	str	r2, [r4, #0]
 80022bc:	9345      	str	r3, [sp, #276]	; 0x114
 80022be:	e7d8      	b.n	8002272 <__ssvfiscanf_r+0x4e>
 80022c0:	9141      	str	r1, [sp, #260]	; 0x104
 80022c2:	9143      	str	r1, [sp, #268]	; 0x10c
 80022c4:	7853      	ldrb	r3, [r2, #1]
 80022c6:	2b2a      	cmp	r3, #42	; 0x2a
 80022c8:	bf02      	ittt	eq
 80022ca:	2310      	moveq	r3, #16
 80022cc:	1c95      	addeq	r5, r2, #2
 80022ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80022d0:	220a      	movs	r2, #10
 80022d2:	46aa      	mov	sl, r5
 80022d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80022d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d91d      	bls.n	800231c <__ssvfiscanf_r+0xf8>
 80022e0:	487e      	ldr	r0, [pc, #504]	; (80024dc <__ssvfiscanf_r+0x2b8>)
 80022e2:	2203      	movs	r2, #3
 80022e4:	f7fd ff8c 	bl	8000200 <memchr>
 80022e8:	b140      	cbz	r0, 80022fc <__ssvfiscanf_r+0xd8>
 80022ea:	2301      	movs	r3, #1
 80022ec:	eba0 0009 	sub.w	r0, r0, r9
 80022f0:	fa03 f000 	lsl.w	r0, r3, r0
 80022f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80022f6:	4318      	orrs	r0, r3
 80022f8:	9041      	str	r0, [sp, #260]	; 0x104
 80022fa:	4655      	mov	r5, sl
 80022fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002300:	2b78      	cmp	r3, #120	; 0x78
 8002302:	d806      	bhi.n	8002312 <__ssvfiscanf_r+0xee>
 8002304:	2b57      	cmp	r3, #87	; 0x57
 8002306:	d810      	bhi.n	800232a <__ssvfiscanf_r+0x106>
 8002308:	2b25      	cmp	r3, #37	; 0x25
 800230a:	d0c6      	beq.n	800229a <__ssvfiscanf_r+0x76>
 800230c:	d856      	bhi.n	80023bc <__ssvfiscanf_r+0x198>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d064      	beq.n	80023dc <__ssvfiscanf_r+0x1b8>
 8002312:	2303      	movs	r3, #3
 8002314:	9347      	str	r3, [sp, #284]	; 0x11c
 8002316:	230a      	movs	r3, #10
 8002318:	9342      	str	r3, [sp, #264]	; 0x108
 800231a:	e071      	b.n	8002400 <__ssvfiscanf_r+0x1dc>
 800231c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800231e:	fb02 1103 	mla	r1, r2, r3, r1
 8002322:	3930      	subs	r1, #48	; 0x30
 8002324:	9143      	str	r1, [sp, #268]	; 0x10c
 8002326:	4655      	mov	r5, sl
 8002328:	e7d3      	b.n	80022d2 <__ssvfiscanf_r+0xae>
 800232a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800232e:	2a20      	cmp	r2, #32
 8002330:	d8ef      	bhi.n	8002312 <__ssvfiscanf_r+0xee>
 8002332:	a101      	add	r1, pc, #4	; (adr r1, 8002338 <__ssvfiscanf_r+0x114>)
 8002334:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002338:	080023eb 	.word	0x080023eb
 800233c:	08002313 	.word	0x08002313
 8002340:	08002313 	.word	0x08002313
 8002344:	08002449 	.word	0x08002449
 8002348:	08002313 	.word	0x08002313
 800234c:	08002313 	.word	0x08002313
 8002350:	08002313 	.word	0x08002313
 8002354:	08002313 	.word	0x08002313
 8002358:	08002313 	.word	0x08002313
 800235c:	08002313 	.word	0x08002313
 8002360:	08002313 	.word	0x08002313
 8002364:	0800245f 	.word	0x0800245f
 8002368:	08002435 	.word	0x08002435
 800236c:	080023c3 	.word	0x080023c3
 8002370:	080023c3 	.word	0x080023c3
 8002374:	080023c3 	.word	0x080023c3
 8002378:	08002313 	.word	0x08002313
 800237c:	08002439 	.word	0x08002439
 8002380:	08002313 	.word	0x08002313
 8002384:	08002313 	.word	0x08002313
 8002388:	08002313 	.word	0x08002313
 800238c:	08002313 	.word	0x08002313
 8002390:	0800246f 	.word	0x0800246f
 8002394:	08002441 	.word	0x08002441
 8002398:	080023e3 	.word	0x080023e3
 800239c:	08002313 	.word	0x08002313
 80023a0:	08002313 	.word	0x08002313
 80023a4:	0800246b 	.word	0x0800246b
 80023a8:	08002313 	.word	0x08002313
 80023ac:	08002435 	.word	0x08002435
 80023b0:	08002313 	.word	0x08002313
 80023b4:	08002313 	.word	0x08002313
 80023b8:	080023eb 	.word	0x080023eb
 80023bc:	3b45      	subs	r3, #69	; 0x45
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d8a7      	bhi.n	8002312 <__ssvfiscanf_r+0xee>
 80023c2:	2305      	movs	r3, #5
 80023c4:	e01b      	b.n	80023fe <__ssvfiscanf_r+0x1da>
 80023c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80023c8:	4621      	mov	r1, r4
 80023ca:	4630      	mov	r0, r6
 80023cc:	4798      	blx	r3
 80023ce:	2800      	cmp	r0, #0
 80023d0:	f43f af68 	beq.w	80022a4 <__ssvfiscanf_r+0x80>
 80023d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80023d6:	2800      	cmp	r0, #0
 80023d8:	f040 808d 	bne.w	80024f6 <__ssvfiscanf_r+0x2d2>
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	e08f      	b.n	8002502 <__ssvfiscanf_r+0x2de>
 80023e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	9241      	str	r2, [sp, #260]	; 0x104
 80023ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	9241      	str	r2, [sp, #260]	; 0x104
 80023f2:	2210      	movs	r2, #16
 80023f4:	2b6f      	cmp	r3, #111	; 0x6f
 80023f6:	9242      	str	r2, [sp, #264]	; 0x108
 80023f8:	bf34      	ite	cc
 80023fa:	2303      	movcc	r3, #3
 80023fc:	2304      	movcs	r3, #4
 80023fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8002400:	6863      	ldr	r3, [r4, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	dd42      	ble.n	800248c <__ssvfiscanf_r+0x268>
 8002406:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002408:	0659      	lsls	r1, r3, #25
 800240a:	d404      	bmi.n	8002416 <__ssvfiscanf_r+0x1f2>
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	5cba      	ldrb	r2, [r7, r2]
 8002412:	0712      	lsls	r2, r2, #28
 8002414:	d441      	bmi.n	800249a <__ssvfiscanf_r+0x276>
 8002416:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002418:	2b02      	cmp	r3, #2
 800241a:	dc50      	bgt.n	80024be <__ssvfiscanf_r+0x29a>
 800241c:	466b      	mov	r3, sp
 800241e:	4622      	mov	r2, r4
 8002420:	a941      	add	r1, sp, #260	; 0x104
 8002422:	4630      	mov	r0, r6
 8002424:	f000 f876 	bl	8002514 <_scanf_chars>
 8002428:	2801      	cmp	r0, #1
 800242a:	d06e      	beq.n	800250a <__ssvfiscanf_r+0x2e6>
 800242c:	2802      	cmp	r0, #2
 800242e:	f47f af20 	bne.w	8002272 <__ssvfiscanf_r+0x4e>
 8002432:	e7cf      	b.n	80023d4 <__ssvfiscanf_r+0x1b0>
 8002434:	220a      	movs	r2, #10
 8002436:	e7dd      	b.n	80023f4 <__ssvfiscanf_r+0x1d0>
 8002438:	2300      	movs	r3, #0
 800243a:	9342      	str	r3, [sp, #264]	; 0x108
 800243c:	2303      	movs	r3, #3
 800243e:	e7de      	b.n	80023fe <__ssvfiscanf_r+0x1da>
 8002440:	2308      	movs	r3, #8
 8002442:	9342      	str	r3, [sp, #264]	; 0x108
 8002444:	2304      	movs	r3, #4
 8002446:	e7da      	b.n	80023fe <__ssvfiscanf_r+0x1da>
 8002448:	4629      	mov	r1, r5
 800244a:	4640      	mov	r0, r8
 800244c:	f000 f9b4 	bl	80027b8 <__sccl>
 8002450:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002456:	9341      	str	r3, [sp, #260]	; 0x104
 8002458:	4605      	mov	r5, r0
 800245a:	2301      	movs	r3, #1
 800245c:	e7cf      	b.n	80023fe <__ssvfiscanf_r+0x1da>
 800245e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002464:	9341      	str	r3, [sp, #260]	; 0x104
 8002466:	2300      	movs	r3, #0
 8002468:	e7c9      	b.n	80023fe <__ssvfiscanf_r+0x1da>
 800246a:	2302      	movs	r3, #2
 800246c:	e7c7      	b.n	80023fe <__ssvfiscanf_r+0x1da>
 800246e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002470:	06c3      	lsls	r3, r0, #27
 8002472:	f53f aefe 	bmi.w	8002272 <__ssvfiscanf_r+0x4e>
 8002476:	9b00      	ldr	r3, [sp, #0]
 8002478:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800247a:	1d19      	adds	r1, r3, #4
 800247c:	9100      	str	r1, [sp, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f010 0f01 	tst.w	r0, #1
 8002484:	bf14      	ite	ne
 8002486:	801a      	strhne	r2, [r3, #0]
 8002488:	601a      	streq	r2, [r3, #0]
 800248a:	e6f2      	b.n	8002272 <__ssvfiscanf_r+0x4e>
 800248c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800248e:	4621      	mov	r1, r4
 8002490:	4630      	mov	r0, r6
 8002492:	4798      	blx	r3
 8002494:	2800      	cmp	r0, #0
 8002496:	d0b6      	beq.n	8002406 <__ssvfiscanf_r+0x1e2>
 8002498:	e79c      	b.n	80023d4 <__ssvfiscanf_r+0x1b0>
 800249a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800249c:	3201      	adds	r2, #1
 800249e:	9245      	str	r2, [sp, #276]	; 0x114
 80024a0:	6862      	ldr	r2, [r4, #4]
 80024a2:	3a01      	subs	r2, #1
 80024a4:	2a00      	cmp	r2, #0
 80024a6:	6062      	str	r2, [r4, #4]
 80024a8:	dd02      	ble.n	80024b0 <__ssvfiscanf_r+0x28c>
 80024aa:	3301      	adds	r3, #1
 80024ac:	6023      	str	r3, [r4, #0]
 80024ae:	e7ad      	b.n	800240c <__ssvfiscanf_r+0x1e8>
 80024b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80024b2:	4621      	mov	r1, r4
 80024b4:	4630      	mov	r0, r6
 80024b6:	4798      	blx	r3
 80024b8:	2800      	cmp	r0, #0
 80024ba:	d0a7      	beq.n	800240c <__ssvfiscanf_r+0x1e8>
 80024bc:	e78a      	b.n	80023d4 <__ssvfiscanf_r+0x1b0>
 80024be:	2b04      	cmp	r3, #4
 80024c0:	dc0e      	bgt.n	80024e0 <__ssvfiscanf_r+0x2bc>
 80024c2:	466b      	mov	r3, sp
 80024c4:	4622      	mov	r2, r4
 80024c6:	a941      	add	r1, sp, #260	; 0x104
 80024c8:	4630      	mov	r0, r6
 80024ca:	f000 f87d 	bl	80025c8 <_scanf_i>
 80024ce:	e7ab      	b.n	8002428 <__ssvfiscanf_r+0x204>
 80024d0:	08002171 	.word	0x08002171
 80024d4:	080021eb 	.word	0x080021eb
 80024d8:	08002d54 	.word	0x08002d54
 80024dc:	08002d34 	.word	0x08002d34
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <__ssvfiscanf_r+0x2ec>)
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f43f aec5 	beq.w	8002272 <__ssvfiscanf_r+0x4e>
 80024e8:	466b      	mov	r3, sp
 80024ea:	4622      	mov	r2, r4
 80024ec:	a941      	add	r1, sp, #260	; 0x104
 80024ee:	4630      	mov	r0, r6
 80024f0:	f3af 8000 	nop.w
 80024f4:	e798      	b.n	8002428 <__ssvfiscanf_r+0x204>
 80024f6:	89a3      	ldrh	r3, [r4, #12]
 80024f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024fc:	bf18      	it	ne
 80024fe:	f04f 30ff 	movne.w	r0, #4294967295
 8002502:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8002506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800250a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800250c:	e7f9      	b.n	8002502 <__ssvfiscanf_r+0x2de>
 800250e:	bf00      	nop
 8002510:	00000000 	.word	0x00000000

08002514 <_scanf_chars>:
 8002514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002518:	4615      	mov	r5, r2
 800251a:	688a      	ldr	r2, [r1, #8]
 800251c:	4680      	mov	r8, r0
 800251e:	460c      	mov	r4, r1
 8002520:	b932      	cbnz	r2, 8002530 <_scanf_chars+0x1c>
 8002522:	698a      	ldr	r2, [r1, #24]
 8002524:	2a00      	cmp	r2, #0
 8002526:	bf0c      	ite	eq
 8002528:	2201      	moveq	r2, #1
 800252a:	f04f 32ff 	movne.w	r2, #4294967295
 800252e:	608a      	str	r2, [r1, #8]
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80025c4 <_scanf_chars+0xb0>
 8002536:	06d1      	lsls	r1, r2, #27
 8002538:	bf5f      	itttt	pl
 800253a:	681a      	ldrpl	r2, [r3, #0]
 800253c:	1d11      	addpl	r1, r2, #4
 800253e:	6019      	strpl	r1, [r3, #0]
 8002540:	6816      	ldrpl	r6, [r2, #0]
 8002542:	2700      	movs	r7, #0
 8002544:	69a0      	ldr	r0, [r4, #24]
 8002546:	b188      	cbz	r0, 800256c <_scanf_chars+0x58>
 8002548:	2801      	cmp	r0, #1
 800254a:	d107      	bne.n	800255c <_scanf_chars+0x48>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	6963      	ldr	r3, [r4, #20]
 8002552:	5c9b      	ldrb	r3, [r3, r2]
 8002554:	b953      	cbnz	r3, 800256c <_scanf_chars+0x58>
 8002556:	2f00      	cmp	r7, #0
 8002558:	d031      	beq.n	80025be <_scanf_chars+0xaa>
 800255a:	e022      	b.n	80025a2 <_scanf_chars+0x8e>
 800255c:	2802      	cmp	r0, #2
 800255e:	d120      	bne.n	80025a2 <_scanf_chars+0x8e>
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	d41a      	bmi.n	80025a2 <_scanf_chars+0x8e>
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	06da      	lsls	r2, r3, #27
 8002570:	bf5e      	ittt	pl
 8002572:	682b      	ldrpl	r3, [r5, #0]
 8002574:	781b      	ldrbpl	r3, [r3, #0]
 8002576:	f806 3b01 	strbpl.w	r3, [r6], #1
 800257a:	682a      	ldr	r2, [r5, #0]
 800257c:	686b      	ldr	r3, [r5, #4]
 800257e:	3201      	adds	r2, #1
 8002580:	602a      	str	r2, [r5, #0]
 8002582:	68a2      	ldr	r2, [r4, #8]
 8002584:	3b01      	subs	r3, #1
 8002586:	3a01      	subs	r2, #1
 8002588:	606b      	str	r3, [r5, #4]
 800258a:	3701      	adds	r7, #1
 800258c:	60a2      	str	r2, [r4, #8]
 800258e:	b142      	cbz	r2, 80025a2 <_scanf_chars+0x8e>
 8002590:	2b00      	cmp	r3, #0
 8002592:	dcd7      	bgt.n	8002544 <_scanf_chars+0x30>
 8002594:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002598:	4629      	mov	r1, r5
 800259a:	4640      	mov	r0, r8
 800259c:	4798      	blx	r3
 800259e:	2800      	cmp	r0, #0
 80025a0:	d0d0      	beq.n	8002544 <_scanf_chars+0x30>
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	f013 0310 	ands.w	r3, r3, #16
 80025a8:	d105      	bne.n	80025b6 <_scanf_chars+0xa2>
 80025aa:	68e2      	ldr	r2, [r4, #12]
 80025ac:	3201      	adds	r2, #1
 80025ae:	60e2      	str	r2, [r4, #12]
 80025b0:	69a2      	ldr	r2, [r4, #24]
 80025b2:	b102      	cbz	r2, 80025b6 <_scanf_chars+0xa2>
 80025b4:	7033      	strb	r3, [r6, #0]
 80025b6:	6923      	ldr	r3, [r4, #16]
 80025b8:	443b      	add	r3, r7
 80025ba:	6123      	str	r3, [r4, #16]
 80025bc:	2000      	movs	r0, #0
 80025be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025c2:	bf00      	nop
 80025c4:	08002d54 	.word	0x08002d54

080025c8 <_scanf_i>:
 80025c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025cc:	4698      	mov	r8, r3
 80025ce:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <_scanf_i+0x1e0>)
 80025d0:	460c      	mov	r4, r1
 80025d2:	4682      	mov	sl, r0
 80025d4:	4616      	mov	r6, r2
 80025d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025da:	b087      	sub	sp, #28
 80025dc:	ab03      	add	r3, sp, #12
 80025de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025e2:	4b72      	ldr	r3, [pc, #456]	; (80027ac <_scanf_i+0x1e4>)
 80025e4:	69a1      	ldr	r1, [r4, #24]
 80025e6:	4a72      	ldr	r2, [pc, #456]	; (80027b0 <_scanf_i+0x1e8>)
 80025e8:	2903      	cmp	r1, #3
 80025ea:	bf18      	it	ne
 80025ec:	461a      	movne	r2, r3
 80025ee:	68a3      	ldr	r3, [r4, #8]
 80025f0:	9201      	str	r2, [sp, #4]
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80025f8:	bf88      	it	hi
 80025fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80025fe:	4627      	mov	r7, r4
 8002600:	bf82      	ittt	hi
 8002602:	eb03 0905 	addhi.w	r9, r3, r5
 8002606:	f240 135d 	movwhi	r3, #349	; 0x15d
 800260a:	60a3      	strhi	r3, [r4, #8]
 800260c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002610:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002614:	bf98      	it	ls
 8002616:	f04f 0900 	movls.w	r9, #0
 800261a:	6023      	str	r3, [r4, #0]
 800261c:	463d      	mov	r5, r7
 800261e:	f04f 0b00 	mov.w	fp, #0
 8002622:	6831      	ldr	r1, [r6, #0]
 8002624:	ab03      	add	r3, sp, #12
 8002626:	7809      	ldrb	r1, [r1, #0]
 8002628:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800262c:	2202      	movs	r2, #2
 800262e:	f7fd fde7 	bl	8000200 <memchr>
 8002632:	b328      	cbz	r0, 8002680 <_scanf_i+0xb8>
 8002634:	f1bb 0f01 	cmp.w	fp, #1
 8002638:	d159      	bne.n	80026ee <_scanf_i+0x126>
 800263a:	6862      	ldr	r2, [r4, #4]
 800263c:	b92a      	cbnz	r2, 800264a <_scanf_i+0x82>
 800263e:	6822      	ldr	r2, [r4, #0]
 8002640:	2308      	movs	r3, #8
 8002642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002646:	6063      	str	r3, [r4, #4]
 8002648:	6022      	str	r2, [r4, #0]
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002650:	6022      	str	r2, [r4, #0]
 8002652:	68a2      	ldr	r2, [r4, #8]
 8002654:	1e51      	subs	r1, r2, #1
 8002656:	60a1      	str	r1, [r4, #8]
 8002658:	b192      	cbz	r2, 8002680 <_scanf_i+0xb8>
 800265a:	6832      	ldr	r2, [r6, #0]
 800265c:	1c51      	adds	r1, r2, #1
 800265e:	6031      	str	r1, [r6, #0]
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	f805 2b01 	strb.w	r2, [r5], #1
 8002666:	6872      	ldr	r2, [r6, #4]
 8002668:	3a01      	subs	r2, #1
 800266a:	2a00      	cmp	r2, #0
 800266c:	6072      	str	r2, [r6, #4]
 800266e:	dc07      	bgt.n	8002680 <_scanf_i+0xb8>
 8002670:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8002674:	4631      	mov	r1, r6
 8002676:	4650      	mov	r0, sl
 8002678:	4790      	blx	r2
 800267a:	2800      	cmp	r0, #0
 800267c:	f040 8085 	bne.w	800278a <_scanf_i+0x1c2>
 8002680:	f10b 0b01 	add.w	fp, fp, #1
 8002684:	f1bb 0f03 	cmp.w	fp, #3
 8002688:	d1cb      	bne.n	8002622 <_scanf_i+0x5a>
 800268a:	6863      	ldr	r3, [r4, #4]
 800268c:	b90b      	cbnz	r3, 8002692 <_scanf_i+0xca>
 800268e:	230a      	movs	r3, #10
 8002690:	6063      	str	r3, [r4, #4]
 8002692:	6863      	ldr	r3, [r4, #4]
 8002694:	4947      	ldr	r1, [pc, #284]	; (80027b4 <_scanf_i+0x1ec>)
 8002696:	6960      	ldr	r0, [r4, #20]
 8002698:	1ac9      	subs	r1, r1, r3
 800269a:	f000 f88d 	bl	80027b8 <__sccl>
 800269e:	f04f 0b00 	mov.w	fp, #0
 80026a2:	68a3      	ldr	r3, [r4, #8]
 80026a4:	6822      	ldr	r2, [r4, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03d      	beq.n	8002726 <_scanf_i+0x15e>
 80026aa:	6831      	ldr	r1, [r6, #0]
 80026ac:	6960      	ldr	r0, [r4, #20]
 80026ae:	f891 c000 	ldrb.w	ip, [r1]
 80026b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d035      	beq.n	8002726 <_scanf_i+0x15e>
 80026ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80026be:	d124      	bne.n	800270a <_scanf_i+0x142>
 80026c0:	0510      	lsls	r0, r2, #20
 80026c2:	d522      	bpl.n	800270a <_scanf_i+0x142>
 80026c4:	f10b 0b01 	add.w	fp, fp, #1
 80026c8:	f1b9 0f00 	cmp.w	r9, #0
 80026cc:	d003      	beq.n	80026d6 <_scanf_i+0x10e>
 80026ce:	3301      	adds	r3, #1
 80026d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80026d4:	60a3      	str	r3, [r4, #8]
 80026d6:	6873      	ldr	r3, [r6, #4]
 80026d8:	3b01      	subs	r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	6073      	str	r3, [r6, #4]
 80026de:	dd1b      	ble.n	8002718 <_scanf_i+0x150>
 80026e0:	6833      	ldr	r3, [r6, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	6033      	str	r3, [r6, #0]
 80026e6:	68a3      	ldr	r3, [r4, #8]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	60a3      	str	r3, [r4, #8]
 80026ec:	e7d9      	b.n	80026a2 <_scanf_i+0xda>
 80026ee:	f1bb 0f02 	cmp.w	fp, #2
 80026f2:	d1ae      	bne.n	8002652 <_scanf_i+0x8a>
 80026f4:	6822      	ldr	r2, [r4, #0]
 80026f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80026fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80026fe:	d1bf      	bne.n	8002680 <_scanf_i+0xb8>
 8002700:	2310      	movs	r3, #16
 8002702:	6063      	str	r3, [r4, #4]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	e7a2      	b.n	8002650 <_scanf_i+0x88>
 800270a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800270e:	6022      	str	r2, [r4, #0]
 8002710:	780b      	ldrb	r3, [r1, #0]
 8002712:	f805 3b01 	strb.w	r3, [r5], #1
 8002716:	e7de      	b.n	80026d6 <_scanf_i+0x10e>
 8002718:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800271c:	4631      	mov	r1, r6
 800271e:	4650      	mov	r0, sl
 8002720:	4798      	blx	r3
 8002722:	2800      	cmp	r0, #0
 8002724:	d0df      	beq.n	80026e6 <_scanf_i+0x11e>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	05db      	lsls	r3, r3, #23
 800272a:	d50d      	bpl.n	8002748 <_scanf_i+0x180>
 800272c:	42bd      	cmp	r5, r7
 800272e:	d909      	bls.n	8002744 <_scanf_i+0x17c>
 8002730:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002734:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002738:	4632      	mov	r2, r6
 800273a:	4650      	mov	r0, sl
 800273c:	4798      	blx	r3
 800273e:	f105 39ff 	add.w	r9, r5, #4294967295
 8002742:	464d      	mov	r5, r9
 8002744:	42bd      	cmp	r5, r7
 8002746:	d02d      	beq.n	80027a4 <_scanf_i+0x1dc>
 8002748:	6822      	ldr	r2, [r4, #0]
 800274a:	f012 0210 	ands.w	r2, r2, #16
 800274e:	d113      	bne.n	8002778 <_scanf_i+0x1b0>
 8002750:	702a      	strb	r2, [r5, #0]
 8002752:	6863      	ldr	r3, [r4, #4]
 8002754:	9e01      	ldr	r6, [sp, #4]
 8002756:	4639      	mov	r1, r7
 8002758:	4650      	mov	r0, sl
 800275a:	47b0      	blx	r6
 800275c:	6821      	ldr	r1, [r4, #0]
 800275e:	f8d8 3000 	ldr.w	r3, [r8]
 8002762:	f011 0f20 	tst.w	r1, #32
 8002766:	d013      	beq.n	8002790 <_scanf_i+0x1c8>
 8002768:	1d1a      	adds	r2, r3, #4
 800276a:	f8c8 2000 	str.w	r2, [r8]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6018      	str	r0, [r3, #0]
 8002772:	68e3      	ldr	r3, [r4, #12]
 8002774:	3301      	adds	r3, #1
 8002776:	60e3      	str	r3, [r4, #12]
 8002778:	1bed      	subs	r5, r5, r7
 800277a:	44ab      	add	fp, r5
 800277c:	6925      	ldr	r5, [r4, #16]
 800277e:	445d      	add	r5, fp
 8002780:	6125      	str	r5, [r4, #16]
 8002782:	2000      	movs	r0, #0
 8002784:	b007      	add	sp, #28
 8002786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800278a:	f04f 0b00 	mov.w	fp, #0
 800278e:	e7ca      	b.n	8002726 <_scanf_i+0x15e>
 8002790:	1d1a      	adds	r2, r3, #4
 8002792:	f8c8 2000 	str.w	r2, [r8]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f011 0f01 	tst.w	r1, #1
 800279c:	bf14      	ite	ne
 800279e:	8018      	strhne	r0, [r3, #0]
 80027a0:	6018      	streq	r0, [r3, #0]
 80027a2:	e7e6      	b.n	8002772 <_scanf_i+0x1aa>
 80027a4:	2001      	movs	r0, #1
 80027a6:	e7ed      	b.n	8002784 <_scanf_i+0x1bc>
 80027a8:	08002d28 	.word	0x08002d28
 80027ac:	08002a09 	.word	0x08002a09
 80027b0:	08002921 	.word	0x08002921
 80027b4:	08002d51 	.word	0x08002d51

080027b8 <__sccl>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	780b      	ldrb	r3, [r1, #0]
 80027bc:	4604      	mov	r4, r0
 80027be:	2b5e      	cmp	r3, #94	; 0x5e
 80027c0:	bf0b      	itete	eq
 80027c2:	784b      	ldrbeq	r3, [r1, #1]
 80027c4:	1c48      	addne	r0, r1, #1
 80027c6:	1c88      	addeq	r0, r1, #2
 80027c8:	2200      	movne	r2, #0
 80027ca:	bf08      	it	eq
 80027cc:	2201      	moveq	r2, #1
 80027ce:	1e61      	subs	r1, r4, #1
 80027d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80027d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80027d8:	42a9      	cmp	r1, r5
 80027da:	d1fb      	bne.n	80027d4 <__sccl+0x1c>
 80027dc:	b90b      	cbnz	r3, 80027e2 <__sccl+0x2a>
 80027de:	3801      	subs	r0, #1
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	f082 0201 	eor.w	r2, r2, #1
 80027e6:	54e2      	strb	r2, [r4, r3]
 80027e8:	4605      	mov	r5, r0
 80027ea:	4628      	mov	r0, r5
 80027ec:	f810 1b01 	ldrb.w	r1, [r0], #1
 80027f0:	292d      	cmp	r1, #45	; 0x2d
 80027f2:	d006      	beq.n	8002802 <__sccl+0x4a>
 80027f4:	295d      	cmp	r1, #93	; 0x5d
 80027f6:	d0f3      	beq.n	80027e0 <__sccl+0x28>
 80027f8:	b909      	cbnz	r1, 80027fe <__sccl+0x46>
 80027fa:	4628      	mov	r0, r5
 80027fc:	e7f0      	b.n	80027e0 <__sccl+0x28>
 80027fe:	460b      	mov	r3, r1
 8002800:	e7f1      	b.n	80027e6 <__sccl+0x2e>
 8002802:	786e      	ldrb	r6, [r5, #1]
 8002804:	2e5d      	cmp	r6, #93	; 0x5d
 8002806:	d0fa      	beq.n	80027fe <__sccl+0x46>
 8002808:	42b3      	cmp	r3, r6
 800280a:	dcf8      	bgt.n	80027fe <__sccl+0x46>
 800280c:	3502      	adds	r5, #2
 800280e:	4619      	mov	r1, r3
 8002810:	3101      	adds	r1, #1
 8002812:	428e      	cmp	r6, r1
 8002814:	5462      	strb	r2, [r4, r1]
 8002816:	dcfb      	bgt.n	8002810 <__sccl+0x58>
 8002818:	1af1      	subs	r1, r6, r3
 800281a:	3901      	subs	r1, #1
 800281c:	1c58      	adds	r0, r3, #1
 800281e:	42b3      	cmp	r3, r6
 8002820:	bfa8      	it	ge
 8002822:	2100      	movge	r1, #0
 8002824:	1843      	adds	r3, r0, r1
 8002826:	e7e0      	b.n	80027ea <__sccl+0x32>

08002828 <_strtol_l.constprop.0>:
 8002828:	2b01      	cmp	r3, #1
 800282a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800282e:	4680      	mov	r8, r0
 8002830:	d001      	beq.n	8002836 <_strtol_l.constprop.0+0xe>
 8002832:	2b24      	cmp	r3, #36	; 0x24
 8002834:	d906      	bls.n	8002844 <_strtol_l.constprop.0+0x1c>
 8002836:	f7ff fc45 	bl	80020c4 <__errno>
 800283a:	2316      	movs	r3, #22
 800283c:	6003      	str	r3, [r0, #0]
 800283e:	2000      	movs	r0, #0
 8002840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002844:	4f35      	ldr	r7, [pc, #212]	; (800291c <_strtol_l.constprop.0+0xf4>)
 8002846:	460d      	mov	r5, r1
 8002848:	4628      	mov	r0, r5
 800284a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800284e:	5de6      	ldrb	r6, [r4, r7]
 8002850:	f016 0608 	ands.w	r6, r6, #8
 8002854:	d1f8      	bne.n	8002848 <_strtol_l.constprop.0+0x20>
 8002856:	2c2d      	cmp	r4, #45	; 0x2d
 8002858:	d12f      	bne.n	80028ba <_strtol_l.constprop.0+0x92>
 800285a:	782c      	ldrb	r4, [r5, #0]
 800285c:	2601      	movs	r6, #1
 800285e:	1c85      	adds	r5, r0, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d057      	beq.n	8002914 <_strtol_l.constprop.0+0xec>
 8002864:	2b10      	cmp	r3, #16
 8002866:	d109      	bne.n	800287c <_strtol_l.constprop.0+0x54>
 8002868:	2c30      	cmp	r4, #48	; 0x30
 800286a:	d107      	bne.n	800287c <_strtol_l.constprop.0+0x54>
 800286c:	7828      	ldrb	r0, [r5, #0]
 800286e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002872:	2858      	cmp	r0, #88	; 0x58
 8002874:	d149      	bne.n	800290a <_strtol_l.constprop.0+0xe2>
 8002876:	786c      	ldrb	r4, [r5, #1]
 8002878:	2310      	movs	r3, #16
 800287a:	3502      	adds	r5, #2
 800287c:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8002880:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002884:	2700      	movs	r7, #0
 8002886:	fbbe f9f3 	udiv	r9, lr, r3
 800288a:	4638      	mov	r0, r7
 800288c:	fb03 ea19 	mls	sl, r3, r9, lr
 8002890:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002894:	f1bc 0f09 	cmp.w	ip, #9
 8002898:	d814      	bhi.n	80028c4 <_strtol_l.constprop.0+0x9c>
 800289a:	4664      	mov	r4, ip
 800289c:	42a3      	cmp	r3, r4
 800289e:	dd22      	ble.n	80028e6 <_strtol_l.constprop.0+0xbe>
 80028a0:	2f00      	cmp	r7, #0
 80028a2:	db1d      	blt.n	80028e0 <_strtol_l.constprop.0+0xb8>
 80028a4:	4581      	cmp	r9, r0
 80028a6:	d31b      	bcc.n	80028e0 <_strtol_l.constprop.0+0xb8>
 80028a8:	d101      	bne.n	80028ae <_strtol_l.constprop.0+0x86>
 80028aa:	45a2      	cmp	sl, r4
 80028ac:	db18      	blt.n	80028e0 <_strtol_l.constprop.0+0xb8>
 80028ae:	fb00 4003 	mla	r0, r0, r3, r4
 80028b2:	2701      	movs	r7, #1
 80028b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80028b8:	e7ea      	b.n	8002890 <_strtol_l.constprop.0+0x68>
 80028ba:	2c2b      	cmp	r4, #43	; 0x2b
 80028bc:	bf04      	itt	eq
 80028be:	782c      	ldrbeq	r4, [r5, #0]
 80028c0:	1c85      	addeq	r5, r0, #2
 80028c2:	e7cd      	b.n	8002860 <_strtol_l.constprop.0+0x38>
 80028c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80028c8:	f1bc 0f19 	cmp.w	ip, #25
 80028cc:	d801      	bhi.n	80028d2 <_strtol_l.constprop.0+0xaa>
 80028ce:	3c37      	subs	r4, #55	; 0x37
 80028d0:	e7e4      	b.n	800289c <_strtol_l.constprop.0+0x74>
 80028d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80028d6:	f1bc 0f19 	cmp.w	ip, #25
 80028da:	d804      	bhi.n	80028e6 <_strtol_l.constprop.0+0xbe>
 80028dc:	3c57      	subs	r4, #87	; 0x57
 80028de:	e7dd      	b.n	800289c <_strtol_l.constprop.0+0x74>
 80028e0:	f04f 37ff 	mov.w	r7, #4294967295
 80028e4:	e7e6      	b.n	80028b4 <_strtol_l.constprop.0+0x8c>
 80028e6:	2f00      	cmp	r7, #0
 80028e8:	da07      	bge.n	80028fa <_strtol_l.constprop.0+0xd2>
 80028ea:	2322      	movs	r3, #34	; 0x22
 80028ec:	f8c8 3000 	str.w	r3, [r8]
 80028f0:	4670      	mov	r0, lr
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	d0a4      	beq.n	8002840 <_strtol_l.constprop.0+0x18>
 80028f6:	1e69      	subs	r1, r5, #1
 80028f8:	e005      	b.n	8002906 <_strtol_l.constprop.0+0xde>
 80028fa:	b106      	cbz	r6, 80028fe <_strtol_l.constprop.0+0xd6>
 80028fc:	4240      	negs	r0, r0
 80028fe:	2a00      	cmp	r2, #0
 8002900:	d09e      	beq.n	8002840 <_strtol_l.constprop.0+0x18>
 8002902:	2f00      	cmp	r7, #0
 8002904:	d1f7      	bne.n	80028f6 <_strtol_l.constprop.0+0xce>
 8002906:	6011      	str	r1, [r2, #0]
 8002908:	e79a      	b.n	8002840 <_strtol_l.constprop.0+0x18>
 800290a:	2430      	movs	r4, #48	; 0x30
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1b5      	bne.n	800287c <_strtol_l.constprop.0+0x54>
 8002910:	2308      	movs	r3, #8
 8002912:	e7b3      	b.n	800287c <_strtol_l.constprop.0+0x54>
 8002914:	2c30      	cmp	r4, #48	; 0x30
 8002916:	d0a9      	beq.n	800286c <_strtol_l.constprop.0+0x44>
 8002918:	230a      	movs	r3, #10
 800291a:	e7af      	b.n	800287c <_strtol_l.constprop.0+0x54>
 800291c:	08002d54 	.word	0x08002d54

08002920 <_strtol_r>:
 8002920:	f7ff bf82 	b.w	8002828 <_strtol_l.constprop.0>

08002924 <_strtoul_l.constprop.0>:
 8002924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002928:	4f36      	ldr	r7, [pc, #216]	; (8002a04 <_strtoul_l.constprop.0+0xe0>)
 800292a:	4686      	mov	lr, r0
 800292c:	460d      	mov	r5, r1
 800292e:	4628      	mov	r0, r5
 8002930:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002934:	5de6      	ldrb	r6, [r4, r7]
 8002936:	f016 0608 	ands.w	r6, r6, #8
 800293a:	d1f8      	bne.n	800292e <_strtoul_l.constprop.0+0xa>
 800293c:	2c2d      	cmp	r4, #45	; 0x2d
 800293e:	d12f      	bne.n	80029a0 <_strtoul_l.constprop.0+0x7c>
 8002940:	782c      	ldrb	r4, [r5, #0]
 8002942:	2601      	movs	r6, #1
 8002944:	1c85      	adds	r5, r0, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d057      	beq.n	80029fa <_strtoul_l.constprop.0+0xd6>
 800294a:	2b10      	cmp	r3, #16
 800294c:	d109      	bne.n	8002962 <_strtoul_l.constprop.0+0x3e>
 800294e:	2c30      	cmp	r4, #48	; 0x30
 8002950:	d107      	bne.n	8002962 <_strtoul_l.constprop.0+0x3e>
 8002952:	7828      	ldrb	r0, [r5, #0]
 8002954:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002958:	2858      	cmp	r0, #88	; 0x58
 800295a:	d149      	bne.n	80029f0 <_strtoul_l.constprop.0+0xcc>
 800295c:	786c      	ldrb	r4, [r5, #1]
 800295e:	2310      	movs	r3, #16
 8002960:	3502      	adds	r5, #2
 8002962:	f04f 38ff 	mov.w	r8, #4294967295
 8002966:	2700      	movs	r7, #0
 8002968:	fbb8 f8f3 	udiv	r8, r8, r3
 800296c:	fb03 f908 	mul.w	r9, r3, r8
 8002970:	ea6f 0909 	mvn.w	r9, r9
 8002974:	4638      	mov	r0, r7
 8002976:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800297a:	f1bc 0f09 	cmp.w	ip, #9
 800297e:	d814      	bhi.n	80029aa <_strtoul_l.constprop.0+0x86>
 8002980:	4664      	mov	r4, ip
 8002982:	42a3      	cmp	r3, r4
 8002984:	dd22      	ble.n	80029cc <_strtoul_l.constprop.0+0xa8>
 8002986:	2f00      	cmp	r7, #0
 8002988:	db1d      	blt.n	80029c6 <_strtoul_l.constprop.0+0xa2>
 800298a:	4580      	cmp	r8, r0
 800298c:	d31b      	bcc.n	80029c6 <_strtoul_l.constprop.0+0xa2>
 800298e:	d101      	bne.n	8002994 <_strtoul_l.constprop.0+0x70>
 8002990:	45a1      	cmp	r9, r4
 8002992:	db18      	blt.n	80029c6 <_strtoul_l.constprop.0+0xa2>
 8002994:	fb00 4003 	mla	r0, r0, r3, r4
 8002998:	2701      	movs	r7, #1
 800299a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800299e:	e7ea      	b.n	8002976 <_strtoul_l.constprop.0+0x52>
 80029a0:	2c2b      	cmp	r4, #43	; 0x2b
 80029a2:	bf04      	itt	eq
 80029a4:	782c      	ldrbeq	r4, [r5, #0]
 80029a6:	1c85      	addeq	r5, r0, #2
 80029a8:	e7cd      	b.n	8002946 <_strtoul_l.constprop.0+0x22>
 80029aa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80029ae:	f1bc 0f19 	cmp.w	ip, #25
 80029b2:	d801      	bhi.n	80029b8 <_strtoul_l.constprop.0+0x94>
 80029b4:	3c37      	subs	r4, #55	; 0x37
 80029b6:	e7e4      	b.n	8002982 <_strtoul_l.constprop.0+0x5e>
 80029b8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80029bc:	f1bc 0f19 	cmp.w	ip, #25
 80029c0:	d804      	bhi.n	80029cc <_strtoul_l.constprop.0+0xa8>
 80029c2:	3c57      	subs	r4, #87	; 0x57
 80029c4:	e7dd      	b.n	8002982 <_strtoul_l.constprop.0+0x5e>
 80029c6:	f04f 37ff 	mov.w	r7, #4294967295
 80029ca:	e7e6      	b.n	800299a <_strtoul_l.constprop.0+0x76>
 80029cc:	2f00      	cmp	r7, #0
 80029ce:	da07      	bge.n	80029e0 <_strtoul_l.constprop.0+0xbc>
 80029d0:	2322      	movs	r3, #34	; 0x22
 80029d2:	f8ce 3000 	str.w	r3, [lr]
 80029d6:	f04f 30ff 	mov.w	r0, #4294967295
 80029da:	b932      	cbnz	r2, 80029ea <_strtoul_l.constprop.0+0xc6>
 80029dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029e0:	b106      	cbz	r6, 80029e4 <_strtoul_l.constprop.0+0xc0>
 80029e2:	4240      	negs	r0, r0
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	d0f9      	beq.n	80029dc <_strtoul_l.constprop.0+0xb8>
 80029e8:	b107      	cbz	r7, 80029ec <_strtoul_l.constprop.0+0xc8>
 80029ea:	1e69      	subs	r1, r5, #1
 80029ec:	6011      	str	r1, [r2, #0]
 80029ee:	e7f5      	b.n	80029dc <_strtoul_l.constprop.0+0xb8>
 80029f0:	2430      	movs	r4, #48	; 0x30
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1b5      	bne.n	8002962 <_strtoul_l.constprop.0+0x3e>
 80029f6:	2308      	movs	r3, #8
 80029f8:	e7b3      	b.n	8002962 <_strtoul_l.constprop.0+0x3e>
 80029fa:	2c30      	cmp	r4, #48	; 0x30
 80029fc:	d0a9      	beq.n	8002952 <_strtoul_l.constprop.0+0x2e>
 80029fe:	230a      	movs	r3, #10
 8002a00:	e7af      	b.n	8002962 <_strtoul_l.constprop.0+0x3e>
 8002a02:	bf00      	nop
 8002a04:	08002d54 	.word	0x08002d54

08002a08 <_strtoul_r>:
 8002a08:	f7ff bf8c 	b.w	8002924 <_strtoul_l.constprop.0>

08002a0c <__submore>:
 8002a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a10:	460c      	mov	r4, r1
 8002a12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a18:	4299      	cmp	r1, r3
 8002a1a:	d11d      	bne.n	8002a58 <__submore+0x4c>
 8002a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a20:	f000 f8a8 	bl	8002b74 <_malloc_r>
 8002a24:	b918      	cbnz	r0, 8002a2e <__submore+0x22>
 8002a26:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a32:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002a38:	6360      	str	r0, [r4, #52]	; 0x34
 8002a3a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002a3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002a42:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8002a46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a4a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8002a4e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002a52:	6020      	str	r0, [r4, #0]
 8002a54:	2000      	movs	r0, #0
 8002a56:	e7e8      	b.n	8002a2a <__submore+0x1e>
 8002a58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002a5a:	0077      	lsls	r7, r6, #1
 8002a5c:	463a      	mov	r2, r7
 8002a5e:	f000 f8fd 	bl	8002c5c <_realloc_r>
 8002a62:	4605      	mov	r5, r0
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d0de      	beq.n	8002a26 <__submore+0x1a>
 8002a68:	eb00 0806 	add.w	r8, r0, r6
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	4632      	mov	r2, r6
 8002a70:	4640      	mov	r0, r8
 8002a72:	f000 f807 	bl	8002a84 <memcpy>
 8002a76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8002a7a:	f8c4 8000 	str.w	r8, [r4]
 8002a7e:	e7e9      	b.n	8002a54 <__submore+0x48>

08002a80 <__retarget_lock_acquire_recursive>:
 8002a80:	4770      	bx	lr

08002a82 <__retarget_lock_release_recursive>:
 8002a82:	4770      	bx	lr

08002a84 <memcpy>:
 8002a84:	440a      	add	r2, r1
 8002a86:	4291      	cmp	r1, r2
 8002a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a8c:	d100      	bne.n	8002a90 <memcpy+0xc>
 8002a8e:	4770      	bx	lr
 8002a90:	b510      	push	{r4, lr}
 8002a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a9a:	4291      	cmp	r1, r2
 8002a9c:	d1f9      	bne.n	8002a92 <memcpy+0xe>
 8002a9e:	bd10      	pop	{r4, pc}

08002aa0 <_free_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	4605      	mov	r5, r0
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d041      	beq.n	8002b2c <_free_r+0x8c>
 8002aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aac:	1f0c      	subs	r4, r1, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bfb8      	it	lt
 8002ab2:	18e4      	addlt	r4, r4, r3
 8002ab4:	f000 f912 	bl	8002cdc <__malloc_lock>
 8002ab8:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <_free_r+0x90>)
 8002aba:	6813      	ldr	r3, [r2, #0]
 8002abc:	b933      	cbnz	r3, 8002acc <_free_r+0x2c>
 8002abe:	6063      	str	r3, [r4, #4]
 8002ac0:	6014      	str	r4, [r2, #0]
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ac8:	f000 b90e 	b.w	8002ce8 <__malloc_unlock>
 8002acc:	42a3      	cmp	r3, r4
 8002ace:	d908      	bls.n	8002ae2 <_free_r+0x42>
 8002ad0:	6820      	ldr	r0, [r4, #0]
 8002ad2:	1821      	adds	r1, r4, r0
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	bf01      	itttt	eq
 8002ad8:	6819      	ldreq	r1, [r3, #0]
 8002ada:	685b      	ldreq	r3, [r3, #4]
 8002adc:	1809      	addeq	r1, r1, r0
 8002ade:	6021      	streq	r1, [r4, #0]
 8002ae0:	e7ed      	b.n	8002abe <_free_r+0x1e>
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	b10b      	cbz	r3, 8002aec <_free_r+0x4c>
 8002ae8:	42a3      	cmp	r3, r4
 8002aea:	d9fa      	bls.n	8002ae2 <_free_r+0x42>
 8002aec:	6811      	ldr	r1, [r2, #0]
 8002aee:	1850      	adds	r0, r2, r1
 8002af0:	42a0      	cmp	r0, r4
 8002af2:	d10b      	bne.n	8002b0c <_free_r+0x6c>
 8002af4:	6820      	ldr	r0, [r4, #0]
 8002af6:	4401      	add	r1, r0
 8002af8:	1850      	adds	r0, r2, r1
 8002afa:	4283      	cmp	r3, r0
 8002afc:	6011      	str	r1, [r2, #0]
 8002afe:	d1e0      	bne.n	8002ac2 <_free_r+0x22>
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	6053      	str	r3, [r2, #4]
 8002b06:	4401      	add	r1, r0
 8002b08:	6011      	str	r1, [r2, #0]
 8002b0a:	e7da      	b.n	8002ac2 <_free_r+0x22>
 8002b0c:	d902      	bls.n	8002b14 <_free_r+0x74>
 8002b0e:	230c      	movs	r3, #12
 8002b10:	602b      	str	r3, [r5, #0]
 8002b12:	e7d6      	b.n	8002ac2 <_free_r+0x22>
 8002b14:	6820      	ldr	r0, [r4, #0]
 8002b16:	1821      	adds	r1, r4, r0
 8002b18:	428b      	cmp	r3, r1
 8002b1a:	bf04      	itt	eq
 8002b1c:	6819      	ldreq	r1, [r3, #0]
 8002b1e:	685b      	ldreq	r3, [r3, #4]
 8002b20:	6063      	str	r3, [r4, #4]
 8002b22:	bf04      	itt	eq
 8002b24:	1809      	addeq	r1, r1, r0
 8002b26:	6021      	streq	r1, [r4, #0]
 8002b28:	6054      	str	r4, [r2, #4]
 8002b2a:	e7ca      	b.n	8002ac2 <_free_r+0x22>
 8002b2c:	bd38      	pop	{r3, r4, r5, pc}
 8002b2e:	bf00      	nop
 8002b30:	200000e4 	.word	0x200000e4

08002b34 <sbrk_aligned>:
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	4e0e      	ldr	r6, [pc, #56]	; (8002b70 <sbrk_aligned+0x3c>)
 8002b38:	460c      	mov	r4, r1
 8002b3a:	6831      	ldr	r1, [r6, #0]
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	b911      	cbnz	r1, 8002b46 <sbrk_aligned+0x12>
 8002b40:	f000 f8bc 	bl	8002cbc <_sbrk_r>
 8002b44:	6030      	str	r0, [r6, #0]
 8002b46:	4621      	mov	r1, r4
 8002b48:	4628      	mov	r0, r5
 8002b4a:	f000 f8b7 	bl	8002cbc <_sbrk_r>
 8002b4e:	1c43      	adds	r3, r0, #1
 8002b50:	d00a      	beq.n	8002b68 <sbrk_aligned+0x34>
 8002b52:	1cc4      	adds	r4, r0, #3
 8002b54:	f024 0403 	bic.w	r4, r4, #3
 8002b58:	42a0      	cmp	r0, r4
 8002b5a:	d007      	beq.n	8002b6c <sbrk_aligned+0x38>
 8002b5c:	1a21      	subs	r1, r4, r0
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f000 f8ac 	bl	8002cbc <_sbrk_r>
 8002b64:	3001      	adds	r0, #1
 8002b66:	d101      	bne.n	8002b6c <sbrk_aligned+0x38>
 8002b68:	f04f 34ff 	mov.w	r4, #4294967295
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	200000e8 	.word	0x200000e8

08002b74 <_malloc_r>:
 8002b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b78:	1ccd      	adds	r5, r1, #3
 8002b7a:	f025 0503 	bic.w	r5, r5, #3
 8002b7e:	3508      	adds	r5, #8
 8002b80:	2d0c      	cmp	r5, #12
 8002b82:	bf38      	it	cc
 8002b84:	250c      	movcc	r5, #12
 8002b86:	2d00      	cmp	r5, #0
 8002b88:	4607      	mov	r7, r0
 8002b8a:	db01      	blt.n	8002b90 <_malloc_r+0x1c>
 8002b8c:	42a9      	cmp	r1, r5
 8002b8e:	d905      	bls.n	8002b9c <_malloc_r+0x28>
 8002b90:	230c      	movs	r3, #12
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	2600      	movs	r6, #0
 8002b96:	4630      	mov	r0, r6
 8002b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b9c:	4e2e      	ldr	r6, [pc, #184]	; (8002c58 <_malloc_r+0xe4>)
 8002b9e:	f000 f89d 	bl	8002cdc <__malloc_lock>
 8002ba2:	6833      	ldr	r3, [r6, #0]
 8002ba4:	461c      	mov	r4, r3
 8002ba6:	bb34      	cbnz	r4, 8002bf6 <_malloc_r+0x82>
 8002ba8:	4629      	mov	r1, r5
 8002baa:	4638      	mov	r0, r7
 8002bac:	f7ff ffc2 	bl	8002b34 <sbrk_aligned>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	d14d      	bne.n	8002c52 <_malloc_r+0xde>
 8002bb6:	6834      	ldr	r4, [r6, #0]
 8002bb8:	4626      	mov	r6, r4
 8002bba:	2e00      	cmp	r6, #0
 8002bbc:	d140      	bne.n	8002c40 <_malloc_r+0xcc>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	4631      	mov	r1, r6
 8002bc2:	4638      	mov	r0, r7
 8002bc4:	eb04 0803 	add.w	r8, r4, r3
 8002bc8:	f000 f878 	bl	8002cbc <_sbrk_r>
 8002bcc:	4580      	cmp	r8, r0
 8002bce:	d13a      	bne.n	8002c46 <_malloc_r+0xd2>
 8002bd0:	6821      	ldr	r1, [r4, #0]
 8002bd2:	3503      	adds	r5, #3
 8002bd4:	1a6d      	subs	r5, r5, r1
 8002bd6:	f025 0503 	bic.w	r5, r5, #3
 8002bda:	3508      	adds	r5, #8
 8002bdc:	2d0c      	cmp	r5, #12
 8002bde:	bf38      	it	cc
 8002be0:	250c      	movcc	r5, #12
 8002be2:	4629      	mov	r1, r5
 8002be4:	4638      	mov	r0, r7
 8002be6:	f7ff ffa5 	bl	8002b34 <sbrk_aligned>
 8002bea:	3001      	adds	r0, #1
 8002bec:	d02b      	beq.n	8002c46 <_malloc_r+0xd2>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	442b      	add	r3, r5
 8002bf2:	6023      	str	r3, [r4, #0]
 8002bf4:	e00e      	b.n	8002c14 <_malloc_r+0xa0>
 8002bf6:	6822      	ldr	r2, [r4, #0]
 8002bf8:	1b52      	subs	r2, r2, r5
 8002bfa:	d41e      	bmi.n	8002c3a <_malloc_r+0xc6>
 8002bfc:	2a0b      	cmp	r2, #11
 8002bfe:	d916      	bls.n	8002c2e <_malloc_r+0xba>
 8002c00:	1961      	adds	r1, r4, r5
 8002c02:	42a3      	cmp	r3, r4
 8002c04:	6025      	str	r5, [r4, #0]
 8002c06:	bf18      	it	ne
 8002c08:	6059      	strne	r1, [r3, #4]
 8002c0a:	6863      	ldr	r3, [r4, #4]
 8002c0c:	bf08      	it	eq
 8002c0e:	6031      	streq	r1, [r6, #0]
 8002c10:	5162      	str	r2, [r4, r5]
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	4638      	mov	r0, r7
 8002c16:	f104 060b 	add.w	r6, r4, #11
 8002c1a:	f000 f865 	bl	8002ce8 <__malloc_unlock>
 8002c1e:	f026 0607 	bic.w	r6, r6, #7
 8002c22:	1d23      	adds	r3, r4, #4
 8002c24:	1af2      	subs	r2, r6, r3
 8002c26:	d0b6      	beq.n	8002b96 <_malloc_r+0x22>
 8002c28:	1b9b      	subs	r3, r3, r6
 8002c2a:	50a3      	str	r3, [r4, r2]
 8002c2c:	e7b3      	b.n	8002b96 <_malloc_r+0x22>
 8002c2e:	6862      	ldr	r2, [r4, #4]
 8002c30:	42a3      	cmp	r3, r4
 8002c32:	bf0c      	ite	eq
 8002c34:	6032      	streq	r2, [r6, #0]
 8002c36:	605a      	strne	r2, [r3, #4]
 8002c38:	e7ec      	b.n	8002c14 <_malloc_r+0xa0>
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	6864      	ldr	r4, [r4, #4]
 8002c3e:	e7b2      	b.n	8002ba6 <_malloc_r+0x32>
 8002c40:	4634      	mov	r4, r6
 8002c42:	6876      	ldr	r6, [r6, #4]
 8002c44:	e7b9      	b.n	8002bba <_malloc_r+0x46>
 8002c46:	230c      	movs	r3, #12
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	f000 f84c 	bl	8002ce8 <__malloc_unlock>
 8002c50:	e7a1      	b.n	8002b96 <_malloc_r+0x22>
 8002c52:	6025      	str	r5, [r4, #0]
 8002c54:	e7de      	b.n	8002c14 <_malloc_r+0xa0>
 8002c56:	bf00      	nop
 8002c58:	200000e4 	.word	0x200000e4

08002c5c <_realloc_r>:
 8002c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c60:	4680      	mov	r8, r0
 8002c62:	4614      	mov	r4, r2
 8002c64:	460e      	mov	r6, r1
 8002c66:	b921      	cbnz	r1, 8002c72 <_realloc_r+0x16>
 8002c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	f7ff bf81 	b.w	8002b74 <_malloc_r>
 8002c72:	b92a      	cbnz	r2, 8002c80 <_realloc_r+0x24>
 8002c74:	f7ff ff14 	bl	8002aa0 <_free_r>
 8002c78:	4625      	mov	r5, r4
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c80:	f000 f838 	bl	8002cf4 <_malloc_usable_size_r>
 8002c84:	4284      	cmp	r4, r0
 8002c86:	4607      	mov	r7, r0
 8002c88:	d802      	bhi.n	8002c90 <_realloc_r+0x34>
 8002c8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002c8e:	d812      	bhi.n	8002cb6 <_realloc_r+0x5a>
 8002c90:	4621      	mov	r1, r4
 8002c92:	4640      	mov	r0, r8
 8002c94:	f7ff ff6e 	bl	8002b74 <_malloc_r>
 8002c98:	4605      	mov	r5, r0
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d0ed      	beq.n	8002c7a <_realloc_r+0x1e>
 8002c9e:	42bc      	cmp	r4, r7
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	bf28      	it	cs
 8002ca6:	463a      	movcs	r2, r7
 8002ca8:	f7ff feec 	bl	8002a84 <memcpy>
 8002cac:	4631      	mov	r1, r6
 8002cae:	4640      	mov	r0, r8
 8002cb0:	f7ff fef6 	bl	8002aa0 <_free_r>
 8002cb4:	e7e1      	b.n	8002c7a <_realloc_r+0x1e>
 8002cb6:	4635      	mov	r5, r6
 8002cb8:	e7df      	b.n	8002c7a <_realloc_r+0x1e>
	...

08002cbc <_sbrk_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4d06      	ldr	r5, [pc, #24]	; (8002cd8 <_sbrk_r+0x1c>)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	f7ff f89c 	bl	8001e04 <_sbrk>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_sbrk_r+0x1a>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_sbrk_r+0x1a>
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	200000dc 	.word	0x200000dc

08002cdc <__malloc_lock>:
 8002cdc:	4801      	ldr	r0, [pc, #4]	; (8002ce4 <__malloc_lock+0x8>)
 8002cde:	f7ff becf 	b.w	8002a80 <__retarget_lock_acquire_recursive>
 8002ce2:	bf00      	nop
 8002ce4:	200000e0 	.word	0x200000e0

08002ce8 <__malloc_unlock>:
 8002ce8:	4801      	ldr	r0, [pc, #4]	; (8002cf0 <__malloc_unlock+0x8>)
 8002cea:	f7ff beca 	b.w	8002a82 <__retarget_lock_release_recursive>
 8002cee:	bf00      	nop
 8002cf0:	200000e0 	.word	0x200000e0

08002cf4 <_malloc_usable_size_r>:
 8002cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cf8:	1f18      	subs	r0, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bfbc      	itt	lt
 8002cfe:	580b      	ldrlt	r3, [r1, r0]
 8002d00:	18c0      	addlt	r0, r0, r3
 8002d02:	4770      	bx	lr

08002d04 <_init>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr

08002d10 <_fini>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr
