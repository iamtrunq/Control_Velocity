
12_PWM_Single.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08001cbc  08001cbc  00011cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e88  08001e88  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001e88  08001e88  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e88  08001e88  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e88  08001e88  00011e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000009c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000285e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000822  00000000  00000000  000228f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00023118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000108  00000000  00000000  00023298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000017e9  00000000  00000000  000233a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026a2  00000000  00000000  00024b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c67b  00000000  00000000  0002722b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b38a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c00  00000000  00000000  000b38f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001ca4 	.word	0x08001ca4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001ca4 	.word	0x08001ca4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_Toggle_Init>:
#include <stm32f407xx.h>

void GPIO_Toggle_Init(){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);   //ENABLE clock for port D
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <GPIO_Toggle_Init+0x34>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <GPIO_Toggle_Init+0x34>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (0x55<<24);  // Output for D12 ,D13, D14, D15
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <GPIO_Toggle_Init+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <GPIO_Toggle_Init+0x38>)
 80002b6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &=~ (0xF<<12);
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <GPIO_Toggle_Init+0x38>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <GPIO_Toggle_Init+0x38>)
 80002c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002c6:	6153      	str	r3, [r2, #20]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020c00 	.word	0x40020c00

080002dc <Toggle>:

void Toggle(){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	GPIOD->ODR ^= (1<<14);
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <Toggle+0x40>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <Toggle+0x40>)
 80002e6:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80002ea:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<15);
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <Toggle+0x40>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a0a      	ldr	r2, [pc, #40]	; (800031c <Toggle+0x40>)
 80002f2:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80002f6:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<12);
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <Toggle+0x40>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a07      	ldr	r2, [pc, #28]	; (800031c <Toggle+0x40>)
 80002fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000302:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= (1<<13);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <Toggle+0x40>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <Toggle+0x40>)
 800030a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800030e:	6153      	str	r3, [r2, #20]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40020c00 	.word	0x40020c00

08000320 <PWM_Init>:
 * PC 8
 * PC 9
 *
 *
 * */
void PWM_Init(void){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	/*Enable clock for port C*/
	RCC->AHB1ENR |= (1U<<2);
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <PWM_Init+0x7c>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <PWM_Init+0x7c>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Alternate Mode*/
	GPIOC->MODER |=(0x2<<12);
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <PWM_Init+0x80>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a1a      	ldr	r2, [pc, #104]	; (80003a0 <PWM_Init+0x80>)
 8000336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=(0x2<<14);
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <PWM_Init+0x80>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a17      	ldr	r2, [pc, #92]	; (80003a0 <PWM_Init+0x80>)
 8000342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000346:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=(0x2<<16);
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <PWM_Init+0x80>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <PWM_Init+0x80>)
 800034e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000352:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=(0x2<<18);
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <PWM_Init+0x80>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <PWM_Init+0x80>)
 800035a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800035e:	6013      	str	r3, [r2, #0]

	/*Alternate Function*/
	GPIOC->AFR[0] |= (0x2<<24);
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <PWM_Init+0x80>)
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <PWM_Init+0x80>)
 8000366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800036a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (0x2<<28);
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <PWM_Init+0x80>)
 800036e:	6a1b      	ldr	r3, [r3, #32]
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <PWM_Init+0x80>)
 8000372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000376:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[1] |= (0x2<<0);
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <PWM_Init+0x80>)
 800037a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037c:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <PWM_Init+0x80>)
 800037e:	f043 0302 	orr.w	r3, r3, #2
 8000382:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOC->AFR[1] |= (0x2<<4);
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <PWM_Init+0x80>)
 8000386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000388:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <PWM_Init+0x80>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6253      	str	r3, [r2, #36]	; 0x24

}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	40020800 	.word	0x40020800

080003a4 <SetPWM>:



void SetPWM(int Per_DC1, int Per_DC2, int Per_DC3, int Per_DC4){
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
	 * Channel 3: PC9
	 *
	 * */

	/*Enable clock for Timer 3*/
	RCC->APB1ENR |=(1U<<1);
 80003b2:	4b23      	ldr	r3, [pc, #140]	; (8000440 <SetPWM+0x9c>)
 80003b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b6:	4a22      	ldr	r2, [pc, #136]	; (8000440 <SetPWM+0x9c>)
 80003b8:	f043 0302 	orr.w	r3, r3, #2
 80003bc:	6413      	str	r3, [r2, #64]	; 0x40
	/* Prescaler Value : = 2 = > 16.000.000/2 = 8.000.000*/
	TIM3->PSC = 2 - 1;  // 16.000.000 / 2 = 8.000.000
 80003be:	4b21      	ldr	r3, [pc, #132]	; (8000444 <SetPWM+0xa0>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	629a      	str	r2, [r3, #40]	; 0x28
	/*Auto Reaload Register : = 4 => F = 8.000.000 / 10 = 800.000*/
	TIM3->ARR = 100 - 1; // 8.000.000/100 = 80.000 Hz
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <SetPWM+0xa0>)
 80003c6:	2263      	movs	r2, #99	; 0x63
 80003c8:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Clear counter*/
	TIM3->CNT = 0;
 80003ca:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <SetPWM+0xa0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	625a      	str	r2, [r3, #36]	; 0x24


	/*Enable PWM mode for TIM2 channel */
	TIM3->CCMR1 = 0x6060;			// Channel 3
 80003d0:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <SetPWM+0xa0>)
 80003d2:	f246 0260 	movw	r2, #24672	; 0x6060
 80003d6:	619a      	str	r2, [r3, #24]
	TIM3->CCMR2 = 0x6060;		// Channel 4
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <SetPWM+0xa0>)
 80003da:	f246 0260 	movw	r2, #24672	; 0x6060
 80003de:	61da      	str	r2, [r3, #28]

	/*OUT*/
	/*Channel 1: PC6*/
	TIM3->CCR1 = (Per_DC1*100)/100 ;
 80003e0:	4a18      	ldr	r2, [pc, #96]	; (8000444 <SetPWM+0xa0>)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	6353      	str	r3, [r2, #52]	; 0x34
	/*Channel 2: PC7*/
	TIM3->CCR2 = (Per_DC2*100)/100;
 80003e6:	4a17      	ldr	r2, [pc, #92]	; (8000444 <SetPWM+0xa0>)
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	6393      	str	r3, [r2, #56]	; 0x38
	/*Channel 3: PC8*/
	TIM3->CCR3 = (Per_DC3*100)/100;
 80003ec:	4a15      	ldr	r2, [pc, #84]	; (8000444 <SetPWM+0xa0>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	63d3      	str	r3, [r2, #60]	; 0x3c
	/*Channel 4: PC9*/
	TIM3->CCR4 = (Per_DC4*100)/100;
 80003f2:	4a14      	ldr	r2, [pc, #80]	; (8000444 <SetPWM+0xa0>)
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enable output capture for channel*/
	TIM3->CCER |= (1U<<0); 			// Channel 1
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <SetPWM+0xa0>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a11      	ldr	r2, [pc, #68]	; (8000444 <SetPWM+0xa0>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= (1U<<4); 			// Channel 2
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <SetPWM+0xa0>)
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <SetPWM+0xa0>)
 800040a:	f043 0310 	orr.w	r3, r3, #16
 800040e:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= (1U<<8); 			// Channel 3
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <SetPWM+0xa0>)
 8000412:	6a1b      	ldr	r3, [r3, #32]
 8000414:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <SetPWM+0xa0>)
 8000416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800041a:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= (1U<<12); 			// Channel 4
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <SetPWM+0xa0>)
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	4a08      	ldr	r2, [pc, #32]	; (8000444 <SetPWM+0xa0>)
 8000422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000426:	6213      	str	r3, [r2, #32]


	/*Enable Timer*/
	TIM3->CR1 |= (1U<<0);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <SetPWM+0xa0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <SetPWM+0xa0>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]


}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40023800 	.word	0x40023800
 8000444:	40000400 	.word	0x40000400

08000448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000456:	2b00      	cmp	r3, #0
 8000458:	db0b      	blt.n	8000472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	f003 021f 	and.w	r2, r3, #31
 8000460:	4907      	ldr	r1, [pc, #28]	; (8000480 <__NVIC_EnableIRQ+0x38>)
 8000462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000466:	095b      	lsrs	r3, r3, #5
 8000468:	2001      	movs	r0, #1
 800046a:	fa00 f202 	lsl.w	r2, r0, r2
 800046e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000e100 	.word	0xe000e100

08000484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db0a      	blt.n	80004ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	b2da      	uxtb	r2, r3
 800049c:	490c      	ldr	r1, [pc, #48]	; (80004d0 <__NVIC_SetPriority+0x4c>)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	0112      	lsls	r2, r2, #4
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	440b      	add	r3, r1
 80004a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ac:	e00a      	b.n	80004c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <__NVIC_SetPriority+0x50>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	3b04      	subs	r3, #4
 80004bc:	0112      	lsls	r2, r2, #4
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	440b      	add	r3, r1
 80004c2:	761a      	strb	r2, [r3, #24]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	e000e100 	.word	0xe000e100
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <PA4_ADC_Init>:
#define ADC_Channel4	(0x4<<0)
#define ADC_Channel1	(0x1<<4)



void PA4_ADC_Init(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	/*------------------------------Configurate the GPIO ADC------------------------*/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=(1<<0);
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <PA4_ADC_Init+0x6c>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a18      	ldr	r2, [pc, #96]	; (8000544 <PA4_ADC_Init+0x6c>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of GPIOA to analog*/
	GPIOA->MODER |=(0x3<<8);			/*Pointer PA4*/
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <PA4_ADC_Init+0x70>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a16      	ldr	r2, [pc, #88]	; (8000548 <PA4_ADC_Init+0x70>)
 80004ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004f2:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER |=(0x3<<2);			/*Temperate sensor*/

	/*--------------------------------Configurate ADC module--------------------------*/
	/*Enable clock for ADC1*/
	RCC->APB2ENR |=(1<<8);
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <PA4_ADC_Init+0x6c>)
 80004f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <PA4_ADC_Init+0x6c>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6453      	str	r3, [r2, #68]	; 0x44

	/*Enable interrupt when complete consersion*/
	ADC1->CR1 |=(1U<<5);
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <PA4_ADC_Init+0x74>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a11      	ldr	r2, [pc, #68]	; (800054c <PA4_ADC_Init+0x74>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6053      	str	r3, [r2, #4]

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_Channel4;			/*Channel 4 SQR1*/
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <PA4_ADC_Init+0x74>)
 800050e:	2204      	movs	r2, #4
 8000510:	635a      	str	r2, [r3, #52]	; 0x34
	//ADC1->SQR3 = ADC_Channel1;			/*Channel 1 SQR2*/

	/*Conversion sequence length*/
	ADC1->SQR1 |=(0x0<<20);  /* 1 conversion*/
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <PA4_ADC_Init+0x74>)
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <PA4_ADC_Init+0x74>)
 8000516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000518:	62d3      	str	r3, [r2, #44]	; 0x2c

	/*Sample time :480 cycles */
	ADC1->SMPR2 |=(0x7<<12);
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <PA4_ADC_Init+0x74>)
 800051c:	691b      	ldr	r3, [r3, #16]
 800051e:	4a0b      	ldr	r2, [pc, #44]	; (800054c <PA4_ADC_Init+0x74>)
 8000520:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000524:	6113      	str	r3, [r2, #16]


	/*Set priority for ADC 1*/
	NVIC_SetPriority(ADC_IRQn,10);
 8000526:	210a      	movs	r1, #10
 8000528:	2012      	movs	r0, #18
 800052a:	f7ff ffab 	bl	8000484 <__NVIC_SetPriority>
	/*Enable interrupt in NVIC*/
	NVIC_EnableIRQ(ADC_IRQn);
 800052e:	2012      	movs	r0, #18
 8000530:	f7ff ff8a 	bl	8000448 <__NVIC_EnableIRQ>

	/*Enable ADC*/
	ADC1->CR2 |=(1<<0);
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <PA4_ADC_Init+0x74>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <PA4_ADC_Init+0x74>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6093      	str	r3, [r2, #8]
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	40012000 	.word	0x40012000

08000550 <Start_Conversion_Single>:

void Start_Conversion_Single(void){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	/*Enable continous mode*/
	ADC1->CR2 |=(1<<1);
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <Start_Conversion_Single+0x28>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <Start_Conversion_Single+0x28>)
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	6093      	str	r3, [r2, #8]
	/*Start conversion*/
	ADC1->CR2 |=(1<<30);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <Start_Conversion_Single+0x28>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <Start_Conversion_Single+0x28>)
 8000566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800056a:	6093      	str	r3, [r2, #8]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40012000 	.word	0x40012000

0800057c <main>:
uint32_t sensor_value;
uint8_t RX_Data[20];
uint8_t Index_RX_Data = 0;
uint16_t temp;
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	TIM1_Init();
 8000580:	f000 f8e4 	bl	800074c <TIM1_Init>
	TIM1_Interrupt_Init();
 8000584:	f000 f914 	bl	80007b0 <TIM1_Interrupt_Init>

	UART2_Init();
 8000588:	f000 f92e 	bl	80007e8 <UART2_Init>
	UART2_Interrupt_Init();
 800058c:	f000 f99a 	bl	80008c4 <UART2_Interrupt_Init>

	PA4_ADC_Init();
 8000590:	f7ff ffa2 	bl	80004d8 <PA4_ADC_Init>
	Start_Conversion_Single();
 8000594:	f7ff ffdc 	bl	8000550 <Start_Conversion_Single>

	GPIO_Toggle_Init();
 8000598:	f7ff fe82 	bl	80002a0 <GPIO_Toggle_Init>

	PWM_Init();
 800059c:	f7ff fec0 	bl	8000320 <PWM_Init>
	SetPWM(10,20,30,50);
 80005a0:	2332      	movs	r3, #50	; 0x32
 80005a2:	221e      	movs	r2, #30
 80005a4:	2114      	movs	r1, #20
 80005a6:	200a      	movs	r0, #10
 80005a8:	f7ff fefc 	bl	80003a4 <SetPWM>

	//UART_Transmit(msg,20);
	while(1){
 80005ac:	e7fe      	b.n	80005ac <main+0x30>
	...

080005b0 <USART2_IRQHandler>:

	}


}
void USART2_IRQHandler(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	/*Check which interrupt*/
	if( USART2->SR & (1<<5) ){
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <USART2_IRQHandler+0x58>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f003 0320 	and.w	r3, r3, #32
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d01a      	beq.n	80005f6 <USART2_IRQHandler+0x46>
		UART_Receive(RX_Buffer,4);
 80005c0:	2104      	movs	r1, #4
 80005c2:	4812      	ldr	r0, [pc, #72]	; (800060c <USART2_IRQHandler+0x5c>)
 80005c4:	f000 f9c8 	bl	8000958 <UART_Receive>
		sscanf(RX_Buffer,"%d\n",&PWM);
 80005c8:	4a11      	ldr	r2, [pc, #68]	; (8000610 <USART2_IRQHandler+0x60>)
 80005ca:	4912      	ldr	r1, [pc, #72]	; (8000614 <USART2_IRQHandler+0x64>)
 80005cc:	480f      	ldr	r0, [pc, #60]	; (800060c <USART2_IRQHandler+0x5c>)
 80005ce:	f000 fa5f 	bl	8000a90 <siscanf>
		SetPWM(10,20,30,PWM);
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <USART2_IRQHandler+0x60>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	221e      	movs	r2, #30
 80005d8:	2114      	movs	r1, #20
 80005da:	200a      	movs	r0, #10
 80005dc:	f7ff fee2 	bl	80003a4 <SetPWM>
		sprintf(msg,"PWM is :%d\n",sensor_value);
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <USART2_IRQHandler+0x68>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <USART2_IRQHandler+0x6c>)
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <USART2_IRQHandler+0x70>)
 80005ea:	f000 fa31 	bl	8000a50 <siprintf>
		UART_Transmit(msg,20);
 80005ee:	2114      	movs	r1, #20
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <USART2_IRQHandler+0x70>)
 80005f2:	f000 f983 	bl	80008fc <UART_Transmit>

		//Toggle();
	}
	/*Clear interrupt flag*/
	USART2->SR &=~ (1<<5);
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <USART2_IRQHandler+0x58>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a03      	ldr	r2, [pc, #12]	; (8000608 <USART2_IRQHandler+0x58>)
 80005fc:	f023 0320 	bic.w	r3, r3, #32
 8000600:	6013      	str	r3, [r2, #0]


}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40004400 	.word	0x40004400
 800060c:	200000d4 	.word	0x200000d4
 8000610:	20000080 	.word	0x20000080
 8000614:	08001cbc 	.word	0x08001cbc
 8000618:	200000e8 	.word	0x200000e8
 800061c:	08001cc0 	.word	0x08001cc0
 8000620:	20000084 	.word	0x20000084

08000624 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	/*Check interrupt*/
	Toggle();
 8000628:	f7ff fe58 	bl	80002dc <Toggle>

	/* Clear pending*/
	TIM1->SR &=~ (1<<0);
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	4a02      	ldr	r2, [pc, #8]	; (800063c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000632:	f023 0301 	bic.w	r3, r3, #1
 8000636:	6113      	str	r3, [r2, #16]
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40010000 	.word	0x40010000

08000640 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<0)){
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <EXTI0_IRQHandler+0x20>)
 8000646:	695b      	ldr	r3, [r3, #20]

	}
	/*Clear Pending*/
	EXTI->PR |= (1<<0);
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <EXTI0_IRQHandler+0x20>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <EXTI0_IRQHandler+0x20>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6153      	str	r3, [r2, #20]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40013c00 	.word	0x40013c00

08000664 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<1)){
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <EXTI1_IRQHandler+0x20>)
 800066a:	695b      	ldr	r3, [r3, #20]

	}
	/*Clear Pending*/
	EXTI->PR |= (1<<1);
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <EXTI1_IRQHandler+0x20>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <EXTI1_IRQHandler+0x20>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6153      	str	r3, [r2, #20]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40013c00 	.word	0x40013c00

08000688 <ADC_IRQHandler>:

void ADC_IRQHandler(void){
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	if( (ADC1->SR & (1<<1)) != 0){
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <ADC_IRQHandler+0x4c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	2b00      	cmp	r3, #0
 8000696:	d011      	beq.n	80006bc <ADC_IRQHandler+0x34>
		sensor_value = ADC1->DR;
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <ADC_IRQHandler+0x4c>)
 800069a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <ADC_IRQHandler+0x50>)
 800069e:	6013      	str	r3, [r2, #0]
		sensor_value = (sensor_value*100)/4095;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <ADC_IRQHandler+0x50>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2264      	movs	r2, #100	; 0x64
 80006a6:	fb03 f202 	mul.w	r2, r3, r2
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <ADC_IRQHandler+0x54>)
 80006ac:	fba3 1302 	umull	r1, r3, r3, r2
 80006b0:	1ad2      	subs	r2, r2, r3
 80006b2:	0852      	lsrs	r2, r2, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	0adb      	lsrs	r3, r3, #11
 80006b8:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <ADC_IRQHandler+0x50>)
 80006ba:	6013      	str	r3, [r2, #0]
		//UART_Transmit(TX_Buffer,8);
	}
	//Clear Pending Flag
	ADC1->SR &=~ (1<<1);
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <ADC_IRQHandler+0x4c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <ADC_IRQHandler+0x4c>)
 80006c2:	f023 0302 	bic.w	r3, r3, #2
 80006c6:	6013      	str	r3, [r2, #0]

}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	200000e8 	.word	0x200000e8
 80006dc:	00100101 	.word	0x00100101

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f000 f974 	bl	80009fc <__errno>
 8000714:	4603      	mov	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <_sbrk+0x64>)
 8000730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20020000 	.word	0x20020000
 8000740:	00000400 	.word	0x00000400
 8000744:	200000ec 	.word	0x200000ec
 8000748:	20000100 	.word	0x20000100

0800074c <TIM1_Init>:
#include <tim2.h>
#include <stm32f407xx.h>
#define TIM1_EN		(1U<<0)


void TIM1_Init(void){
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

	/*Enable clock access to tim2*/
	RCC->APB2ENR = TIM1_EN;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <TIM1_Init+0x5c>)
 8000752:	2201      	movs	r2, #1
 8000754:	645a      	str	r2, [r3, #68]	; 0x44
	/*Set prescaler value*/
	TIM1->PSC = 1600-1;    //16.000.000/1600=10.000
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <TIM1_Init+0x60>)
 8000758:	f240 623f 	movw	r2, #1599	; 0x63f
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set auto - reload value*/
	//TIM2->ARR = 200000-1; //1.000/200.000 = 0.005 -> 5ms
	TIM1->ARR = 10000-1; //1.000/1.000 = 1 -> 1s
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <TIM1_Init+0x60>)
 8000760:	f242 720f 	movw	r2, #9999	; 0x270f
 8000764:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Clear counter*/
	TIM1->CNT = 0;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <TIM1_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
	/*Clear interrupt flag*/
	TIM1->SR &=~(1U<<0);
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <TIM1_Init+0x60>)
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <TIM1_Init+0x60>)
 8000772:	f023 0301 	bic.w	r3, r3, #1
 8000776:	6113      	str	r3, [r2, #16]
	/*Configurate mode for timer*/
	/*No effect on the output*/
	TIM1->EGR |= (1<<0);
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <TIM1_Init+0x60>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <TIM1_Init+0x60>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6153      	str	r3, [r2, #20]
	/*Enable timer*/
	TIM1->CR1 |=(1<<0);
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <TIM1_Init+0x60>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a08      	ldr	r2, [pc, #32]	; (80007ac <TIM1_Init+0x60>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6013      	str	r3, [r2, #0]

	/*Enable interrupt*/
	TIM1->DIER |=(1<<0);
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <TIM1_Init+0x60>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	4a05      	ldr	r2, [pc, #20]	; (80007ac <TIM1_Init+0x60>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40010000 	.word	0x40010000

080007b0 <TIM1_Interrupt_Init>:
void TIM1_Interrupt_Init(void){
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

	/*Clear pending  Pos : 28*/
	NVIC->ICPR[0] |= 1 << (TIM1_UP_TIM10_IRQn % 32);
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <TIM1_Interrupt_Init+0x34>)
 80007b6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <TIM1_Interrupt_Init+0x34>)
 80007bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	/*Set priority*/
	NVIC->IP[TIM2_IRQn] = 0x01;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <TIM1_Interrupt_Init+0x34>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

	//NVIC_SetPriority(TIM2_IRQn, 2);
	//NVIC_EnableIRQ( TIM1_UP_TIM10_IRQn );
	NVIC->ISER[0] |= 1 << (TIM1_UP_TIM10_IRQn % 32);
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <TIM1_Interrupt_Init+0x34>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <TIM1_Interrupt_Init+0x34>)
 80007d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007d6:	6013      	str	r3, [r2, #0]

}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000e100 	.word	0xe000e100

080007e8 <UART2_Init>:
 * Stop bit : 1 bit
 * Size of Data : 8 bit
 * Position NVIC : 38 -> 1 st register
 */

void UART2_Init(void){
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	/*--------------------------------Configuration uart gpio pin------------------------------------------*/
	/*Enble clock access to port A*/
	RCC->AHB1ENR |= (1U<<0);
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <UART2_Init+0xd0>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a31      	ldr	r2, [pc, #196]	; (80008b8 <UART2_Init+0xd0>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2  & PA 3 mode to alternate function mode */
	GPIOA->MODER |= (0x2<<4);
 80007f8:	4b30      	ldr	r3, [pc, #192]	; (80008bc <UART2_Init+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a2f      	ldr	r2, [pc, #188]	; (80008bc <UART2_Init+0xd4>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2<<6);
 8000804:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <UART2_Init+0xd4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a2c      	ldr	r2, [pc, #176]	; (80008bc <UART2_Init+0xd4>)
 800080a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080e:	6013      	str	r3, [r2, #0]
	/*Set PA2 & PA3 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (0x7<<8);
 8000810:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <UART2_Init+0xd4>)
 8000812:	6a1b      	ldr	r3, [r3, #32]
 8000814:	4a29      	ldr	r2, [pc, #164]	; (80008bc <UART2_Init+0xd4>)
 8000816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800081a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7<<12);
 800081c:	4b27      	ldr	r3, [pc, #156]	; (80008bc <UART2_Init+0xd4>)
 800081e:	6a1b      	ldr	r3, [r3, #32]
 8000820:	4a26      	ldr	r2, [pc, #152]	; (80008bc <UART2_Init+0xd4>)
 8000822:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000826:	6213      	str	r3, [r2, #32]
	/*-------------------------------Configuration uart module -------------------------------------------*/
	/*Enable clock access to uart 2*/
	RCC->APB1ENR = (1U<<17);
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <UART2_Init+0xd0>)
 800082a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800082e:	641a      	str	r2, [r3, #64]	; 0x40
	/* Other setting*/
	USART2->CR1 = 0;					/*Reset register*/
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <UART2_Init+0xd8>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
	USART2->CR1 &=~ (1<<15);			/* Oversampling = 16 */
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <UART2_Init+0xd8>)
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <UART2_Init+0xd8>)
 800083c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000840:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &=~ (1<<12);			/* Word length = 8 bits */
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <UART2_Init+0xd8>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <UART2_Init+0xd8>)
 8000848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800084c:	60d3      	str	r3, [r2, #12]
	USART2->CR1 &=~(1<<10); 			/* Parity Disable */
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <UART2_Init+0xd8>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <UART2_Init+0xd8>)
 8000854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000858:	60d3      	str	r3, [r2, #12]
	USART2->CR2 &=~ (0x3<<12);			/* 1 Stop bit */
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <UART2_Init+0xd8>)
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <UART2_Init+0xd8>)
 8000860:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000864:	6113      	str	r3, [r2, #16]

	USART2->CR1 |= (1<<5);		/* Enable interrupt when received Data */
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <UART2_Init+0xd8>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <UART2_Init+0xd8>)
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	60d3      	str	r3, [r2, #12]
	//USART2->CR1 |= (1<<4);		/*IDLE*/
	/*Configure baudrate*/
	/*19200 Bit per second- 16Mhz*/
	USART2->BRR |= (0x34<<4);
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <UART2_Init+0xd8>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <UART2_Init+0xd8>)
 8000878:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800087c:	6093      	str	r3, [r2, #8]
	USART2->BRR |= (0x01<<0);
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <UART2_Init+0xd8>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <UART2_Init+0xd8>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6093      	str	r3, [r2, #8]

	/*Configure transfer direction*/
	USART2->CR1 |= (1U<<3); 			/* Transmit */
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <UART2_Init+0xd8>)
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <UART2_Init+0xd8>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1U<<2);				/* Receiver */
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <UART2_Init+0xd8>)
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <UART2_Init+0xd8>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	60d3      	str	r3, [r2, #12]

	/*Enable uart module*/
	USART2->CR1 |= (1U<<13);
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <UART2_Init+0xd8>)
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <UART2_Init+0xd8>)
 80008a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ac:	60d3      	str	r3, [r2, #12]
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40004400 	.word	0x40004400

080008c4 <UART2_Interrupt_Init>:
void UART2_Interrupt_Init(void){
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

	/*Clear pending flag*/
	NVIC->ICPR[1] |= 1<< (USART2_IRQn % 32);
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <UART2_Interrupt_Init+0x34>)
 80008ca:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <UART2_Interrupt_Init+0x34>)
 80008d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d4:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

	/*Set priority interrupt : = 1*/
	NVIC->IP[USART2_IRQn] = 0x00;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <UART2_Interrupt_Init+0x34>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	//NVIC_SetPriority(USART2_IRQn, 1);
	/*Enable interrup*/
	NVIC->ISER[1] |= 1 << (USART2_IRQn % 32);
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <UART2_Interrupt_Init+0x34>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <UART2_Interrupt_Init+0x34>)
 80008e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ea:	6053      	str	r3, [r2, #4]
	//NVIC_EnableIRQ(USART2_IRQn);
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100

080008fc <UART_Transmit>:


void UART_Transmit( uint8_t *TX_Data, uint8_t TX_Size){
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 800090c:	e010      	b.n	8000930 <UART_Transmit+0x34>
		/* Check Transmit Data Register Empty*/
		while(!(USART2->SR& (1<<7))){}
 800090e:	bf00      	nop
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <UART_Transmit+0x58>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <UART_Transmit+0x14>
		/* Send data */
		USART2->DR=(uint8_t)(*TX_Data & 0xFF);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <UART_Transmit+0x58>)
 8000922:	605a      	str	r2, [r3, #4]
		TX_Data++;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3301      	adds	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
		i++;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 8000930:	7bfa      	ldrb	r2, [r7, #15]
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	429a      	cmp	r2, r3
 8000936:	d3ea      	bcc.n	800090e <UART_Transmit+0x12>
	}
	/*Waiting transmit complete*/
	while(!(USART2->SR &(1<<6))){}
 8000938:	bf00      	nop
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <UART_Transmit+0x58>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f9      	beq.n	800093a <UART_Transmit+0x3e>
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40004400 	.word	0x40004400

08000958 <UART_Receive>:
void UART_Receive(uint8_t *RX_Data,uint8_t RX_Size){
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]
	while(i < RX_Size){
 8000968:	e011      	b.n	800098e <UART_Receive+0x36>
		/*Waitting Data Receive not empty*/
		while( !(USART2->SR & (1<<5)) ){}
 800096a:	bf00      	nop
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <UART_Receive+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 0320 	and.w	r3, r3, #32
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <UART_Receive+0x14>
		*RX_Data = (uint8_t) (USART2->DR & 0xFF);
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <UART_Receive+0x4c>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	701a      	strb	r2, [r3, #0]
		RX_Data++;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
		i++;
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	3301      	adds	r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
	while(i < RX_Size){
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	429a      	cmp	r2, r3
 8000994:	d3e9      	bcc.n	800096a <UART_Receive+0x12>
	}
}
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	40004400 	.word	0x40004400

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f817 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fdcf 	bl	800057c <main>

080009de <LoopForever>:

LoopForever:
  b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80009ec:	08001e90 	.word	0x08001e90
  ldr r2, =_sbss
 80009f0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80009f4:	20000100 	.word	0x20000100

080009f8 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <BusFault_Handler>
	...

080009fc <__errno>:
 80009fc:	4b01      	ldr	r3, [pc, #4]	; (8000a04 <__errno+0x8>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000

08000a08 <__libc_init_array>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	4d0d      	ldr	r5, [pc, #52]	; (8000a40 <__libc_init_array+0x38>)
 8000a0c:	4c0d      	ldr	r4, [pc, #52]	; (8000a44 <__libc_init_array+0x3c>)
 8000a0e:	1b64      	subs	r4, r4, r5
 8000a10:	10a4      	asrs	r4, r4, #2
 8000a12:	2600      	movs	r6, #0
 8000a14:	42a6      	cmp	r6, r4
 8000a16:	d109      	bne.n	8000a2c <__libc_init_array+0x24>
 8000a18:	4d0b      	ldr	r5, [pc, #44]	; (8000a48 <__libc_init_array+0x40>)
 8000a1a:	4c0c      	ldr	r4, [pc, #48]	; (8000a4c <__libc_init_array+0x44>)
 8000a1c:	f001 f942 	bl	8001ca4 <_init>
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	10a4      	asrs	r4, r4, #2
 8000a24:	2600      	movs	r6, #0
 8000a26:	42a6      	cmp	r6, r4
 8000a28:	d105      	bne.n	8000a36 <__libc_init_array+0x2e>
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a30:	4798      	blx	r3
 8000a32:	3601      	adds	r6, #1
 8000a34:	e7ee      	b.n	8000a14 <__libc_init_array+0xc>
 8000a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3a:	4798      	blx	r3
 8000a3c:	3601      	adds	r6, #1
 8000a3e:	e7f2      	b.n	8000a26 <__libc_init_array+0x1e>
 8000a40:	08001e88 	.word	0x08001e88
 8000a44:	08001e88 	.word	0x08001e88
 8000a48:	08001e88 	.word	0x08001e88
 8000a4c:	08001e8c 	.word	0x08001e8c

08000a50 <siprintf>:
 8000a50:	b40e      	push	{r1, r2, r3}
 8000a52:	b500      	push	{lr}
 8000a54:	b09c      	sub	sp, #112	; 0x70
 8000a56:	ab1d      	add	r3, sp, #116	; 0x74
 8000a58:	9002      	str	r0, [sp, #8]
 8000a5a:	9006      	str	r0, [sp, #24]
 8000a5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <siprintf+0x38>)
 8000a62:	9107      	str	r1, [sp, #28]
 8000a64:	9104      	str	r1, [sp, #16]
 8000a66:	4909      	ldr	r1, [pc, #36]	; (8000a8c <siprintf+0x3c>)
 8000a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a6c:	9105      	str	r1, [sp, #20]
 8000a6e:	6800      	ldr	r0, [r0, #0]
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	a902      	add	r1, sp, #8
 8000a74:	f000 f896 	bl	8000ba4 <_svfiprintf_r>
 8000a78:	9b02      	ldr	r3, [sp, #8]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	b01c      	add	sp, #112	; 0x70
 8000a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a84:	b003      	add	sp, #12
 8000a86:	4770      	bx	lr
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	ffff0208 	.word	0xffff0208

08000a90 <siscanf>:
 8000a90:	b40e      	push	{r1, r2, r3}
 8000a92:	b510      	push	{r4, lr}
 8000a94:	b09f      	sub	sp, #124	; 0x7c
 8000a96:	ac21      	add	r4, sp, #132	; 0x84
 8000a98:	f44f 7101 	mov.w	r1, #516	; 0x204
 8000a9c:	f854 2b04 	ldr.w	r2, [r4], #4
 8000aa0:	9201      	str	r2, [sp, #4]
 8000aa2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8000aa6:	9004      	str	r0, [sp, #16]
 8000aa8:	9008      	str	r0, [sp, #32]
 8000aaa:	f7ff fba1 	bl	80001f0 <strlen>
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <siscanf+0x50>)
 8000ab0:	9005      	str	r0, [sp, #20]
 8000ab2:	9009      	str	r0, [sp, #36]	; 0x24
 8000ab4:	930d      	str	r3, [sp, #52]	; 0x34
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <siscanf+0x54>)
 8000ab8:	9a01      	ldr	r2, [sp, #4]
 8000aba:	6800      	ldr	r0, [r0, #0]
 8000abc:	9403      	str	r4, [sp, #12]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8000ac2:	9316      	str	r3, [sp, #88]	; 0x58
 8000ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8000acc:	a904      	add	r1, sp, #16
 8000ace:	4623      	mov	r3, r4
 8000ad0:	f000 f9c2 	bl	8000e58 <__ssvfiscanf_r>
 8000ad4:	b01f      	add	sp, #124	; 0x7c
 8000ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ada:	b003      	add	sp, #12
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	08000ae9 	.word	0x08000ae9
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <__seofread>:
 8000ae8:	2000      	movs	r0, #0
 8000aea:	4770      	bx	lr

08000aec <__ssputs_r>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	688e      	ldr	r6, [r1, #8]
 8000af2:	429e      	cmp	r6, r3
 8000af4:	4682      	mov	sl, r0
 8000af6:	460c      	mov	r4, r1
 8000af8:	4690      	mov	r8, r2
 8000afa:	461f      	mov	r7, r3
 8000afc:	d838      	bhi.n	8000b70 <__ssputs_r+0x84>
 8000afe:	898a      	ldrh	r2, [r1, #12]
 8000b00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000b04:	d032      	beq.n	8000b6c <__ssputs_r+0x80>
 8000b06:	6825      	ldr	r5, [r4, #0]
 8000b08:	6909      	ldr	r1, [r1, #16]
 8000b0a:	eba5 0901 	sub.w	r9, r5, r1
 8000b0e:	6965      	ldr	r5, [r4, #20]
 8000b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b18:	3301      	adds	r3, #1
 8000b1a:	444b      	add	r3, r9
 8000b1c:	106d      	asrs	r5, r5, #1
 8000b1e:	429d      	cmp	r5, r3
 8000b20:	bf38      	it	cc
 8000b22:	461d      	movcc	r5, r3
 8000b24:	0553      	lsls	r3, r2, #21
 8000b26:	d531      	bpl.n	8000b8c <__ssputs_r+0xa0>
 8000b28:	4629      	mov	r1, r5
 8000b2a:	f000 fff3 	bl	8001b14 <_malloc_r>
 8000b2e:	4606      	mov	r6, r0
 8000b30:	b950      	cbnz	r0, 8000b48 <__ssputs_r+0x5c>
 8000b32:	230c      	movs	r3, #12
 8000b34:	f8ca 3000 	str.w	r3, [sl]
 8000b38:	89a3      	ldrh	r3, [r4, #12]
 8000b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3e:	81a3      	strh	r3, [r4, #12]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	6921      	ldr	r1, [r4, #16]
 8000b4a:	464a      	mov	r2, r9
 8000b4c:	f000 ff4e 	bl	80019ec <memcpy>
 8000b50:	89a3      	ldrh	r3, [r4, #12]
 8000b52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5a:	81a3      	strh	r3, [r4, #12]
 8000b5c:	6126      	str	r6, [r4, #16]
 8000b5e:	6165      	str	r5, [r4, #20]
 8000b60:	444e      	add	r6, r9
 8000b62:	eba5 0509 	sub.w	r5, r5, r9
 8000b66:	6026      	str	r6, [r4, #0]
 8000b68:	60a5      	str	r5, [r4, #8]
 8000b6a:	463e      	mov	r6, r7
 8000b6c:	42be      	cmp	r6, r7
 8000b6e:	d900      	bls.n	8000b72 <__ssputs_r+0x86>
 8000b70:	463e      	mov	r6, r7
 8000b72:	6820      	ldr	r0, [r4, #0]
 8000b74:	4632      	mov	r2, r6
 8000b76:	4641      	mov	r1, r8
 8000b78:	f000 ff46 	bl	8001a08 <memmove>
 8000b7c:	68a3      	ldr	r3, [r4, #8]
 8000b7e:	1b9b      	subs	r3, r3, r6
 8000b80:	60a3      	str	r3, [r4, #8]
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	4433      	add	r3, r6
 8000b86:	6023      	str	r3, [r4, #0]
 8000b88:	2000      	movs	r0, #0
 8000b8a:	e7db      	b.n	8000b44 <__ssputs_r+0x58>
 8000b8c:	462a      	mov	r2, r5
 8000b8e:	f001 f835 	bl	8001bfc <_realloc_r>
 8000b92:	4606      	mov	r6, r0
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d1e1      	bne.n	8000b5c <__ssputs_r+0x70>
 8000b98:	6921      	ldr	r1, [r4, #16]
 8000b9a:	4650      	mov	r0, sl
 8000b9c:	f000 ff4e 	bl	8001a3c <_free_r>
 8000ba0:	e7c7      	b.n	8000b32 <__ssputs_r+0x46>
	...

08000ba4 <_svfiprintf_r>:
 8000ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba8:	4698      	mov	r8, r3
 8000baa:	898b      	ldrh	r3, [r1, #12]
 8000bac:	061b      	lsls	r3, r3, #24
 8000bae:	b09d      	sub	sp, #116	; 0x74
 8000bb0:	4607      	mov	r7, r0
 8000bb2:	460d      	mov	r5, r1
 8000bb4:	4614      	mov	r4, r2
 8000bb6:	d50e      	bpl.n	8000bd6 <_svfiprintf_r+0x32>
 8000bb8:	690b      	ldr	r3, [r1, #16]
 8000bba:	b963      	cbnz	r3, 8000bd6 <_svfiprintf_r+0x32>
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	f000 ffa9 	bl	8001b14 <_malloc_r>
 8000bc2:	6028      	str	r0, [r5, #0]
 8000bc4:	6128      	str	r0, [r5, #16]
 8000bc6:	b920      	cbnz	r0, 8000bd2 <_svfiprintf_r+0x2e>
 8000bc8:	230c      	movs	r3, #12
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	e0d1      	b.n	8000d76 <_svfiprintf_r+0x1d2>
 8000bd2:	2340      	movs	r3, #64	; 0x40
 8000bd4:	616b      	str	r3, [r5, #20]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8000bda:	2320      	movs	r3, #32
 8000bdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000be4:	2330      	movs	r3, #48	; 0x30
 8000be6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000d90 <_svfiprintf_r+0x1ec>
 8000bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bee:	f04f 0901 	mov.w	r9, #1
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	469a      	mov	sl, r3
 8000bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bfa:	b10a      	cbz	r2, 8000c00 <_svfiprintf_r+0x5c>
 8000bfc:	2a25      	cmp	r2, #37	; 0x25
 8000bfe:	d1f9      	bne.n	8000bf4 <_svfiprintf_r+0x50>
 8000c00:	ebba 0b04 	subs.w	fp, sl, r4
 8000c04:	d00b      	beq.n	8000c1e <_svfiprintf_r+0x7a>
 8000c06:	465b      	mov	r3, fp
 8000c08:	4622      	mov	r2, r4
 8000c0a:	4629      	mov	r1, r5
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	f7ff ff6d 	bl	8000aec <__ssputs_r>
 8000c12:	3001      	adds	r0, #1
 8000c14:	f000 80aa 	beq.w	8000d6c <_svfiprintf_r+0x1c8>
 8000c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c1a:	445a      	add	r2, fp
 8000c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8000c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80a2 	beq.w	8000d6c <_svfiprintf_r+0x1c8>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c32:	f10a 0a01 	add.w	sl, sl, #1
 8000c36:	9304      	str	r3, [sp, #16]
 8000c38:	9307      	str	r3, [sp, #28]
 8000c3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c3e:	931a      	str	r3, [sp, #104]	; 0x68
 8000c40:	4654      	mov	r4, sl
 8000c42:	2205      	movs	r2, #5
 8000c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c48:	4851      	ldr	r0, [pc, #324]	; (8000d90 <_svfiprintf_r+0x1ec>)
 8000c4a:	f7ff fad9 	bl	8000200 <memchr>
 8000c4e:	9a04      	ldr	r2, [sp, #16]
 8000c50:	b9d8      	cbnz	r0, 8000c8a <_svfiprintf_r+0xe6>
 8000c52:	06d0      	lsls	r0, r2, #27
 8000c54:	bf44      	itt	mi
 8000c56:	2320      	movmi	r3, #32
 8000c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c5c:	0711      	lsls	r1, r2, #28
 8000c5e:	bf44      	itt	mi
 8000c60:	232b      	movmi	r3, #43	; 0x2b
 8000c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c66:	f89a 3000 	ldrb.w	r3, [sl]
 8000c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c6c:	d015      	beq.n	8000c9a <_svfiprintf_r+0xf6>
 8000c6e:	9a07      	ldr	r2, [sp, #28]
 8000c70:	4654      	mov	r4, sl
 8000c72:	2000      	movs	r0, #0
 8000c74:	f04f 0c0a 	mov.w	ip, #10
 8000c78:	4621      	mov	r1, r4
 8000c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c7e:	3b30      	subs	r3, #48	; 0x30
 8000c80:	2b09      	cmp	r3, #9
 8000c82:	d94e      	bls.n	8000d22 <_svfiprintf_r+0x17e>
 8000c84:	b1b0      	cbz	r0, 8000cb4 <_svfiprintf_r+0x110>
 8000c86:	9207      	str	r2, [sp, #28]
 8000c88:	e014      	b.n	8000cb4 <_svfiprintf_r+0x110>
 8000c8a:	eba0 0308 	sub.w	r3, r0, r8
 8000c8e:	fa09 f303 	lsl.w	r3, r9, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	9304      	str	r3, [sp, #16]
 8000c96:	46a2      	mov	sl, r4
 8000c98:	e7d2      	b.n	8000c40 <_svfiprintf_r+0x9c>
 8000c9a:	9b03      	ldr	r3, [sp, #12]
 8000c9c:	1d19      	adds	r1, r3, #4
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	9103      	str	r1, [sp, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bfbb      	ittet	lt
 8000ca6:	425b      	neglt	r3, r3
 8000ca8:	f042 0202 	orrlt.w	r2, r2, #2
 8000cac:	9307      	strge	r3, [sp, #28]
 8000cae:	9307      	strlt	r3, [sp, #28]
 8000cb0:	bfb8      	it	lt
 8000cb2:	9204      	strlt	r2, [sp, #16]
 8000cb4:	7823      	ldrb	r3, [r4, #0]
 8000cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cb8:	d10c      	bne.n	8000cd4 <_svfiprintf_r+0x130>
 8000cba:	7863      	ldrb	r3, [r4, #1]
 8000cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8000cbe:	d135      	bne.n	8000d2c <_svfiprintf_r+0x188>
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	1d1a      	adds	r2, r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	9203      	str	r2, [sp, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bfb8      	it	lt
 8000ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cd0:	3402      	adds	r4, #2
 8000cd2:	9305      	str	r3, [sp, #20]
 8000cd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000da0 <_svfiprintf_r+0x1fc>
 8000cd8:	7821      	ldrb	r1, [r4, #0]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	4650      	mov	r0, sl
 8000cde:	f7ff fa8f 	bl	8000200 <memchr>
 8000ce2:	b140      	cbz	r0, 8000cf6 <_svfiprintf_r+0x152>
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	eba0 000a 	sub.w	r0, r0, sl
 8000cea:	fa03 f000 	lsl.w	r0, r3, r0
 8000cee:	9b04      	ldr	r3, [sp, #16]
 8000cf0:	4303      	orrs	r3, r0
 8000cf2:	3401      	adds	r4, #1
 8000cf4:	9304      	str	r3, [sp, #16]
 8000cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cfa:	4826      	ldr	r0, [pc, #152]	; (8000d94 <_svfiprintf_r+0x1f0>)
 8000cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d00:	2206      	movs	r2, #6
 8000d02:	f7ff fa7d 	bl	8000200 <memchr>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d038      	beq.n	8000d7c <_svfiprintf_r+0x1d8>
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <_svfiprintf_r+0x1f4>)
 8000d0c:	bb1b      	cbnz	r3, 8000d56 <_svfiprintf_r+0x1b2>
 8000d0e:	9b03      	ldr	r3, [sp, #12]
 8000d10:	3307      	adds	r3, #7
 8000d12:	f023 0307 	bic.w	r3, r3, #7
 8000d16:	3308      	adds	r3, #8
 8000d18:	9303      	str	r3, [sp, #12]
 8000d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d1c:	4433      	add	r3, r6
 8000d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d20:	e767      	b.n	8000bf2 <_svfiprintf_r+0x4e>
 8000d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d26:	460c      	mov	r4, r1
 8000d28:	2001      	movs	r0, #1
 8000d2a:	e7a5      	b.n	8000c78 <_svfiprintf_r+0xd4>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	3401      	adds	r4, #1
 8000d30:	9305      	str	r3, [sp, #20]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 0c0a 	mov.w	ip, #10
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d3e:	3a30      	subs	r2, #48	; 0x30
 8000d40:	2a09      	cmp	r2, #9
 8000d42:	d903      	bls.n	8000d4c <_svfiprintf_r+0x1a8>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0c5      	beq.n	8000cd4 <_svfiprintf_r+0x130>
 8000d48:	9105      	str	r1, [sp, #20]
 8000d4a:	e7c3      	b.n	8000cd4 <_svfiprintf_r+0x130>
 8000d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d50:	4604      	mov	r4, r0
 8000d52:	2301      	movs	r3, #1
 8000d54:	e7f0      	b.n	8000d38 <_svfiprintf_r+0x194>
 8000d56:	ab03      	add	r3, sp, #12
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	462a      	mov	r2, r5
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <_svfiprintf_r+0x1f8>)
 8000d5e:	a904      	add	r1, sp, #16
 8000d60:	4638      	mov	r0, r7
 8000d62:	f3af 8000 	nop.w
 8000d66:	1c42      	adds	r2, r0, #1
 8000d68:	4606      	mov	r6, r0
 8000d6a:	d1d6      	bne.n	8000d1a <_svfiprintf_r+0x176>
 8000d6c:	89ab      	ldrh	r3, [r5, #12]
 8000d6e:	065b      	lsls	r3, r3, #25
 8000d70:	f53f af2c 	bmi.w	8000bcc <_svfiprintf_r+0x28>
 8000d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d76:	b01d      	add	sp, #116	; 0x74
 8000d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7c:	ab03      	add	r3, sp, #12
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	462a      	mov	r2, r5
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <_svfiprintf_r+0x1f8>)
 8000d84:	a904      	add	r1, sp, #16
 8000d86:	4638      	mov	r0, r7
 8000d88:	f000 fa4c 	bl	8001224 <_printf_i>
 8000d8c:	e7eb      	b.n	8000d66 <_svfiprintf_r+0x1c2>
 8000d8e:	bf00      	nop
 8000d90:	08001cd8 	.word	0x08001cd8
 8000d94:	08001ce2 	.word	0x08001ce2
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	08000aed 	.word	0x08000aed
 8000da0:	08001cde 	.word	0x08001cde

08000da4 <_sungetc_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	1c4b      	adds	r3, r1, #1
 8000da8:	4614      	mov	r4, r2
 8000daa:	d103      	bne.n	8000db4 <_sungetc_r+0x10>
 8000dac:	f04f 35ff 	mov.w	r5, #4294967295
 8000db0:	4628      	mov	r0, r5
 8000db2:	bd38      	pop	{r3, r4, r5, pc}
 8000db4:	8993      	ldrh	r3, [r2, #12]
 8000db6:	f023 0320 	bic.w	r3, r3, #32
 8000dba:	8193      	strh	r3, [r2, #12]
 8000dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dbe:	6852      	ldr	r2, [r2, #4]
 8000dc0:	b2cd      	uxtb	r5, r1
 8000dc2:	b18b      	cbz	r3, 8000de8 <_sungetc_r+0x44>
 8000dc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	dd08      	ble.n	8000ddc <_sungetc_r+0x38>
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	1e5a      	subs	r2, r3, #1
 8000dce:	6022      	str	r2, [r4, #0]
 8000dd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000dd4:	6863      	ldr	r3, [r4, #4]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	6063      	str	r3, [r4, #4]
 8000dda:	e7e9      	b.n	8000db0 <_sungetc_r+0xc>
 8000ddc:	4621      	mov	r1, r4
 8000dde:	f000 fdc9 	bl	8001974 <__submore>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d0f1      	beq.n	8000dca <_sungetc_r+0x26>
 8000de6:	e7e1      	b.n	8000dac <_sungetc_r+0x8>
 8000de8:	6921      	ldr	r1, [r4, #16]
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	b151      	cbz	r1, 8000e04 <_sungetc_r+0x60>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d208      	bcs.n	8000e04 <_sungetc_r+0x60>
 8000df2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000df6:	42a9      	cmp	r1, r5
 8000df8:	d104      	bne.n	8000e04 <_sungetc_r+0x60>
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	3201      	adds	r2, #1
 8000dfe:	6023      	str	r3, [r4, #0]
 8000e00:	6062      	str	r2, [r4, #4]
 8000e02:	e7d5      	b.n	8000db0 <_sungetc_r+0xc>
 8000e04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8000e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63a3      	str	r3, [r4, #56]	; 0x38
 8000e12:	4623      	mov	r3, r4
 8000e14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e7dc      	b.n	8000dd8 <_sungetc_r+0x34>

08000e1e <__ssrefill_r>:
 8000e1e:	b510      	push	{r4, lr}
 8000e20:	460c      	mov	r4, r1
 8000e22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000e24:	b169      	cbz	r1, 8000e42 <__ssrefill_r+0x24>
 8000e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d001      	beq.n	8000e32 <__ssrefill_r+0x14>
 8000e2e:	f000 fe05 	bl	8001a3c <_free_r>
 8000e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e34:	6063      	str	r3, [r4, #4]
 8000e36:	2000      	movs	r0, #0
 8000e38:	6360      	str	r0, [r4, #52]	; 0x34
 8000e3a:	b113      	cbz	r3, 8000e42 <__ssrefill_r+0x24>
 8000e3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e3e:	6023      	str	r3, [r4, #0]
 8000e40:	bd10      	pop	{r4, pc}
 8000e42:	6923      	ldr	r3, [r4, #16]
 8000e44:	6023      	str	r3, [r4, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	6063      	str	r3, [r4, #4]
 8000e4a:	89a3      	ldrh	r3, [r4, #12]
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	81a3      	strh	r3, [r4, #12]
 8000e52:	f04f 30ff 	mov.w	r0, #4294967295
 8000e56:	e7f3      	b.n	8000e40 <__ssrefill_r+0x22>

08000e58 <__ssvfiscanf_r>:
 8000e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000e62:	2100      	movs	r1, #0
 8000e64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8000e68:	49a6      	ldr	r1, [pc, #664]	; (8001104 <__ssvfiscanf_r+0x2ac>)
 8000e6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8000e6c:	f10d 0804 	add.w	r8, sp, #4
 8000e70:	49a5      	ldr	r1, [pc, #660]	; (8001108 <__ssvfiscanf_r+0x2b0>)
 8000e72:	4fa6      	ldr	r7, [pc, #664]	; (800110c <__ssvfiscanf_r+0x2b4>)
 8000e74:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8001110 <__ssvfiscanf_r+0x2b8>
 8000e78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	7813      	ldrb	r3, [r2, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 815a 	beq.w	800113e <__ssvfiscanf_r+0x2e6>
 8000e8a:	5dd9      	ldrb	r1, [r3, r7]
 8000e8c:	f011 0108 	ands.w	r1, r1, #8
 8000e90:	f102 0501 	add.w	r5, r2, #1
 8000e94:	d019      	beq.n	8000eca <__ssvfiscanf_r+0x72>
 8000e96:	6863      	ldr	r3, [r4, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dd0f      	ble.n	8000ebc <__ssvfiscanf_r+0x64>
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	5cba      	ldrb	r2, [r7, r2]
 8000ea2:	0712      	lsls	r2, r2, #28
 8000ea4:	d401      	bmi.n	8000eaa <__ssvfiscanf_r+0x52>
 8000ea6:	462a      	mov	r2, r5
 8000ea8:	e7eb      	b.n	8000e82 <__ssvfiscanf_r+0x2a>
 8000eaa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000eac:	3201      	adds	r2, #1
 8000eae:	9245      	str	r2, [sp, #276]	; 0x114
 8000eb0:	6862      	ldr	r2, [r4, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	3a01      	subs	r2, #1
 8000eb6:	6062      	str	r2, [r4, #4]
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	e7ec      	b.n	8000e96 <__ssvfiscanf_r+0x3e>
 8000ebc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	4798      	blx	r3
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0e9      	beq.n	8000e9c <__ssvfiscanf_r+0x44>
 8000ec8:	e7ed      	b.n	8000ea6 <__ssvfiscanf_r+0x4e>
 8000eca:	2b25      	cmp	r3, #37	; 0x25
 8000ecc:	d012      	beq.n	8000ef4 <__ssvfiscanf_r+0x9c>
 8000ece:	469a      	mov	sl, r3
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f340 8091 	ble.w	8000ffa <__ssvfiscanf_r+0x1a2>
 8000ed8:	6822      	ldr	r2, [r4, #0]
 8000eda:	7813      	ldrb	r3, [r2, #0]
 8000edc:	4553      	cmp	r3, sl
 8000ede:	f040 812e 	bne.w	800113e <__ssvfiscanf_r+0x2e6>
 8000ee2:	6863      	ldr	r3, [r4, #4]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	6063      	str	r3, [r4, #4]
 8000ee8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8000eea:	3201      	adds	r2, #1
 8000eec:	3301      	adds	r3, #1
 8000eee:	6022      	str	r2, [r4, #0]
 8000ef0:	9345      	str	r3, [sp, #276]	; 0x114
 8000ef2:	e7d8      	b.n	8000ea6 <__ssvfiscanf_r+0x4e>
 8000ef4:	9141      	str	r1, [sp, #260]	; 0x104
 8000ef6:	9143      	str	r1, [sp, #268]	; 0x10c
 8000ef8:	7853      	ldrb	r3, [r2, #1]
 8000efa:	2b2a      	cmp	r3, #42	; 0x2a
 8000efc:	bf02      	ittt	eq
 8000efe:	2310      	moveq	r3, #16
 8000f00:	1c95      	addeq	r5, r2, #2
 8000f02:	9341      	streq	r3, [sp, #260]	; 0x104
 8000f04:	220a      	movs	r2, #10
 8000f06:	46aa      	mov	sl, r5
 8000f08:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8000f0c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	d91d      	bls.n	8000f50 <__ssvfiscanf_r+0xf8>
 8000f14:	487e      	ldr	r0, [pc, #504]	; (8001110 <__ssvfiscanf_r+0x2b8>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	f7ff f972 	bl	8000200 <memchr>
 8000f1c:	b140      	cbz	r0, 8000f30 <__ssvfiscanf_r+0xd8>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	eba0 0009 	sub.w	r0, r0, r9
 8000f24:	fa03 f000 	lsl.w	r0, r3, r0
 8000f28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8000f2a:	4318      	orrs	r0, r3
 8000f2c:	9041      	str	r0, [sp, #260]	; 0x104
 8000f2e:	4655      	mov	r5, sl
 8000f30:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000f34:	2b78      	cmp	r3, #120	; 0x78
 8000f36:	d806      	bhi.n	8000f46 <__ssvfiscanf_r+0xee>
 8000f38:	2b57      	cmp	r3, #87	; 0x57
 8000f3a:	d810      	bhi.n	8000f5e <__ssvfiscanf_r+0x106>
 8000f3c:	2b25      	cmp	r3, #37	; 0x25
 8000f3e:	d0c6      	beq.n	8000ece <__ssvfiscanf_r+0x76>
 8000f40:	d856      	bhi.n	8000ff0 <__ssvfiscanf_r+0x198>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d064      	beq.n	8001010 <__ssvfiscanf_r+0x1b8>
 8000f46:	2303      	movs	r3, #3
 8000f48:	9347      	str	r3, [sp, #284]	; 0x11c
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	9342      	str	r3, [sp, #264]	; 0x108
 8000f4e:	e071      	b.n	8001034 <__ssvfiscanf_r+0x1dc>
 8000f50:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8000f52:	fb02 1103 	mla	r1, r2, r3, r1
 8000f56:	3930      	subs	r1, #48	; 0x30
 8000f58:	9143      	str	r1, [sp, #268]	; 0x10c
 8000f5a:	4655      	mov	r5, sl
 8000f5c:	e7d3      	b.n	8000f06 <__ssvfiscanf_r+0xae>
 8000f5e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8000f62:	2a20      	cmp	r2, #32
 8000f64:	d8ef      	bhi.n	8000f46 <__ssvfiscanf_r+0xee>
 8000f66:	a101      	add	r1, pc, #4	; (adr r1, 8000f6c <__ssvfiscanf_r+0x114>)
 8000f68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000f6c:	0800101f 	.word	0x0800101f
 8000f70:	08000f47 	.word	0x08000f47
 8000f74:	08000f47 	.word	0x08000f47
 8000f78:	0800107d 	.word	0x0800107d
 8000f7c:	08000f47 	.word	0x08000f47
 8000f80:	08000f47 	.word	0x08000f47
 8000f84:	08000f47 	.word	0x08000f47
 8000f88:	08000f47 	.word	0x08000f47
 8000f8c:	08000f47 	.word	0x08000f47
 8000f90:	08000f47 	.word	0x08000f47
 8000f94:	08000f47 	.word	0x08000f47
 8000f98:	08001093 	.word	0x08001093
 8000f9c:	08001069 	.word	0x08001069
 8000fa0:	08000ff7 	.word	0x08000ff7
 8000fa4:	08000ff7 	.word	0x08000ff7
 8000fa8:	08000ff7 	.word	0x08000ff7
 8000fac:	08000f47 	.word	0x08000f47
 8000fb0:	0800106d 	.word	0x0800106d
 8000fb4:	08000f47 	.word	0x08000f47
 8000fb8:	08000f47 	.word	0x08000f47
 8000fbc:	08000f47 	.word	0x08000f47
 8000fc0:	08000f47 	.word	0x08000f47
 8000fc4:	080010a3 	.word	0x080010a3
 8000fc8:	08001075 	.word	0x08001075
 8000fcc:	08001017 	.word	0x08001017
 8000fd0:	08000f47 	.word	0x08000f47
 8000fd4:	08000f47 	.word	0x08000f47
 8000fd8:	0800109f 	.word	0x0800109f
 8000fdc:	08000f47 	.word	0x08000f47
 8000fe0:	08001069 	.word	0x08001069
 8000fe4:	08000f47 	.word	0x08000f47
 8000fe8:	08000f47 	.word	0x08000f47
 8000fec:	0800101f 	.word	0x0800101f
 8000ff0:	3b45      	subs	r3, #69	; 0x45
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d8a7      	bhi.n	8000f46 <__ssvfiscanf_r+0xee>
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	e01b      	b.n	8001032 <__ssvfiscanf_r+0x1da>
 8000ffa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	4630      	mov	r0, r6
 8001000:	4798      	blx	r3
 8001002:	2800      	cmp	r0, #0
 8001004:	f43f af68 	beq.w	8000ed8 <__ssvfiscanf_r+0x80>
 8001008:	9844      	ldr	r0, [sp, #272]	; 0x110
 800100a:	2800      	cmp	r0, #0
 800100c:	f040 808d 	bne.w	800112a <__ssvfiscanf_r+0x2d2>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	e08f      	b.n	8001136 <__ssvfiscanf_r+0x2de>
 8001016:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001018:	f042 0220 	orr.w	r2, r2, #32
 800101c:	9241      	str	r2, [sp, #260]	; 0x104
 800101e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001024:	9241      	str	r2, [sp, #260]	; 0x104
 8001026:	2210      	movs	r2, #16
 8001028:	2b6f      	cmp	r3, #111	; 0x6f
 800102a:	9242      	str	r2, [sp, #264]	; 0x108
 800102c:	bf34      	ite	cc
 800102e:	2303      	movcc	r3, #3
 8001030:	2304      	movcs	r3, #4
 8001032:	9347      	str	r3, [sp, #284]	; 0x11c
 8001034:	6863      	ldr	r3, [r4, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	dd42      	ble.n	80010c0 <__ssvfiscanf_r+0x268>
 800103a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800103c:	0659      	lsls	r1, r3, #25
 800103e:	d404      	bmi.n	800104a <__ssvfiscanf_r+0x1f2>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	5cba      	ldrb	r2, [r7, r2]
 8001046:	0712      	lsls	r2, r2, #28
 8001048:	d441      	bmi.n	80010ce <__ssvfiscanf_r+0x276>
 800104a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800104c:	2b02      	cmp	r3, #2
 800104e:	dc50      	bgt.n	80010f2 <__ssvfiscanf_r+0x29a>
 8001050:	466b      	mov	r3, sp
 8001052:	4622      	mov	r2, r4
 8001054:	a941      	add	r1, sp, #260	; 0x104
 8001056:	4630      	mov	r0, r6
 8001058:	f000 fa0a 	bl	8001470 <_scanf_chars>
 800105c:	2801      	cmp	r0, #1
 800105e:	d06e      	beq.n	800113e <__ssvfiscanf_r+0x2e6>
 8001060:	2802      	cmp	r0, #2
 8001062:	f47f af20 	bne.w	8000ea6 <__ssvfiscanf_r+0x4e>
 8001066:	e7cf      	b.n	8001008 <__ssvfiscanf_r+0x1b0>
 8001068:	220a      	movs	r2, #10
 800106a:	e7dd      	b.n	8001028 <__ssvfiscanf_r+0x1d0>
 800106c:	2300      	movs	r3, #0
 800106e:	9342      	str	r3, [sp, #264]	; 0x108
 8001070:	2303      	movs	r3, #3
 8001072:	e7de      	b.n	8001032 <__ssvfiscanf_r+0x1da>
 8001074:	2308      	movs	r3, #8
 8001076:	9342      	str	r3, [sp, #264]	; 0x108
 8001078:	2304      	movs	r3, #4
 800107a:	e7da      	b.n	8001032 <__ssvfiscanf_r+0x1da>
 800107c:	4629      	mov	r1, r5
 800107e:	4640      	mov	r0, r8
 8001080:	f000 fb48 	bl	8001714 <__sccl>
 8001084:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800108a:	9341      	str	r3, [sp, #260]	; 0x104
 800108c:	4605      	mov	r5, r0
 800108e:	2301      	movs	r3, #1
 8001090:	e7cf      	b.n	8001032 <__ssvfiscanf_r+0x1da>
 8001092:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001098:	9341      	str	r3, [sp, #260]	; 0x104
 800109a:	2300      	movs	r3, #0
 800109c:	e7c9      	b.n	8001032 <__ssvfiscanf_r+0x1da>
 800109e:	2302      	movs	r3, #2
 80010a0:	e7c7      	b.n	8001032 <__ssvfiscanf_r+0x1da>
 80010a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80010a4:	06c3      	lsls	r3, r0, #27
 80010a6:	f53f aefe 	bmi.w	8000ea6 <__ssvfiscanf_r+0x4e>
 80010aa:	9b00      	ldr	r3, [sp, #0]
 80010ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80010ae:	1d19      	adds	r1, r3, #4
 80010b0:	9100      	str	r1, [sp, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f010 0f01 	tst.w	r0, #1
 80010b8:	bf14      	ite	ne
 80010ba:	801a      	strhne	r2, [r3, #0]
 80010bc:	601a      	streq	r2, [r3, #0]
 80010be:	e6f2      	b.n	8000ea6 <__ssvfiscanf_r+0x4e>
 80010c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80010c2:	4621      	mov	r1, r4
 80010c4:	4630      	mov	r0, r6
 80010c6:	4798      	blx	r3
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d0b6      	beq.n	800103a <__ssvfiscanf_r+0x1e2>
 80010cc:	e79c      	b.n	8001008 <__ssvfiscanf_r+0x1b0>
 80010ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80010d0:	3201      	adds	r2, #1
 80010d2:	9245      	str	r2, [sp, #276]	; 0x114
 80010d4:	6862      	ldr	r2, [r4, #4]
 80010d6:	3a01      	subs	r2, #1
 80010d8:	2a00      	cmp	r2, #0
 80010da:	6062      	str	r2, [r4, #4]
 80010dc:	dd02      	ble.n	80010e4 <__ssvfiscanf_r+0x28c>
 80010de:	3301      	adds	r3, #1
 80010e0:	6023      	str	r3, [r4, #0]
 80010e2:	e7ad      	b.n	8001040 <__ssvfiscanf_r+0x1e8>
 80010e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80010e6:	4621      	mov	r1, r4
 80010e8:	4630      	mov	r0, r6
 80010ea:	4798      	blx	r3
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d0a7      	beq.n	8001040 <__ssvfiscanf_r+0x1e8>
 80010f0:	e78a      	b.n	8001008 <__ssvfiscanf_r+0x1b0>
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	dc0e      	bgt.n	8001114 <__ssvfiscanf_r+0x2bc>
 80010f6:	466b      	mov	r3, sp
 80010f8:	4622      	mov	r2, r4
 80010fa:	a941      	add	r1, sp, #260	; 0x104
 80010fc:	4630      	mov	r0, r6
 80010fe:	f000 fa11 	bl	8001524 <_scanf_i>
 8001102:	e7ab      	b.n	800105c <__ssvfiscanf_r+0x204>
 8001104:	08000da5 	.word	0x08000da5
 8001108:	08000e1f 	.word	0x08000e1f
 800110c:	08001d27 	.word	0x08001d27
 8001110:	08001cde 	.word	0x08001cde
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <__ssvfiscanf_r+0x2ec>)
 8001116:	2b00      	cmp	r3, #0
 8001118:	f43f aec5 	beq.w	8000ea6 <__ssvfiscanf_r+0x4e>
 800111c:	466b      	mov	r3, sp
 800111e:	4622      	mov	r2, r4
 8001120:	a941      	add	r1, sp, #260	; 0x104
 8001122:	4630      	mov	r0, r6
 8001124:	f3af 8000 	nop.w
 8001128:	e798      	b.n	800105c <__ssvfiscanf_r+0x204>
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001130:	bf18      	it	ne
 8001132:	f04f 30ff 	movne.w	r0, #4294967295
 8001136:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001140:	e7f9      	b.n	8001136 <__ssvfiscanf_r+0x2de>
 8001142:	bf00      	nop
 8001144:	00000000 	.word	0x00000000

08001148 <_printf_common>:
 8001148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800114c:	4616      	mov	r6, r2
 800114e:	4699      	mov	r9, r3
 8001150:	688a      	ldr	r2, [r1, #8]
 8001152:	690b      	ldr	r3, [r1, #16]
 8001154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001158:	4293      	cmp	r3, r2
 800115a:	bfb8      	it	lt
 800115c:	4613      	movlt	r3, r2
 800115e:	6033      	str	r3, [r6, #0]
 8001160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001164:	4607      	mov	r7, r0
 8001166:	460c      	mov	r4, r1
 8001168:	b10a      	cbz	r2, 800116e <_printf_common+0x26>
 800116a:	3301      	adds	r3, #1
 800116c:	6033      	str	r3, [r6, #0]
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	0699      	lsls	r1, r3, #26
 8001172:	bf42      	ittt	mi
 8001174:	6833      	ldrmi	r3, [r6, #0]
 8001176:	3302      	addmi	r3, #2
 8001178:	6033      	strmi	r3, [r6, #0]
 800117a:	6825      	ldr	r5, [r4, #0]
 800117c:	f015 0506 	ands.w	r5, r5, #6
 8001180:	d106      	bne.n	8001190 <_printf_common+0x48>
 8001182:	f104 0a19 	add.w	sl, r4, #25
 8001186:	68e3      	ldr	r3, [r4, #12]
 8001188:	6832      	ldr	r2, [r6, #0]
 800118a:	1a9b      	subs	r3, r3, r2
 800118c:	42ab      	cmp	r3, r5
 800118e:	dc26      	bgt.n	80011de <_printf_common+0x96>
 8001190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001194:	1e13      	subs	r3, r2, #0
 8001196:	6822      	ldr	r2, [r4, #0]
 8001198:	bf18      	it	ne
 800119a:	2301      	movne	r3, #1
 800119c:	0692      	lsls	r2, r2, #26
 800119e:	d42b      	bmi.n	80011f8 <_printf_common+0xb0>
 80011a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011a4:	4649      	mov	r1, r9
 80011a6:	4638      	mov	r0, r7
 80011a8:	47c0      	blx	r8
 80011aa:	3001      	adds	r0, #1
 80011ac:	d01e      	beq.n	80011ec <_printf_common+0xa4>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	68e5      	ldr	r5, [r4, #12]
 80011b2:	6832      	ldr	r2, [r6, #0]
 80011b4:	f003 0306 	and.w	r3, r3, #6
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	bf08      	it	eq
 80011bc:	1aad      	subeq	r5, r5, r2
 80011be:	68a3      	ldr	r3, [r4, #8]
 80011c0:	6922      	ldr	r2, [r4, #16]
 80011c2:	bf0c      	ite	eq
 80011c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011c8:	2500      	movne	r5, #0
 80011ca:	4293      	cmp	r3, r2
 80011cc:	bfc4      	itt	gt
 80011ce:	1a9b      	subgt	r3, r3, r2
 80011d0:	18ed      	addgt	r5, r5, r3
 80011d2:	2600      	movs	r6, #0
 80011d4:	341a      	adds	r4, #26
 80011d6:	42b5      	cmp	r5, r6
 80011d8:	d11a      	bne.n	8001210 <_printf_common+0xc8>
 80011da:	2000      	movs	r0, #0
 80011dc:	e008      	b.n	80011f0 <_printf_common+0xa8>
 80011de:	2301      	movs	r3, #1
 80011e0:	4652      	mov	r2, sl
 80011e2:	4649      	mov	r1, r9
 80011e4:	4638      	mov	r0, r7
 80011e6:	47c0      	blx	r8
 80011e8:	3001      	adds	r0, #1
 80011ea:	d103      	bne.n	80011f4 <_printf_common+0xac>
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f4:	3501      	adds	r5, #1
 80011f6:	e7c6      	b.n	8001186 <_printf_common+0x3e>
 80011f8:	18e1      	adds	r1, r4, r3
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	2030      	movs	r0, #48	; 0x30
 80011fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001202:	4422      	add	r2, r4
 8001204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800120c:	3302      	adds	r3, #2
 800120e:	e7c7      	b.n	80011a0 <_printf_common+0x58>
 8001210:	2301      	movs	r3, #1
 8001212:	4622      	mov	r2, r4
 8001214:	4649      	mov	r1, r9
 8001216:	4638      	mov	r0, r7
 8001218:	47c0      	blx	r8
 800121a:	3001      	adds	r0, #1
 800121c:	d0e6      	beq.n	80011ec <_printf_common+0xa4>
 800121e:	3601      	adds	r6, #1
 8001220:	e7d9      	b.n	80011d6 <_printf_common+0x8e>
	...

08001224 <_printf_i>:
 8001224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001228:	7e0f      	ldrb	r7, [r1, #24]
 800122a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800122c:	2f78      	cmp	r7, #120	; 0x78
 800122e:	4691      	mov	r9, r2
 8001230:	4680      	mov	r8, r0
 8001232:	460c      	mov	r4, r1
 8001234:	469a      	mov	sl, r3
 8001236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800123a:	d807      	bhi.n	800124c <_printf_i+0x28>
 800123c:	2f62      	cmp	r7, #98	; 0x62
 800123e:	d80a      	bhi.n	8001256 <_printf_i+0x32>
 8001240:	2f00      	cmp	r7, #0
 8001242:	f000 80d8 	beq.w	80013f6 <_printf_i+0x1d2>
 8001246:	2f58      	cmp	r7, #88	; 0x58
 8001248:	f000 80a3 	beq.w	8001392 <_printf_i+0x16e>
 800124c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001254:	e03a      	b.n	80012cc <_printf_i+0xa8>
 8001256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800125a:	2b15      	cmp	r3, #21
 800125c:	d8f6      	bhi.n	800124c <_printf_i+0x28>
 800125e:	a101      	add	r1, pc, #4	; (adr r1, 8001264 <_printf_i+0x40>)
 8001260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001264:	080012bd 	.word	0x080012bd
 8001268:	080012d1 	.word	0x080012d1
 800126c:	0800124d 	.word	0x0800124d
 8001270:	0800124d 	.word	0x0800124d
 8001274:	0800124d 	.word	0x0800124d
 8001278:	0800124d 	.word	0x0800124d
 800127c:	080012d1 	.word	0x080012d1
 8001280:	0800124d 	.word	0x0800124d
 8001284:	0800124d 	.word	0x0800124d
 8001288:	0800124d 	.word	0x0800124d
 800128c:	0800124d 	.word	0x0800124d
 8001290:	080013dd 	.word	0x080013dd
 8001294:	08001301 	.word	0x08001301
 8001298:	080013bf 	.word	0x080013bf
 800129c:	0800124d 	.word	0x0800124d
 80012a0:	0800124d 	.word	0x0800124d
 80012a4:	080013ff 	.word	0x080013ff
 80012a8:	0800124d 	.word	0x0800124d
 80012ac:	08001301 	.word	0x08001301
 80012b0:	0800124d 	.word	0x0800124d
 80012b4:	0800124d 	.word	0x0800124d
 80012b8:	080013c7 	.word	0x080013c7
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	1d1a      	adds	r2, r3, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	602a      	str	r2, [r5, #0]
 80012c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0a3      	b.n	8001418 <_printf_i+0x1f4>
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	6829      	ldr	r1, [r5, #0]
 80012d4:	0606      	lsls	r6, r0, #24
 80012d6:	f101 0304 	add.w	r3, r1, #4
 80012da:	d50a      	bpl.n	80012f2 <_printf_i+0xce>
 80012dc:	680e      	ldr	r6, [r1, #0]
 80012de:	602b      	str	r3, [r5, #0]
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	da03      	bge.n	80012ec <_printf_i+0xc8>
 80012e4:	232d      	movs	r3, #45	; 0x2d
 80012e6:	4276      	negs	r6, r6
 80012e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012ec:	485e      	ldr	r0, [pc, #376]	; (8001468 <_printf_i+0x244>)
 80012ee:	230a      	movs	r3, #10
 80012f0:	e019      	b.n	8001326 <_printf_i+0x102>
 80012f2:	680e      	ldr	r6, [r1, #0]
 80012f4:	602b      	str	r3, [r5, #0]
 80012f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80012fa:	bf18      	it	ne
 80012fc:	b236      	sxthne	r6, r6
 80012fe:	e7ef      	b.n	80012e0 <_printf_i+0xbc>
 8001300:	682b      	ldr	r3, [r5, #0]
 8001302:	6820      	ldr	r0, [r4, #0]
 8001304:	1d19      	adds	r1, r3, #4
 8001306:	6029      	str	r1, [r5, #0]
 8001308:	0601      	lsls	r1, r0, #24
 800130a:	d501      	bpl.n	8001310 <_printf_i+0xec>
 800130c:	681e      	ldr	r6, [r3, #0]
 800130e:	e002      	b.n	8001316 <_printf_i+0xf2>
 8001310:	0646      	lsls	r6, r0, #25
 8001312:	d5fb      	bpl.n	800130c <_printf_i+0xe8>
 8001314:	881e      	ldrh	r6, [r3, #0]
 8001316:	4854      	ldr	r0, [pc, #336]	; (8001468 <_printf_i+0x244>)
 8001318:	2f6f      	cmp	r7, #111	; 0x6f
 800131a:	bf0c      	ite	eq
 800131c:	2308      	moveq	r3, #8
 800131e:	230a      	movne	r3, #10
 8001320:	2100      	movs	r1, #0
 8001322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001326:	6865      	ldr	r5, [r4, #4]
 8001328:	60a5      	str	r5, [r4, #8]
 800132a:	2d00      	cmp	r5, #0
 800132c:	bfa2      	ittt	ge
 800132e:	6821      	ldrge	r1, [r4, #0]
 8001330:	f021 0104 	bicge.w	r1, r1, #4
 8001334:	6021      	strge	r1, [r4, #0]
 8001336:	b90e      	cbnz	r6, 800133c <_printf_i+0x118>
 8001338:	2d00      	cmp	r5, #0
 800133a:	d04d      	beq.n	80013d8 <_printf_i+0x1b4>
 800133c:	4615      	mov	r5, r2
 800133e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001342:	fb03 6711 	mls	r7, r3, r1, r6
 8001346:	5dc7      	ldrb	r7, [r0, r7]
 8001348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800134c:	4637      	mov	r7, r6
 800134e:	42bb      	cmp	r3, r7
 8001350:	460e      	mov	r6, r1
 8001352:	d9f4      	bls.n	800133e <_printf_i+0x11a>
 8001354:	2b08      	cmp	r3, #8
 8001356:	d10b      	bne.n	8001370 <_printf_i+0x14c>
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	07de      	lsls	r6, r3, #31
 800135c:	d508      	bpl.n	8001370 <_printf_i+0x14c>
 800135e:	6923      	ldr	r3, [r4, #16]
 8001360:	6861      	ldr	r1, [r4, #4]
 8001362:	4299      	cmp	r1, r3
 8001364:	bfde      	ittt	le
 8001366:	2330      	movle	r3, #48	; 0x30
 8001368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800136c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001370:	1b52      	subs	r2, r2, r5
 8001372:	6122      	str	r2, [r4, #16]
 8001374:	f8cd a000 	str.w	sl, [sp]
 8001378:	464b      	mov	r3, r9
 800137a:	aa03      	add	r2, sp, #12
 800137c:	4621      	mov	r1, r4
 800137e:	4640      	mov	r0, r8
 8001380:	f7ff fee2 	bl	8001148 <_printf_common>
 8001384:	3001      	adds	r0, #1
 8001386:	d14c      	bne.n	8001422 <_printf_i+0x1fe>
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	b004      	add	sp, #16
 800138e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001392:	4835      	ldr	r0, [pc, #212]	; (8001468 <_printf_i+0x244>)
 8001394:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001398:	6829      	ldr	r1, [r5, #0]
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	f851 6b04 	ldr.w	r6, [r1], #4
 80013a0:	6029      	str	r1, [r5, #0]
 80013a2:	061d      	lsls	r5, r3, #24
 80013a4:	d514      	bpl.n	80013d0 <_printf_i+0x1ac>
 80013a6:	07df      	lsls	r7, r3, #31
 80013a8:	bf44      	itt	mi
 80013aa:	f043 0320 	orrmi.w	r3, r3, #32
 80013ae:	6023      	strmi	r3, [r4, #0]
 80013b0:	b91e      	cbnz	r6, 80013ba <_printf_i+0x196>
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	f023 0320 	bic.w	r3, r3, #32
 80013b8:	6023      	str	r3, [r4, #0]
 80013ba:	2310      	movs	r3, #16
 80013bc:	e7b0      	b.n	8001320 <_printf_i+0xfc>
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	f043 0320 	orr.w	r3, r3, #32
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	2378      	movs	r3, #120	; 0x78
 80013c8:	4828      	ldr	r0, [pc, #160]	; (800146c <_printf_i+0x248>)
 80013ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80013ce:	e7e3      	b.n	8001398 <_printf_i+0x174>
 80013d0:	0659      	lsls	r1, r3, #25
 80013d2:	bf48      	it	mi
 80013d4:	b2b6      	uxthmi	r6, r6
 80013d6:	e7e6      	b.n	80013a6 <_printf_i+0x182>
 80013d8:	4615      	mov	r5, r2
 80013da:	e7bb      	b.n	8001354 <_printf_i+0x130>
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	6826      	ldr	r6, [r4, #0]
 80013e0:	6961      	ldr	r1, [r4, #20]
 80013e2:	1d18      	adds	r0, r3, #4
 80013e4:	6028      	str	r0, [r5, #0]
 80013e6:	0635      	lsls	r5, r6, #24
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	d501      	bpl.n	80013f0 <_printf_i+0x1cc>
 80013ec:	6019      	str	r1, [r3, #0]
 80013ee:	e002      	b.n	80013f6 <_printf_i+0x1d2>
 80013f0:	0670      	lsls	r0, r6, #25
 80013f2:	d5fb      	bpl.n	80013ec <_printf_i+0x1c8>
 80013f4:	8019      	strh	r1, [r3, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	6123      	str	r3, [r4, #16]
 80013fa:	4615      	mov	r5, r2
 80013fc:	e7ba      	b.n	8001374 <_printf_i+0x150>
 80013fe:	682b      	ldr	r3, [r5, #0]
 8001400:	1d1a      	adds	r2, r3, #4
 8001402:	602a      	str	r2, [r5, #0]
 8001404:	681d      	ldr	r5, [r3, #0]
 8001406:	6862      	ldr	r2, [r4, #4]
 8001408:	2100      	movs	r1, #0
 800140a:	4628      	mov	r0, r5
 800140c:	f7fe fef8 	bl	8000200 <memchr>
 8001410:	b108      	cbz	r0, 8001416 <_printf_i+0x1f2>
 8001412:	1b40      	subs	r0, r0, r5
 8001414:	6060      	str	r0, [r4, #4]
 8001416:	6863      	ldr	r3, [r4, #4]
 8001418:	6123      	str	r3, [r4, #16]
 800141a:	2300      	movs	r3, #0
 800141c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001420:	e7a8      	b.n	8001374 <_printf_i+0x150>
 8001422:	6923      	ldr	r3, [r4, #16]
 8001424:	462a      	mov	r2, r5
 8001426:	4649      	mov	r1, r9
 8001428:	4640      	mov	r0, r8
 800142a:	47d0      	blx	sl
 800142c:	3001      	adds	r0, #1
 800142e:	d0ab      	beq.n	8001388 <_printf_i+0x164>
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	079b      	lsls	r3, r3, #30
 8001434:	d413      	bmi.n	800145e <_printf_i+0x23a>
 8001436:	68e0      	ldr	r0, [r4, #12]
 8001438:	9b03      	ldr	r3, [sp, #12]
 800143a:	4298      	cmp	r0, r3
 800143c:	bfb8      	it	lt
 800143e:	4618      	movlt	r0, r3
 8001440:	e7a4      	b.n	800138c <_printf_i+0x168>
 8001442:	2301      	movs	r3, #1
 8001444:	4632      	mov	r2, r6
 8001446:	4649      	mov	r1, r9
 8001448:	4640      	mov	r0, r8
 800144a:	47d0      	blx	sl
 800144c:	3001      	adds	r0, #1
 800144e:	d09b      	beq.n	8001388 <_printf_i+0x164>
 8001450:	3501      	adds	r5, #1
 8001452:	68e3      	ldr	r3, [r4, #12]
 8001454:	9903      	ldr	r1, [sp, #12]
 8001456:	1a5b      	subs	r3, r3, r1
 8001458:	42ab      	cmp	r3, r5
 800145a:	dcf2      	bgt.n	8001442 <_printf_i+0x21e>
 800145c:	e7eb      	b.n	8001436 <_printf_i+0x212>
 800145e:	2500      	movs	r5, #0
 8001460:	f104 0619 	add.w	r6, r4, #25
 8001464:	e7f5      	b.n	8001452 <_printf_i+0x22e>
 8001466:	bf00      	nop
 8001468:	08001ce9 	.word	0x08001ce9
 800146c:	08001cfa 	.word	0x08001cfa

08001470 <_scanf_chars>:
 8001470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001474:	4615      	mov	r5, r2
 8001476:	688a      	ldr	r2, [r1, #8]
 8001478:	4680      	mov	r8, r0
 800147a:	460c      	mov	r4, r1
 800147c:	b932      	cbnz	r2, 800148c <_scanf_chars+0x1c>
 800147e:	698a      	ldr	r2, [r1, #24]
 8001480:	2a00      	cmp	r2, #0
 8001482:	bf0c      	ite	eq
 8001484:	2201      	moveq	r2, #1
 8001486:	f04f 32ff 	movne.w	r2, #4294967295
 800148a:	608a      	str	r2, [r1, #8]
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8001520 <_scanf_chars+0xb0>
 8001492:	06d1      	lsls	r1, r2, #27
 8001494:	bf5f      	itttt	pl
 8001496:	681a      	ldrpl	r2, [r3, #0]
 8001498:	1d11      	addpl	r1, r2, #4
 800149a:	6019      	strpl	r1, [r3, #0]
 800149c:	6816      	ldrpl	r6, [r2, #0]
 800149e:	2700      	movs	r7, #0
 80014a0:	69a0      	ldr	r0, [r4, #24]
 80014a2:	b188      	cbz	r0, 80014c8 <_scanf_chars+0x58>
 80014a4:	2801      	cmp	r0, #1
 80014a6:	d107      	bne.n	80014b8 <_scanf_chars+0x48>
 80014a8:	682a      	ldr	r2, [r5, #0]
 80014aa:	7811      	ldrb	r1, [r2, #0]
 80014ac:	6962      	ldr	r2, [r4, #20]
 80014ae:	5c52      	ldrb	r2, [r2, r1]
 80014b0:	b952      	cbnz	r2, 80014c8 <_scanf_chars+0x58>
 80014b2:	2f00      	cmp	r7, #0
 80014b4:	d031      	beq.n	800151a <_scanf_chars+0xaa>
 80014b6:	e022      	b.n	80014fe <_scanf_chars+0x8e>
 80014b8:	2802      	cmp	r0, #2
 80014ba:	d120      	bne.n	80014fe <_scanf_chars+0x8e>
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80014c4:	071b      	lsls	r3, r3, #28
 80014c6:	d41a      	bmi.n	80014fe <_scanf_chars+0x8e>
 80014c8:	6823      	ldr	r3, [r4, #0]
 80014ca:	06da      	lsls	r2, r3, #27
 80014cc:	bf5e      	ittt	pl
 80014ce:	682b      	ldrpl	r3, [r5, #0]
 80014d0:	781b      	ldrbpl	r3, [r3, #0]
 80014d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80014d6:	682a      	ldr	r2, [r5, #0]
 80014d8:	686b      	ldr	r3, [r5, #4]
 80014da:	3201      	adds	r2, #1
 80014dc:	602a      	str	r2, [r5, #0]
 80014de:	68a2      	ldr	r2, [r4, #8]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	3a01      	subs	r2, #1
 80014e4:	606b      	str	r3, [r5, #4]
 80014e6:	3701      	adds	r7, #1
 80014e8:	60a2      	str	r2, [r4, #8]
 80014ea:	b142      	cbz	r2, 80014fe <_scanf_chars+0x8e>
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	dcd7      	bgt.n	80014a0 <_scanf_chars+0x30>
 80014f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80014f4:	4629      	mov	r1, r5
 80014f6:	4640      	mov	r0, r8
 80014f8:	4798      	blx	r3
 80014fa:	2800      	cmp	r0, #0
 80014fc:	d0d0      	beq.n	80014a0 <_scanf_chars+0x30>
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	f013 0310 	ands.w	r3, r3, #16
 8001504:	d105      	bne.n	8001512 <_scanf_chars+0xa2>
 8001506:	68e2      	ldr	r2, [r4, #12]
 8001508:	3201      	adds	r2, #1
 800150a:	60e2      	str	r2, [r4, #12]
 800150c:	69a2      	ldr	r2, [r4, #24]
 800150e:	b102      	cbz	r2, 8001512 <_scanf_chars+0xa2>
 8001510:	7033      	strb	r3, [r6, #0]
 8001512:	6923      	ldr	r3, [r4, #16]
 8001514:	443b      	add	r3, r7
 8001516:	6123      	str	r3, [r4, #16]
 8001518:	2000      	movs	r0, #0
 800151a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800151e:	bf00      	nop
 8001520:	08001d27 	.word	0x08001d27

08001524 <_scanf_i>:
 8001524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001528:	4698      	mov	r8, r3
 800152a:	4b76      	ldr	r3, [pc, #472]	; (8001704 <_scanf_i+0x1e0>)
 800152c:	460c      	mov	r4, r1
 800152e:	4682      	mov	sl, r0
 8001530:	4616      	mov	r6, r2
 8001532:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001536:	b087      	sub	sp, #28
 8001538:	ab03      	add	r3, sp, #12
 800153a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800153e:	4b72      	ldr	r3, [pc, #456]	; (8001708 <_scanf_i+0x1e4>)
 8001540:	69a1      	ldr	r1, [r4, #24]
 8001542:	4a72      	ldr	r2, [pc, #456]	; (800170c <_scanf_i+0x1e8>)
 8001544:	2903      	cmp	r1, #3
 8001546:	bf18      	it	ne
 8001548:	461a      	movne	r2, r3
 800154a:	68a3      	ldr	r3, [r4, #8]
 800154c:	9201      	str	r2, [sp, #4]
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8001554:	bf88      	it	hi
 8001556:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800155a:	4627      	mov	r7, r4
 800155c:	bf82      	ittt	hi
 800155e:	eb03 0905 	addhi.w	r9, r3, r5
 8001562:	f240 135d 	movwhi	r3, #349	; 0x15d
 8001566:	60a3      	strhi	r3, [r4, #8]
 8001568:	f857 3b1c 	ldr.w	r3, [r7], #28
 800156c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8001570:	bf98      	it	ls
 8001572:	f04f 0900 	movls.w	r9, #0
 8001576:	6023      	str	r3, [r4, #0]
 8001578:	463d      	mov	r5, r7
 800157a:	f04f 0b00 	mov.w	fp, #0
 800157e:	6831      	ldr	r1, [r6, #0]
 8001580:	ab03      	add	r3, sp, #12
 8001582:	7809      	ldrb	r1, [r1, #0]
 8001584:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001588:	2202      	movs	r2, #2
 800158a:	f7fe fe39 	bl	8000200 <memchr>
 800158e:	b328      	cbz	r0, 80015dc <_scanf_i+0xb8>
 8001590:	f1bb 0f01 	cmp.w	fp, #1
 8001594:	d159      	bne.n	800164a <_scanf_i+0x126>
 8001596:	6862      	ldr	r2, [r4, #4]
 8001598:	b92a      	cbnz	r2, 80015a6 <_scanf_i+0x82>
 800159a:	6822      	ldr	r2, [r4, #0]
 800159c:	2308      	movs	r3, #8
 800159e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a2:	6063      	str	r3, [r4, #4]
 80015a4:	6022      	str	r2, [r4, #0]
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80015ac:	6022      	str	r2, [r4, #0]
 80015ae:	68a2      	ldr	r2, [r4, #8]
 80015b0:	1e51      	subs	r1, r2, #1
 80015b2:	60a1      	str	r1, [r4, #8]
 80015b4:	b192      	cbz	r2, 80015dc <_scanf_i+0xb8>
 80015b6:	6832      	ldr	r2, [r6, #0]
 80015b8:	1c51      	adds	r1, r2, #1
 80015ba:	6031      	str	r1, [r6, #0]
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	f805 2b01 	strb.w	r2, [r5], #1
 80015c2:	6872      	ldr	r2, [r6, #4]
 80015c4:	3a01      	subs	r2, #1
 80015c6:	2a00      	cmp	r2, #0
 80015c8:	6072      	str	r2, [r6, #4]
 80015ca:	dc07      	bgt.n	80015dc <_scanf_i+0xb8>
 80015cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80015d0:	4631      	mov	r1, r6
 80015d2:	4650      	mov	r0, sl
 80015d4:	4790      	blx	r2
 80015d6:	2800      	cmp	r0, #0
 80015d8:	f040 8085 	bne.w	80016e6 <_scanf_i+0x1c2>
 80015dc:	f10b 0b01 	add.w	fp, fp, #1
 80015e0:	f1bb 0f03 	cmp.w	fp, #3
 80015e4:	d1cb      	bne.n	800157e <_scanf_i+0x5a>
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	b90b      	cbnz	r3, 80015ee <_scanf_i+0xca>
 80015ea:	230a      	movs	r3, #10
 80015ec:	6063      	str	r3, [r4, #4]
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	4947      	ldr	r1, [pc, #284]	; (8001710 <_scanf_i+0x1ec>)
 80015f2:	6960      	ldr	r0, [r4, #20]
 80015f4:	1ac9      	subs	r1, r1, r3
 80015f6:	f000 f88d 	bl	8001714 <__sccl>
 80015fa:	f04f 0b00 	mov.w	fp, #0
 80015fe:	68a3      	ldr	r3, [r4, #8]
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d03d      	beq.n	8001682 <_scanf_i+0x15e>
 8001606:	6831      	ldr	r1, [r6, #0]
 8001608:	6960      	ldr	r0, [r4, #20]
 800160a:	f891 c000 	ldrb.w	ip, [r1]
 800160e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001612:	2800      	cmp	r0, #0
 8001614:	d035      	beq.n	8001682 <_scanf_i+0x15e>
 8001616:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800161a:	d124      	bne.n	8001666 <_scanf_i+0x142>
 800161c:	0510      	lsls	r0, r2, #20
 800161e:	d522      	bpl.n	8001666 <_scanf_i+0x142>
 8001620:	f10b 0b01 	add.w	fp, fp, #1
 8001624:	f1b9 0f00 	cmp.w	r9, #0
 8001628:	d003      	beq.n	8001632 <_scanf_i+0x10e>
 800162a:	3301      	adds	r3, #1
 800162c:	f109 39ff 	add.w	r9, r9, #4294967295
 8001630:	60a3      	str	r3, [r4, #8]
 8001632:	6873      	ldr	r3, [r6, #4]
 8001634:	3b01      	subs	r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	6073      	str	r3, [r6, #4]
 800163a:	dd1b      	ble.n	8001674 <_scanf_i+0x150>
 800163c:	6833      	ldr	r3, [r6, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	6033      	str	r3, [r6, #0]
 8001642:	68a3      	ldr	r3, [r4, #8]
 8001644:	3b01      	subs	r3, #1
 8001646:	60a3      	str	r3, [r4, #8]
 8001648:	e7d9      	b.n	80015fe <_scanf_i+0xda>
 800164a:	f1bb 0f02 	cmp.w	fp, #2
 800164e:	d1ae      	bne.n	80015ae <_scanf_i+0x8a>
 8001650:	6822      	ldr	r2, [r4, #0]
 8001652:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8001656:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800165a:	d1bf      	bne.n	80015dc <_scanf_i+0xb8>
 800165c:	2310      	movs	r3, #16
 800165e:	6063      	str	r3, [r4, #4]
 8001660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001664:	e7a2      	b.n	80015ac <_scanf_i+0x88>
 8001666:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800166a:	6022      	str	r2, [r4, #0]
 800166c:	780b      	ldrb	r3, [r1, #0]
 800166e:	f805 3b01 	strb.w	r3, [r5], #1
 8001672:	e7de      	b.n	8001632 <_scanf_i+0x10e>
 8001674:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001678:	4631      	mov	r1, r6
 800167a:	4650      	mov	r0, sl
 800167c:	4798      	blx	r3
 800167e:	2800      	cmp	r0, #0
 8001680:	d0df      	beq.n	8001642 <_scanf_i+0x11e>
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	05db      	lsls	r3, r3, #23
 8001686:	d50d      	bpl.n	80016a4 <_scanf_i+0x180>
 8001688:	42bd      	cmp	r5, r7
 800168a:	d909      	bls.n	80016a0 <_scanf_i+0x17c>
 800168c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001694:	4632      	mov	r2, r6
 8001696:	4650      	mov	r0, sl
 8001698:	4798      	blx	r3
 800169a:	f105 39ff 	add.w	r9, r5, #4294967295
 800169e:	464d      	mov	r5, r9
 80016a0:	42bd      	cmp	r5, r7
 80016a2:	d02d      	beq.n	8001700 <_scanf_i+0x1dc>
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	f012 0210 	ands.w	r2, r2, #16
 80016aa:	d113      	bne.n	80016d4 <_scanf_i+0x1b0>
 80016ac:	702a      	strb	r2, [r5, #0]
 80016ae:	6863      	ldr	r3, [r4, #4]
 80016b0:	9e01      	ldr	r6, [sp, #4]
 80016b2:	4639      	mov	r1, r7
 80016b4:	4650      	mov	r0, sl
 80016b6:	47b0      	blx	r6
 80016b8:	6821      	ldr	r1, [r4, #0]
 80016ba:	f8d8 3000 	ldr.w	r3, [r8]
 80016be:	f011 0f20 	tst.w	r1, #32
 80016c2:	d013      	beq.n	80016ec <_scanf_i+0x1c8>
 80016c4:	1d1a      	adds	r2, r3, #4
 80016c6:	f8c8 2000 	str.w	r2, [r8]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6018      	str	r0, [r3, #0]
 80016ce:	68e3      	ldr	r3, [r4, #12]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60e3      	str	r3, [r4, #12]
 80016d4:	1bed      	subs	r5, r5, r7
 80016d6:	44ab      	add	fp, r5
 80016d8:	6925      	ldr	r5, [r4, #16]
 80016da:	445d      	add	r5, fp
 80016dc:	6125      	str	r5, [r4, #16]
 80016de:	2000      	movs	r0, #0
 80016e0:	b007      	add	sp, #28
 80016e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016e6:	f04f 0b00 	mov.w	fp, #0
 80016ea:	e7ca      	b.n	8001682 <_scanf_i+0x15e>
 80016ec:	1d1a      	adds	r2, r3, #4
 80016ee:	f8c8 2000 	str.w	r2, [r8]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f011 0f01 	tst.w	r1, #1
 80016f8:	bf14      	ite	ne
 80016fa:	8018      	strhne	r0, [r3, #0]
 80016fc:	6018      	streq	r0, [r3, #0]
 80016fe:	e7e6      	b.n	80016ce <_scanf_i+0x1aa>
 8001700:	2001      	movs	r0, #1
 8001702:	e7ed      	b.n	80016e0 <_scanf_i+0x1bc>
 8001704:	08001ccc 	.word	0x08001ccc
 8001708:	08001971 	.word	0x08001971
 800170c:	08001889 	.word	0x08001889
 8001710:	08001d24 	.word	0x08001d24

08001714 <__sccl>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	780b      	ldrb	r3, [r1, #0]
 8001718:	4604      	mov	r4, r0
 800171a:	2b5e      	cmp	r3, #94	; 0x5e
 800171c:	bf0b      	itete	eq
 800171e:	784b      	ldrbeq	r3, [r1, #1]
 8001720:	1c48      	addne	r0, r1, #1
 8001722:	1c88      	addeq	r0, r1, #2
 8001724:	2200      	movne	r2, #0
 8001726:	bf08      	it	eq
 8001728:	2201      	moveq	r2, #1
 800172a:	1e61      	subs	r1, r4, #1
 800172c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8001730:	f801 2f01 	strb.w	r2, [r1, #1]!
 8001734:	42a9      	cmp	r1, r5
 8001736:	d1fb      	bne.n	8001730 <__sccl+0x1c>
 8001738:	b90b      	cbnz	r3, 800173e <__sccl+0x2a>
 800173a:	3801      	subs	r0, #1
 800173c:	bd70      	pop	{r4, r5, r6, pc}
 800173e:	f082 0201 	eor.w	r2, r2, #1
 8001742:	54e2      	strb	r2, [r4, r3]
 8001744:	4605      	mov	r5, r0
 8001746:	4628      	mov	r0, r5
 8001748:	f810 1b01 	ldrb.w	r1, [r0], #1
 800174c:	292d      	cmp	r1, #45	; 0x2d
 800174e:	d006      	beq.n	800175e <__sccl+0x4a>
 8001750:	295d      	cmp	r1, #93	; 0x5d
 8001752:	d0f3      	beq.n	800173c <__sccl+0x28>
 8001754:	b909      	cbnz	r1, 800175a <__sccl+0x46>
 8001756:	4628      	mov	r0, r5
 8001758:	e7f0      	b.n	800173c <__sccl+0x28>
 800175a:	460b      	mov	r3, r1
 800175c:	e7f1      	b.n	8001742 <__sccl+0x2e>
 800175e:	786e      	ldrb	r6, [r5, #1]
 8001760:	2e5d      	cmp	r6, #93	; 0x5d
 8001762:	d0fa      	beq.n	800175a <__sccl+0x46>
 8001764:	42b3      	cmp	r3, r6
 8001766:	dcf8      	bgt.n	800175a <__sccl+0x46>
 8001768:	3502      	adds	r5, #2
 800176a:	4619      	mov	r1, r3
 800176c:	3101      	adds	r1, #1
 800176e:	428e      	cmp	r6, r1
 8001770:	5462      	strb	r2, [r4, r1]
 8001772:	dcfb      	bgt.n	800176c <__sccl+0x58>
 8001774:	1af1      	subs	r1, r6, r3
 8001776:	3901      	subs	r1, #1
 8001778:	1c58      	adds	r0, r3, #1
 800177a:	42b3      	cmp	r3, r6
 800177c:	bfa8      	it	ge
 800177e:	2100      	movge	r1, #0
 8001780:	1843      	adds	r3, r0, r1
 8001782:	e7e0      	b.n	8001746 <__sccl+0x32>

08001784 <_strtol_l.constprop.0>:
 8001784:	2b01      	cmp	r3, #1
 8001786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800178a:	d001      	beq.n	8001790 <_strtol_l.constprop.0+0xc>
 800178c:	2b24      	cmp	r3, #36	; 0x24
 800178e:	d906      	bls.n	800179e <_strtol_l.constprop.0+0x1a>
 8001790:	f7ff f934 	bl	80009fc <__errno>
 8001794:	2316      	movs	r3, #22
 8001796:	6003      	str	r3, [r0, #0]
 8001798:	2000      	movs	r0, #0
 800179a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800179e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001884 <_strtol_l.constprop.0+0x100>
 80017a2:	460d      	mov	r5, r1
 80017a4:	462e      	mov	r6, r5
 80017a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80017aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80017ae:	f017 0708 	ands.w	r7, r7, #8
 80017b2:	d1f7      	bne.n	80017a4 <_strtol_l.constprop.0+0x20>
 80017b4:	2c2d      	cmp	r4, #45	; 0x2d
 80017b6:	d132      	bne.n	800181e <_strtol_l.constprop.0+0x9a>
 80017b8:	782c      	ldrb	r4, [r5, #0]
 80017ba:	2701      	movs	r7, #1
 80017bc:	1cb5      	adds	r5, r6, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d05b      	beq.n	800187a <_strtol_l.constprop.0+0xf6>
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d109      	bne.n	80017da <_strtol_l.constprop.0+0x56>
 80017c6:	2c30      	cmp	r4, #48	; 0x30
 80017c8:	d107      	bne.n	80017da <_strtol_l.constprop.0+0x56>
 80017ca:	782c      	ldrb	r4, [r5, #0]
 80017cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80017d0:	2c58      	cmp	r4, #88	; 0x58
 80017d2:	d14d      	bne.n	8001870 <_strtol_l.constprop.0+0xec>
 80017d4:	786c      	ldrb	r4, [r5, #1]
 80017d6:	2310      	movs	r3, #16
 80017d8:	3502      	adds	r5, #2
 80017da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80017de:	f108 38ff 	add.w	r8, r8, #4294967295
 80017e2:	f04f 0c00 	mov.w	ip, #0
 80017e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80017ea:	4666      	mov	r6, ip
 80017ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80017f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80017f4:	f1be 0f09 	cmp.w	lr, #9
 80017f8:	d816      	bhi.n	8001828 <_strtol_l.constprop.0+0xa4>
 80017fa:	4674      	mov	r4, lr
 80017fc:	42a3      	cmp	r3, r4
 80017fe:	dd24      	ble.n	800184a <_strtol_l.constprop.0+0xc6>
 8001800:	f1bc 0f00 	cmp.w	ip, #0
 8001804:	db1e      	blt.n	8001844 <_strtol_l.constprop.0+0xc0>
 8001806:	45b1      	cmp	r9, r6
 8001808:	d31c      	bcc.n	8001844 <_strtol_l.constprop.0+0xc0>
 800180a:	d101      	bne.n	8001810 <_strtol_l.constprop.0+0x8c>
 800180c:	45a2      	cmp	sl, r4
 800180e:	db19      	blt.n	8001844 <_strtol_l.constprop.0+0xc0>
 8001810:	fb06 4603 	mla	r6, r6, r3, r4
 8001814:	f04f 0c01 	mov.w	ip, #1
 8001818:	f815 4b01 	ldrb.w	r4, [r5], #1
 800181c:	e7e8      	b.n	80017f0 <_strtol_l.constprop.0+0x6c>
 800181e:	2c2b      	cmp	r4, #43	; 0x2b
 8001820:	bf04      	itt	eq
 8001822:	782c      	ldrbeq	r4, [r5, #0]
 8001824:	1cb5      	addeq	r5, r6, #2
 8001826:	e7ca      	b.n	80017be <_strtol_l.constprop.0+0x3a>
 8001828:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800182c:	f1be 0f19 	cmp.w	lr, #25
 8001830:	d801      	bhi.n	8001836 <_strtol_l.constprop.0+0xb2>
 8001832:	3c37      	subs	r4, #55	; 0x37
 8001834:	e7e2      	b.n	80017fc <_strtol_l.constprop.0+0x78>
 8001836:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800183a:	f1be 0f19 	cmp.w	lr, #25
 800183e:	d804      	bhi.n	800184a <_strtol_l.constprop.0+0xc6>
 8001840:	3c57      	subs	r4, #87	; 0x57
 8001842:	e7db      	b.n	80017fc <_strtol_l.constprop.0+0x78>
 8001844:	f04f 3cff 	mov.w	ip, #4294967295
 8001848:	e7e6      	b.n	8001818 <_strtol_l.constprop.0+0x94>
 800184a:	f1bc 0f00 	cmp.w	ip, #0
 800184e:	da05      	bge.n	800185c <_strtol_l.constprop.0+0xd8>
 8001850:	2322      	movs	r3, #34	; 0x22
 8001852:	6003      	str	r3, [r0, #0]
 8001854:	4646      	mov	r6, r8
 8001856:	b942      	cbnz	r2, 800186a <_strtol_l.constprop.0+0xe6>
 8001858:	4630      	mov	r0, r6
 800185a:	e79e      	b.n	800179a <_strtol_l.constprop.0+0x16>
 800185c:	b107      	cbz	r7, 8001860 <_strtol_l.constprop.0+0xdc>
 800185e:	4276      	negs	r6, r6
 8001860:	2a00      	cmp	r2, #0
 8001862:	d0f9      	beq.n	8001858 <_strtol_l.constprop.0+0xd4>
 8001864:	f1bc 0f00 	cmp.w	ip, #0
 8001868:	d000      	beq.n	800186c <_strtol_l.constprop.0+0xe8>
 800186a:	1e69      	subs	r1, r5, #1
 800186c:	6011      	str	r1, [r2, #0]
 800186e:	e7f3      	b.n	8001858 <_strtol_l.constprop.0+0xd4>
 8001870:	2430      	movs	r4, #48	; 0x30
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1b1      	bne.n	80017da <_strtol_l.constprop.0+0x56>
 8001876:	2308      	movs	r3, #8
 8001878:	e7af      	b.n	80017da <_strtol_l.constprop.0+0x56>
 800187a:	2c30      	cmp	r4, #48	; 0x30
 800187c:	d0a5      	beq.n	80017ca <_strtol_l.constprop.0+0x46>
 800187e:	230a      	movs	r3, #10
 8001880:	e7ab      	b.n	80017da <_strtol_l.constprop.0+0x56>
 8001882:	bf00      	nop
 8001884:	08001d27 	.word	0x08001d27

08001888 <_strtol_r>:
 8001888:	f7ff bf7c 	b.w	8001784 <_strtol_l.constprop.0>

0800188c <_strtoul_l.constprop.0>:
 800188c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001890:	4f36      	ldr	r7, [pc, #216]	; (800196c <_strtoul_l.constprop.0+0xe0>)
 8001892:	4686      	mov	lr, r0
 8001894:	460d      	mov	r5, r1
 8001896:	4628      	mov	r0, r5
 8001898:	f815 4b01 	ldrb.w	r4, [r5], #1
 800189c:	5de6      	ldrb	r6, [r4, r7]
 800189e:	f016 0608 	ands.w	r6, r6, #8
 80018a2:	d1f8      	bne.n	8001896 <_strtoul_l.constprop.0+0xa>
 80018a4:	2c2d      	cmp	r4, #45	; 0x2d
 80018a6:	d12f      	bne.n	8001908 <_strtoul_l.constprop.0+0x7c>
 80018a8:	782c      	ldrb	r4, [r5, #0]
 80018aa:	2601      	movs	r6, #1
 80018ac:	1c85      	adds	r5, r0, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d057      	beq.n	8001962 <_strtoul_l.constprop.0+0xd6>
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d109      	bne.n	80018ca <_strtoul_l.constprop.0+0x3e>
 80018b6:	2c30      	cmp	r4, #48	; 0x30
 80018b8:	d107      	bne.n	80018ca <_strtoul_l.constprop.0+0x3e>
 80018ba:	7828      	ldrb	r0, [r5, #0]
 80018bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80018c0:	2858      	cmp	r0, #88	; 0x58
 80018c2:	d149      	bne.n	8001958 <_strtoul_l.constprop.0+0xcc>
 80018c4:	786c      	ldrb	r4, [r5, #1]
 80018c6:	2310      	movs	r3, #16
 80018c8:	3502      	adds	r5, #2
 80018ca:	f04f 38ff 	mov.w	r8, #4294967295
 80018ce:	2700      	movs	r7, #0
 80018d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80018d4:	fb03 f908 	mul.w	r9, r3, r8
 80018d8:	ea6f 0909 	mvn.w	r9, r9
 80018dc:	4638      	mov	r0, r7
 80018de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80018e2:	f1bc 0f09 	cmp.w	ip, #9
 80018e6:	d814      	bhi.n	8001912 <_strtoul_l.constprop.0+0x86>
 80018e8:	4664      	mov	r4, ip
 80018ea:	42a3      	cmp	r3, r4
 80018ec:	dd22      	ble.n	8001934 <_strtoul_l.constprop.0+0xa8>
 80018ee:	2f00      	cmp	r7, #0
 80018f0:	db1d      	blt.n	800192e <_strtoul_l.constprop.0+0xa2>
 80018f2:	4580      	cmp	r8, r0
 80018f4:	d31b      	bcc.n	800192e <_strtoul_l.constprop.0+0xa2>
 80018f6:	d101      	bne.n	80018fc <_strtoul_l.constprop.0+0x70>
 80018f8:	45a1      	cmp	r9, r4
 80018fa:	db18      	blt.n	800192e <_strtoul_l.constprop.0+0xa2>
 80018fc:	fb00 4003 	mla	r0, r0, r3, r4
 8001900:	2701      	movs	r7, #1
 8001902:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001906:	e7ea      	b.n	80018de <_strtoul_l.constprop.0+0x52>
 8001908:	2c2b      	cmp	r4, #43	; 0x2b
 800190a:	bf04      	itt	eq
 800190c:	782c      	ldrbeq	r4, [r5, #0]
 800190e:	1c85      	addeq	r5, r0, #2
 8001910:	e7cd      	b.n	80018ae <_strtoul_l.constprop.0+0x22>
 8001912:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001916:	f1bc 0f19 	cmp.w	ip, #25
 800191a:	d801      	bhi.n	8001920 <_strtoul_l.constprop.0+0x94>
 800191c:	3c37      	subs	r4, #55	; 0x37
 800191e:	e7e4      	b.n	80018ea <_strtoul_l.constprop.0+0x5e>
 8001920:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001924:	f1bc 0f19 	cmp.w	ip, #25
 8001928:	d804      	bhi.n	8001934 <_strtoul_l.constprop.0+0xa8>
 800192a:	3c57      	subs	r4, #87	; 0x57
 800192c:	e7dd      	b.n	80018ea <_strtoul_l.constprop.0+0x5e>
 800192e:	f04f 37ff 	mov.w	r7, #4294967295
 8001932:	e7e6      	b.n	8001902 <_strtoul_l.constprop.0+0x76>
 8001934:	2f00      	cmp	r7, #0
 8001936:	da07      	bge.n	8001948 <_strtoul_l.constprop.0+0xbc>
 8001938:	2322      	movs	r3, #34	; 0x22
 800193a:	f8ce 3000 	str.w	r3, [lr]
 800193e:	f04f 30ff 	mov.w	r0, #4294967295
 8001942:	b932      	cbnz	r2, 8001952 <_strtoul_l.constprop.0+0xc6>
 8001944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001948:	b106      	cbz	r6, 800194c <_strtoul_l.constprop.0+0xc0>
 800194a:	4240      	negs	r0, r0
 800194c:	2a00      	cmp	r2, #0
 800194e:	d0f9      	beq.n	8001944 <_strtoul_l.constprop.0+0xb8>
 8001950:	b107      	cbz	r7, 8001954 <_strtoul_l.constprop.0+0xc8>
 8001952:	1e69      	subs	r1, r5, #1
 8001954:	6011      	str	r1, [r2, #0]
 8001956:	e7f5      	b.n	8001944 <_strtoul_l.constprop.0+0xb8>
 8001958:	2430      	movs	r4, #48	; 0x30
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1b5      	bne.n	80018ca <_strtoul_l.constprop.0+0x3e>
 800195e:	2308      	movs	r3, #8
 8001960:	e7b3      	b.n	80018ca <_strtoul_l.constprop.0+0x3e>
 8001962:	2c30      	cmp	r4, #48	; 0x30
 8001964:	d0a9      	beq.n	80018ba <_strtoul_l.constprop.0+0x2e>
 8001966:	230a      	movs	r3, #10
 8001968:	e7af      	b.n	80018ca <_strtoul_l.constprop.0+0x3e>
 800196a:	bf00      	nop
 800196c:	08001d27 	.word	0x08001d27

08001970 <_strtoul_r>:
 8001970:	f7ff bf8c 	b.w	800188c <_strtoul_l.constprop.0>

08001974 <__submore>:
 8001974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001978:	460c      	mov	r4, r1
 800197a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800197c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001980:	4299      	cmp	r1, r3
 8001982:	d11d      	bne.n	80019c0 <__submore+0x4c>
 8001984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001988:	f000 f8c4 	bl	8001b14 <_malloc_r>
 800198c:	b918      	cbnz	r0, 8001996 <__submore+0x22>
 800198e:	f04f 30ff 	mov.w	r0, #4294967295
 8001992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199a:	63a3      	str	r3, [r4, #56]	; 0x38
 800199c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80019a0:	6360      	str	r0, [r4, #52]	; 0x34
 80019a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80019a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80019aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80019ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80019b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80019b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80019ba:	6020      	str	r0, [r4, #0]
 80019bc:	2000      	movs	r0, #0
 80019be:	e7e8      	b.n	8001992 <__submore+0x1e>
 80019c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80019c2:	0077      	lsls	r7, r6, #1
 80019c4:	463a      	mov	r2, r7
 80019c6:	f000 f919 	bl	8001bfc <_realloc_r>
 80019ca:	4605      	mov	r5, r0
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d0de      	beq.n	800198e <__submore+0x1a>
 80019d0:	eb00 0806 	add.w	r8, r0, r6
 80019d4:	4601      	mov	r1, r0
 80019d6:	4632      	mov	r2, r6
 80019d8:	4640      	mov	r0, r8
 80019da:	f000 f807 	bl	80019ec <memcpy>
 80019de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80019e2:	f8c4 8000 	str.w	r8, [r4]
 80019e6:	e7e9      	b.n	80019bc <__submore+0x48>

080019e8 <__retarget_lock_acquire_recursive>:
 80019e8:	4770      	bx	lr

080019ea <__retarget_lock_release_recursive>:
 80019ea:	4770      	bx	lr

080019ec <memcpy>:
 80019ec:	440a      	add	r2, r1
 80019ee:	4291      	cmp	r1, r2
 80019f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80019f4:	d100      	bne.n	80019f8 <memcpy+0xc>
 80019f6:	4770      	bx	lr
 80019f8:	b510      	push	{r4, lr}
 80019fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a02:	4291      	cmp	r1, r2
 8001a04:	d1f9      	bne.n	80019fa <memcpy+0xe>
 8001a06:	bd10      	pop	{r4, pc}

08001a08 <memmove>:
 8001a08:	4288      	cmp	r0, r1
 8001a0a:	b510      	push	{r4, lr}
 8001a0c:	eb01 0402 	add.w	r4, r1, r2
 8001a10:	d902      	bls.n	8001a18 <memmove+0x10>
 8001a12:	4284      	cmp	r4, r0
 8001a14:	4623      	mov	r3, r4
 8001a16:	d807      	bhi.n	8001a28 <memmove+0x20>
 8001a18:	1e43      	subs	r3, r0, #1
 8001a1a:	42a1      	cmp	r1, r4
 8001a1c:	d008      	beq.n	8001a30 <memmove+0x28>
 8001a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a26:	e7f8      	b.n	8001a1a <memmove+0x12>
 8001a28:	4402      	add	r2, r0
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	428a      	cmp	r2, r1
 8001a2e:	d100      	bne.n	8001a32 <memmove+0x2a>
 8001a30:	bd10      	pop	{r4, pc}
 8001a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a3a:	e7f7      	b.n	8001a2c <memmove+0x24>

08001a3c <_free_r>:
 8001a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a3e:	2900      	cmp	r1, #0
 8001a40:	d044      	beq.n	8001acc <_free_r+0x90>
 8001a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a46:	9001      	str	r0, [sp, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8001a4e:	bfb8      	it	lt
 8001a50:	18e4      	addlt	r4, r4, r3
 8001a52:	f000 f913 	bl	8001c7c <__malloc_lock>
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <_free_r+0x94>)
 8001a58:	9801      	ldr	r0, [sp, #4]
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	b933      	cbnz	r3, 8001a6c <_free_r+0x30>
 8001a5e:	6063      	str	r3, [r4, #4]
 8001a60:	6014      	str	r4, [r2, #0]
 8001a62:	b003      	add	sp, #12
 8001a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a68:	f000 b90e 	b.w	8001c88 <__malloc_unlock>
 8001a6c:	42a3      	cmp	r3, r4
 8001a6e:	d908      	bls.n	8001a82 <_free_r+0x46>
 8001a70:	6825      	ldr	r5, [r4, #0]
 8001a72:	1961      	adds	r1, r4, r5
 8001a74:	428b      	cmp	r3, r1
 8001a76:	bf01      	itttt	eq
 8001a78:	6819      	ldreq	r1, [r3, #0]
 8001a7a:	685b      	ldreq	r3, [r3, #4]
 8001a7c:	1949      	addeq	r1, r1, r5
 8001a7e:	6021      	streq	r1, [r4, #0]
 8001a80:	e7ed      	b.n	8001a5e <_free_r+0x22>
 8001a82:	461a      	mov	r2, r3
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	b10b      	cbz	r3, 8001a8c <_free_r+0x50>
 8001a88:	42a3      	cmp	r3, r4
 8001a8a:	d9fa      	bls.n	8001a82 <_free_r+0x46>
 8001a8c:	6811      	ldr	r1, [r2, #0]
 8001a8e:	1855      	adds	r5, r2, r1
 8001a90:	42a5      	cmp	r5, r4
 8001a92:	d10b      	bne.n	8001aac <_free_r+0x70>
 8001a94:	6824      	ldr	r4, [r4, #0]
 8001a96:	4421      	add	r1, r4
 8001a98:	1854      	adds	r4, r2, r1
 8001a9a:	42a3      	cmp	r3, r4
 8001a9c:	6011      	str	r1, [r2, #0]
 8001a9e:	d1e0      	bne.n	8001a62 <_free_r+0x26>
 8001aa0:	681c      	ldr	r4, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	6053      	str	r3, [r2, #4]
 8001aa6:	4421      	add	r1, r4
 8001aa8:	6011      	str	r1, [r2, #0]
 8001aaa:	e7da      	b.n	8001a62 <_free_r+0x26>
 8001aac:	d902      	bls.n	8001ab4 <_free_r+0x78>
 8001aae:	230c      	movs	r3, #12
 8001ab0:	6003      	str	r3, [r0, #0]
 8001ab2:	e7d6      	b.n	8001a62 <_free_r+0x26>
 8001ab4:	6825      	ldr	r5, [r4, #0]
 8001ab6:	1961      	adds	r1, r4, r5
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	bf04      	itt	eq
 8001abc:	6819      	ldreq	r1, [r3, #0]
 8001abe:	685b      	ldreq	r3, [r3, #4]
 8001ac0:	6063      	str	r3, [r4, #4]
 8001ac2:	bf04      	itt	eq
 8001ac4:	1949      	addeq	r1, r1, r5
 8001ac6:	6021      	streq	r1, [r4, #0]
 8001ac8:	6054      	str	r4, [r2, #4]
 8001aca:	e7ca      	b.n	8001a62 <_free_r+0x26>
 8001acc:	b003      	add	sp, #12
 8001ace:	bd30      	pop	{r4, r5, pc}
 8001ad0:	200000f8 	.word	0x200000f8

08001ad4 <sbrk_aligned>:
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4e0e      	ldr	r6, [pc, #56]	; (8001b10 <sbrk_aligned+0x3c>)
 8001ad8:	460c      	mov	r4, r1
 8001ada:	6831      	ldr	r1, [r6, #0]
 8001adc:	4605      	mov	r5, r0
 8001ade:	b911      	cbnz	r1, 8001ae6 <sbrk_aligned+0x12>
 8001ae0:	f000 f8bc 	bl	8001c5c <_sbrk_r>
 8001ae4:	6030      	str	r0, [r6, #0]
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f000 f8b7 	bl	8001c5c <_sbrk_r>
 8001aee:	1c43      	adds	r3, r0, #1
 8001af0:	d00a      	beq.n	8001b08 <sbrk_aligned+0x34>
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d007      	beq.n	8001b0c <sbrk_aligned+0x38>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 f8ac 	bl	8001c5c <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d101      	bne.n	8001b0c <sbrk_aligned+0x38>
 8001b08:	f04f 34ff 	mov.w	r4, #4294967295
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	200000fc 	.word	0x200000fc

08001b14 <_malloc_r>:
 8001b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b18:	1ccd      	adds	r5, r1, #3
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	4607      	mov	r7, r0
 8001b2a:	db01      	blt.n	8001b30 <_malloc_r+0x1c>
 8001b2c:	42a9      	cmp	r1, r5
 8001b2e:	d905      	bls.n	8001b3c <_malloc_r+0x28>
 8001b30:	230c      	movs	r3, #12
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	2600      	movs	r6, #0
 8001b36:	4630      	mov	r0, r6
 8001b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b3c:	4e2e      	ldr	r6, [pc, #184]	; (8001bf8 <_malloc_r+0xe4>)
 8001b3e:	f000 f89d 	bl	8001c7c <__malloc_lock>
 8001b42:	6833      	ldr	r3, [r6, #0]
 8001b44:	461c      	mov	r4, r3
 8001b46:	bb34      	cbnz	r4, 8001b96 <_malloc_r+0x82>
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	f7ff ffc2 	bl	8001ad4 <sbrk_aligned>
 8001b50:	1c43      	adds	r3, r0, #1
 8001b52:	4604      	mov	r4, r0
 8001b54:	d14d      	bne.n	8001bf2 <_malloc_r+0xde>
 8001b56:	6834      	ldr	r4, [r6, #0]
 8001b58:	4626      	mov	r6, r4
 8001b5a:	2e00      	cmp	r6, #0
 8001b5c:	d140      	bne.n	8001be0 <_malloc_r+0xcc>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	4631      	mov	r1, r6
 8001b62:	4638      	mov	r0, r7
 8001b64:	eb04 0803 	add.w	r8, r4, r3
 8001b68:	f000 f878 	bl	8001c5c <_sbrk_r>
 8001b6c:	4580      	cmp	r8, r0
 8001b6e:	d13a      	bne.n	8001be6 <_malloc_r+0xd2>
 8001b70:	6821      	ldr	r1, [r4, #0]
 8001b72:	3503      	adds	r5, #3
 8001b74:	1a6d      	subs	r5, r5, r1
 8001b76:	f025 0503 	bic.w	r5, r5, #3
 8001b7a:	3508      	adds	r5, #8
 8001b7c:	2d0c      	cmp	r5, #12
 8001b7e:	bf38      	it	cc
 8001b80:	250c      	movcc	r5, #12
 8001b82:	4629      	mov	r1, r5
 8001b84:	4638      	mov	r0, r7
 8001b86:	f7ff ffa5 	bl	8001ad4 <sbrk_aligned>
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	d02b      	beq.n	8001be6 <_malloc_r+0xd2>
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	442b      	add	r3, r5
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	e00e      	b.n	8001bb4 <_malloc_r+0xa0>
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	1b52      	subs	r2, r2, r5
 8001b9a:	d41e      	bmi.n	8001bda <_malloc_r+0xc6>
 8001b9c:	2a0b      	cmp	r2, #11
 8001b9e:	d916      	bls.n	8001bce <_malloc_r+0xba>
 8001ba0:	1961      	adds	r1, r4, r5
 8001ba2:	42a3      	cmp	r3, r4
 8001ba4:	6025      	str	r5, [r4, #0]
 8001ba6:	bf18      	it	ne
 8001ba8:	6059      	strne	r1, [r3, #4]
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	bf08      	it	eq
 8001bae:	6031      	streq	r1, [r6, #0]
 8001bb0:	5162      	str	r2, [r4, r5]
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	4638      	mov	r0, r7
 8001bb6:	f104 060b 	add.w	r6, r4, #11
 8001bba:	f000 f865 	bl	8001c88 <__malloc_unlock>
 8001bbe:	f026 0607 	bic.w	r6, r6, #7
 8001bc2:	1d23      	adds	r3, r4, #4
 8001bc4:	1af2      	subs	r2, r6, r3
 8001bc6:	d0b6      	beq.n	8001b36 <_malloc_r+0x22>
 8001bc8:	1b9b      	subs	r3, r3, r6
 8001bca:	50a3      	str	r3, [r4, r2]
 8001bcc:	e7b3      	b.n	8001b36 <_malloc_r+0x22>
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	bf0c      	ite	eq
 8001bd4:	6032      	streq	r2, [r6, #0]
 8001bd6:	605a      	strne	r2, [r3, #4]
 8001bd8:	e7ec      	b.n	8001bb4 <_malloc_r+0xa0>
 8001bda:	4623      	mov	r3, r4
 8001bdc:	6864      	ldr	r4, [r4, #4]
 8001bde:	e7b2      	b.n	8001b46 <_malloc_r+0x32>
 8001be0:	4634      	mov	r4, r6
 8001be2:	6876      	ldr	r6, [r6, #4]
 8001be4:	e7b9      	b.n	8001b5a <_malloc_r+0x46>
 8001be6:	230c      	movs	r3, #12
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4638      	mov	r0, r7
 8001bec:	f000 f84c 	bl	8001c88 <__malloc_unlock>
 8001bf0:	e7a1      	b.n	8001b36 <_malloc_r+0x22>
 8001bf2:	6025      	str	r5, [r4, #0]
 8001bf4:	e7de      	b.n	8001bb4 <_malloc_r+0xa0>
 8001bf6:	bf00      	nop
 8001bf8:	200000f8 	.word	0x200000f8

08001bfc <_realloc_r>:
 8001bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c00:	4680      	mov	r8, r0
 8001c02:	4614      	mov	r4, r2
 8001c04:	460e      	mov	r6, r1
 8001c06:	b921      	cbnz	r1, 8001c12 <_realloc_r+0x16>
 8001c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	f7ff bf81 	b.w	8001b14 <_malloc_r>
 8001c12:	b92a      	cbnz	r2, 8001c20 <_realloc_r+0x24>
 8001c14:	f7ff ff12 	bl	8001a3c <_free_r>
 8001c18:	4625      	mov	r5, r4
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c20:	f000 f838 	bl	8001c94 <_malloc_usable_size_r>
 8001c24:	4284      	cmp	r4, r0
 8001c26:	4607      	mov	r7, r0
 8001c28:	d802      	bhi.n	8001c30 <_realloc_r+0x34>
 8001c2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001c2e:	d812      	bhi.n	8001c56 <_realloc_r+0x5a>
 8001c30:	4621      	mov	r1, r4
 8001c32:	4640      	mov	r0, r8
 8001c34:	f7ff ff6e 	bl	8001b14 <_malloc_r>
 8001c38:	4605      	mov	r5, r0
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d0ed      	beq.n	8001c1a <_realloc_r+0x1e>
 8001c3e:	42bc      	cmp	r4, r7
 8001c40:	4622      	mov	r2, r4
 8001c42:	4631      	mov	r1, r6
 8001c44:	bf28      	it	cs
 8001c46:	463a      	movcs	r2, r7
 8001c48:	f7ff fed0 	bl	80019ec <memcpy>
 8001c4c:	4631      	mov	r1, r6
 8001c4e:	4640      	mov	r0, r8
 8001c50:	f7ff fef4 	bl	8001a3c <_free_r>
 8001c54:	e7e1      	b.n	8001c1a <_realloc_r+0x1e>
 8001c56:	4635      	mov	r5, r6
 8001c58:	e7df      	b.n	8001c1a <_realloc_r+0x1e>
	...

08001c5c <_sbrk_r>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4d06      	ldr	r5, [pc, #24]	; (8001c78 <_sbrk_r+0x1c>)
 8001c60:	2300      	movs	r3, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	f7fe fd3a 	bl	80006e0 <_sbrk>
 8001c6c:	1c43      	adds	r3, r0, #1
 8001c6e:	d102      	bne.n	8001c76 <_sbrk_r+0x1a>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	b103      	cbz	r3, 8001c76 <_sbrk_r+0x1a>
 8001c74:	6023      	str	r3, [r4, #0]
 8001c76:	bd38      	pop	{r3, r4, r5, pc}
 8001c78:	200000f0 	.word	0x200000f0

08001c7c <__malloc_lock>:
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <__malloc_lock+0x8>)
 8001c7e:	f7ff beb3 	b.w	80019e8 <__retarget_lock_acquire_recursive>
 8001c82:	bf00      	nop
 8001c84:	200000f4 	.word	0x200000f4

08001c88 <__malloc_unlock>:
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <__malloc_unlock+0x8>)
 8001c8a:	f7ff beae 	b.w	80019ea <__retarget_lock_release_recursive>
 8001c8e:	bf00      	nop
 8001c90:	200000f4 	.word	0x200000f4

08001c94 <_malloc_usable_size_r>:
 8001c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c98:	1f18      	subs	r0, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bfbc      	itt	lt
 8001c9e:	580b      	ldrlt	r3, [r1, r0]
 8001ca0:	18c0      	addlt	r0, r0, r3
 8001ca2:	4770      	bx	lr

08001ca4 <_init>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	bf00      	nop
 8001ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001caa:	bc08      	pop	{r3}
 8001cac:	469e      	mov	lr, r3
 8001cae:	4770      	bx	lr

08001cb0 <_fini>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	bf00      	nop
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr
