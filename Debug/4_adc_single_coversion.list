
4_adc_single_coversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d30  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000ee0  08000ee0  00010ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f20  08000f20  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000f20  08000f20  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f20  08000f20  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f20  08000f20  00010f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f24  08000f24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000034  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e4a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000470  00000000  00000000  00020ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00021350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000088  00000000  00000000  00021420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019470  00000000  00000000  000214a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017b9  00000000  00000000  0003a918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf3f  00000000  00000000  0003c0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c8010  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005b8  00000000  00000000  000c8060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08000ec8 	.word	0x08000ec8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08000ec8 	.word	0x08000ec8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <PA4_ADC_Init>:
#define ADC_Channel4	(0x4<<0)
#define ADC_Channel1	(0x1<<4)



void PA4_ADC_Init(){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	/*------------------------------Configurate the GPIO ADC------------------------*/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=(1<<0);
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <PA4_ADC_Init+0x4c>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <PA4_ADC_Init+0x4c>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of GPIOA to analog*/
	GPIOA->MODER |=(0x3<<8);			/*Pointer PA4*/
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <PA4_ADC_Init+0x50>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <PA4_ADC_Init+0x50>)
 80002a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80002aa:	6013      	str	r3, [r2, #0]
	//GPIOA->MODER |=(0x3<<2);			/*Temperate sensor*/

	/*--------------------------------Configurate ADC module--------------------------*/
	/*Enable clock for ADC1*/
	RCC->APB2ENR |=(1<<8);
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <PA4_ADC_Init+0x4c>)
 80002ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b0:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <PA4_ADC_Init+0x4c>)
 80002b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b6:	6453      	str	r3, [r2, #68]	; 0x44

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_Channel4;			/*Channel 4 SQR1*/
 80002b8:	4b0a      	ldr	r3, [pc, #40]	; (80002e4 <PA4_ADC_Init+0x54>)
 80002ba:	2204      	movs	r2, #4
 80002bc:	635a      	str	r2, [r3, #52]	; 0x34
	//ADC1->SQR3 = ADC_Channel1;			/*Channel 1 SQR2*/

	/*Conversion sequence length*/
	ADC1->SQR1 |=(0x0<<20);  /* 1 conversion*/
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <PA4_ADC_Init+0x54>)
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <PA4_ADC_Init+0x54>)
 80002c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002c4:	62d3      	str	r3, [r2, #44]	; 0x2c
	/**/
	/*Enable ADC*/
	ADC1->CR2 |=(1<<0);
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <PA4_ADC_Init+0x54>)
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <PA4_ADC_Init+0x54>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6093      	str	r3, [r2, #8]
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020000 	.word	0x40020000
 80002e4:	40012000 	.word	0x40012000

080002e8 <start_conversion>:

void start_conversion(void){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

	ADC1->CR2 |=(1<<30);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <start_conversion+0x1c>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <start_conversion+0x1c>)
 80002f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002f6:	6093      	str	r3, [r2, #8]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40012000 	.word	0x40012000

08000308 <adc_read>:

uint32_t adc_read(void){
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	while( !(ADC1->SR & (1<<1))){}
 800030c:	bf00      	nop
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <adc_read+0x20>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f9      	beq.n	800030e <adc_read+0x6>
	return ADC1->DR;
 800031a:	4b03      	ldr	r3, [pc, #12]	; (8000328 <adc_read+0x20>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800031e:	4618      	mov	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40012000 	.word	0x40012000

0800032c <main>:
#include <stdio.h>

uint32_t value_sensor;

int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);   //ENABLE clock for port D
 8000332:	4b26      	ldr	r3, [pc, #152]	; (80003cc <main+0xa0>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a25      	ldr	r2, [pc, #148]	; (80003cc <main+0xa0>)
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER |= (0x55<<24);  // Output for D12 ,D13, D14, D15
 800033e:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <main+0xa4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a23      	ldr	r2, [pc, #140]	; (80003d0 <main+0xa4>)
 8000344:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000348:	6013      	str	r3, [r2, #0]
	GPIOD->ODR &=~ (0xF<<12);
 800034a:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <main+0xa4>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a20      	ldr	r2, [pc, #128]	; (80003d0 <main+0xa4>)
 8000350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000354:	6153      	str	r3, [r2, #20]
	PA4_ADC_Init();
 8000356:	f7ff ff9b 	bl	8000290 <PA4_ADC_Init>
	UART2_Init();
 800035a:	f000 f877 	bl	800044c <UART2_Init>
	uint8_t msg [25];
	while(1){
		start_conversion();
 800035e:	f7ff ffc3 	bl	80002e8 <start_conversion>
		value_sensor =  adc_read();
 8000362:	f7ff ffd1 	bl	8000308 <adc_read>
 8000366:	4603      	mov	r3, r0
 8000368:	4a1a      	ldr	r2, [pc, #104]	; (80003d4 <main+0xa8>)
 800036a:	6013      	str	r3, [r2, #0]
		GPIOD->ODR ^= (1<<14);
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <main+0xa4>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a17      	ldr	r2, [pc, #92]	; (80003d0 <main+0xa4>)
 8000372:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000376:	6153      	str	r3, [r2, #20]
		GPIOD->ODR ^= (1<<15);
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <main+0xa4>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <main+0xa4>)
 800037e:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000382:	6153      	str	r3, [r2, #20]
		GPIOD->ODR ^= (1<<12);
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <main+0xa4>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a11      	ldr	r2, [pc, #68]	; (80003d0 <main+0xa4>)
 800038a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800038e:	6153      	str	r3, [r2, #20]
		GPIOD->ODR ^= (1<<13);
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <main+0xa4>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <main+0xa4>)
 8000396:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800039a:	6153      	str	r3, [r2, #20]
		sprintf(msg,"Value: %d \n\r",(int) value_sensor);
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <main+0xa8>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	463b      	mov	r3, r7
 80003a4:	490c      	ldr	r1, [pc, #48]	; (80003d8 <main+0xac>)
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 f920 	bl	80005ec <siprintf>
		UART_Transmit(msg,25);
 80003ac:	463b      	mov	r3, r7
 80003ae:	2119      	movs	r1, #25
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f899 	bl	80004e8 <UART_Transmit>
		for (int i=0; i< 200000;i++){
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
 80003ba:	e002      	b.n	80003c2 <main+0x96>
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	3301      	adds	r3, #1
 80003c0:	61fb      	str	r3, [r7, #28]
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	4a05      	ldr	r2, [pc, #20]	; (80003dc <main+0xb0>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	ddf8      	ble.n	80003bc <main+0x90>
		start_conversion();
 80003ca:	e7c8      	b.n	800035e <main+0x32>
 80003cc:	40023800 	.word	0x40023800
 80003d0:	40020c00 	.word	0x40020c00
 80003d4:	20000080 	.word	0x20000080
 80003d8:	08000ee0 	.word	0x08000ee0
 80003dc:	00030d3f 	.word	0x00030d3f

080003e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003e8:	4a14      	ldr	r2, [pc, #80]	; (800043c <_sbrk+0x5c>)
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <_sbrk+0x60>)
 80003ec:	1ad3      	subs	r3, r2, r3
 80003ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <_sbrk+0x64>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d102      	bne.n	8000402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <_sbrk+0x64>)
 80003fe:	4a12      	ldr	r2, [pc, #72]	; (8000448 <_sbrk+0x68>)
 8000400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <_sbrk+0x64>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	693a      	ldr	r2, [r7, #16]
 800040c:	429a      	cmp	r2, r3
 800040e:	d207      	bcs.n	8000420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000410:	f000 f8c2 	bl	8000598 <__errno>
 8000414:	4603      	mov	r3, r0
 8000416:	220c      	movs	r2, #12
 8000418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
 800041e:	e009      	b.n	8000434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000420:	4b08      	ldr	r3, [pc, #32]	; (8000444 <_sbrk+0x64>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <_sbrk+0x64>)
 8000430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000432:	68fb      	ldr	r3, [r7, #12]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20020000 	.word	0x20020000
 8000440:	00000400 	.word	0x00000400
 8000444:	20000084 	.word	0x20000084
 8000448:	20000098 	.word	0x20000098

0800044c <UART2_Init>:
 */
#include "uart2.h"
#include <stdio.h>
#include <stdint.h>

void UART2_Init(void){
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	/*--------------------------------Configuration uart gpio pin------------------------------------------*/
	/*Enble clock access to port A*/
	RCC->AHB1ENR |= (1U<<0);
 8000450:	4b22      	ldr	r3, [pc, #136]	; (80004dc <UART2_Init+0x90>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a21      	ldr	r2, [pc, #132]	; (80004dc <UART2_Init+0x90>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2  & PA 3 mode to alternate function mode */
	GPIOA->MODER |= (0x2<<4);
 800045c:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <UART2_Init+0x94>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1f      	ldr	r2, [pc, #124]	; (80004e0 <UART2_Init+0x94>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x2<<6);
 8000468:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <UART2_Init+0x94>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <UART2_Init+0x94>)
 800046e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000472:	6013      	str	r3, [r2, #0]
	/*Set PA2 & PA3 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (0x7<<8);
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <UART2_Init+0x94>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	4a19      	ldr	r2, [pc, #100]	; (80004e0 <UART2_Init+0x94>)
 800047a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800047e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7<<12);
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <UART2_Init+0x94>)
 8000482:	6a1b      	ldr	r3, [r3, #32]
 8000484:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <UART2_Init+0x94>)
 8000486:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800048a:	6213      	str	r3, [r2, #32]
	/*-------------------------------Configuration uart module -------------------------------------------*/
	/*Enable clock access to uart 2*/
	RCC->APB1ENR = (1U<<17);
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <UART2_Init+0x90>)
 800048e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000492:	641a      	str	r2, [r3, #64]	; 0x40
	/*Configure baudrate*/
	/*9600- 16Mhz*/
	USART2->BRR |= (0x68<<4);
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <UART2_Init+0x98>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <UART2_Init+0x98>)
 800049a:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 800049e:	6093      	str	r3, [r2, #8]
	USART2->BRR |= (0x03<<0);
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <UART2_Init+0x98>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <UART2_Init+0x98>)
 80004a6:	f043 0303 	orr.w	r3, r3, #3
 80004aa:	6093      	str	r3, [r2, #8]
	/*Configure transfer direction*/
	USART2->CR1 |= (1U<<3); 			/*Transmit*/
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <UART2_Init+0x98>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <UART2_Init+0x98>)
 80004b2:	f043 0308 	orr.w	r3, r3, #8
 80004b6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1U<<2);				/*Receiver*/
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <UART2_Init+0x98>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a09      	ldr	r2, [pc, #36]	; (80004e4 <UART2_Init+0x98>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	60d3      	str	r3, [r2, #12]
	/*Enable uart module*/
	USART2->CR1 |= (1U<<13);
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <UART2_Init+0x98>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a06      	ldr	r2, [pc, #24]	; (80004e4 <UART2_Init+0x98>)
 80004ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ce:	60d3      	str	r3, [r2, #12]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020000 	.word	0x40020000
 80004e4:	40004400 	.word	0x40004400

080004e8 <UART_Transmit>:



void UART_Transmit( uint8_t* TX_Data, uint8_t TX_Size){
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 80004f8:	e010      	b.n	800051c <UART_Transmit+0x34>
		/* Check Transmit Data Register Empty*/
		while(!(USART2->SR& (1<<7))){}
 80004fa:	bf00      	nop
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <UART_Transmit+0x58>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f9      	beq.n	80004fc <UART_Transmit+0x14>
		/* Send data */
		USART2->DR=(uint8_t)(*TX_Data & 0xFF);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <UART_Transmit+0x58>)
 800050e:	605a      	str	r2, [r3, #4]
		TX_Data++;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
		i++;
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	3301      	adds	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
	while( i < TX_Size){
 800051c:	7bfa      	ldrb	r2, [r7, #15]
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	429a      	cmp	r2, r3
 8000522:	d3ea      	bcc.n	80004fa <UART_Transmit+0x12>
	}
	/*Waiting transmit complete*/
	while(!(USART2->SR &(1<<6))){}
 8000524:	bf00      	nop
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <UART_Transmit+0x58>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <UART_Transmit+0x3e>
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40004400 	.word	0x40004400

08000544 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000546:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000548:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	; (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <LoopForever+0xe>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	; (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000572:	f000 f817 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000576:	f7ff fed9 	bl	800032c <main>

0800057a <LoopForever>:

LoopForever:
  b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   r0, =_estack
 800057c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000588:	08000f28 	.word	0x08000f28
  ldr r2, =_sbss
 800058c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000590:	20000098 	.word	0x20000098

08000594 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC_IRQHandler>
	...

08000598 <__errno>:
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <__errno+0x8>)
 800059a:	6818      	ldr	r0, [r3, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	4d0d      	ldr	r5, [pc, #52]	; (80005dc <__libc_init_array+0x38>)
 80005a8:	4c0d      	ldr	r4, [pc, #52]	; (80005e0 <__libc_init_array+0x3c>)
 80005aa:	1b64      	subs	r4, r4, r5
 80005ac:	10a4      	asrs	r4, r4, #2
 80005ae:	2600      	movs	r6, #0
 80005b0:	42a6      	cmp	r6, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	4d0b      	ldr	r5, [pc, #44]	; (80005e4 <__libc_init_array+0x40>)
 80005b6:	4c0c      	ldr	r4, [pc, #48]	; (80005e8 <__libc_init_array+0x44>)
 80005b8:	f000 fc86 	bl	8000ec8 <_init>
 80005bc:	1b64      	subs	r4, r4, r5
 80005be:	10a4      	asrs	r4, r4, #2
 80005c0:	2600      	movs	r6, #0
 80005c2:	42a6      	cmp	r6, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005cc:	4798      	blx	r3
 80005ce:	3601      	adds	r6, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d6:	4798      	blx	r3
 80005d8:	3601      	adds	r6, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	08000f20 	.word	0x08000f20
 80005e0:	08000f20 	.word	0x08000f20
 80005e4:	08000f20 	.word	0x08000f20
 80005e8:	08000f24 	.word	0x08000f24

080005ec <siprintf>:
 80005ec:	b40e      	push	{r1, r2, r3}
 80005ee:	b500      	push	{lr}
 80005f0:	b09c      	sub	sp, #112	; 0x70
 80005f2:	ab1d      	add	r3, sp, #116	; 0x74
 80005f4:	9002      	str	r0, [sp, #8]
 80005f6:	9006      	str	r0, [sp, #24]
 80005f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <siprintf+0x38>)
 80005fe:	9107      	str	r1, [sp, #28]
 8000600:	9104      	str	r1, [sp, #16]
 8000602:	4909      	ldr	r1, [pc, #36]	; (8000628 <siprintf+0x3c>)
 8000604:	f853 2b04 	ldr.w	r2, [r3], #4
 8000608:	9105      	str	r1, [sp, #20]
 800060a:	6800      	ldr	r0, [r0, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	a902      	add	r1, sp, #8
 8000610:	f000 f868 	bl	80006e4 <_svfiprintf_r>
 8000614:	9b02      	ldr	r3, [sp, #8]
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	b01c      	add	sp, #112	; 0x70
 800061c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000620:	b003      	add	sp, #12
 8000622:	4770      	bx	lr
 8000624:	20000000 	.word	0x20000000
 8000628:	ffff0208 	.word	0xffff0208

0800062c <__ssputs_r>:
 800062c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000630:	688e      	ldr	r6, [r1, #8]
 8000632:	429e      	cmp	r6, r3
 8000634:	4682      	mov	sl, r0
 8000636:	460c      	mov	r4, r1
 8000638:	4690      	mov	r8, r2
 800063a:	461f      	mov	r7, r3
 800063c:	d838      	bhi.n	80006b0 <__ssputs_r+0x84>
 800063e:	898a      	ldrh	r2, [r1, #12]
 8000640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000644:	d032      	beq.n	80006ac <__ssputs_r+0x80>
 8000646:	6825      	ldr	r5, [r4, #0]
 8000648:	6909      	ldr	r1, [r1, #16]
 800064a:	eba5 0901 	sub.w	r9, r5, r1
 800064e:	6965      	ldr	r5, [r4, #20]
 8000650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000658:	3301      	adds	r3, #1
 800065a:	444b      	add	r3, r9
 800065c:	106d      	asrs	r5, r5, #1
 800065e:	429d      	cmp	r5, r3
 8000660:	bf38      	it	cc
 8000662:	461d      	movcc	r5, r3
 8000664:	0553      	lsls	r3, r2, #21
 8000666:	d531      	bpl.n	80006cc <__ssputs_r+0xa0>
 8000668:	4629      	mov	r1, r5
 800066a:	f000 fb63 	bl	8000d34 <_malloc_r>
 800066e:	4606      	mov	r6, r0
 8000670:	b950      	cbnz	r0, 8000688 <__ssputs_r+0x5c>
 8000672:	230c      	movs	r3, #12
 8000674:	f8ca 3000 	str.w	r3, [sl]
 8000678:	89a3      	ldrh	r3, [r4, #12]
 800067a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800067e:	81a3      	strh	r3, [r4, #12]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000688:	6921      	ldr	r1, [r4, #16]
 800068a:	464a      	mov	r2, r9
 800068c:	f000 fabe 	bl	8000c0c <memcpy>
 8000690:	89a3      	ldrh	r3, [r4, #12]
 8000692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069a:	81a3      	strh	r3, [r4, #12]
 800069c:	6126      	str	r6, [r4, #16]
 800069e:	6165      	str	r5, [r4, #20]
 80006a0:	444e      	add	r6, r9
 80006a2:	eba5 0509 	sub.w	r5, r5, r9
 80006a6:	6026      	str	r6, [r4, #0]
 80006a8:	60a5      	str	r5, [r4, #8]
 80006aa:	463e      	mov	r6, r7
 80006ac:	42be      	cmp	r6, r7
 80006ae:	d900      	bls.n	80006b2 <__ssputs_r+0x86>
 80006b0:	463e      	mov	r6, r7
 80006b2:	6820      	ldr	r0, [r4, #0]
 80006b4:	4632      	mov	r2, r6
 80006b6:	4641      	mov	r1, r8
 80006b8:	f000 fab6 	bl	8000c28 <memmove>
 80006bc:	68a3      	ldr	r3, [r4, #8]
 80006be:	1b9b      	subs	r3, r3, r6
 80006c0:	60a3      	str	r3, [r4, #8]
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	4433      	add	r3, r6
 80006c6:	6023      	str	r3, [r4, #0]
 80006c8:	2000      	movs	r0, #0
 80006ca:	e7db      	b.n	8000684 <__ssputs_r+0x58>
 80006cc:	462a      	mov	r2, r5
 80006ce:	f000 fba5 	bl	8000e1c <_realloc_r>
 80006d2:	4606      	mov	r6, r0
 80006d4:	2800      	cmp	r0, #0
 80006d6:	d1e1      	bne.n	800069c <__ssputs_r+0x70>
 80006d8:	6921      	ldr	r1, [r4, #16]
 80006da:	4650      	mov	r0, sl
 80006dc:	f000 fabe 	bl	8000c5c <_free_r>
 80006e0:	e7c7      	b.n	8000672 <__ssputs_r+0x46>
	...

080006e4 <_svfiprintf_r>:
 80006e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006e8:	4698      	mov	r8, r3
 80006ea:	898b      	ldrh	r3, [r1, #12]
 80006ec:	061b      	lsls	r3, r3, #24
 80006ee:	b09d      	sub	sp, #116	; 0x74
 80006f0:	4607      	mov	r7, r0
 80006f2:	460d      	mov	r5, r1
 80006f4:	4614      	mov	r4, r2
 80006f6:	d50e      	bpl.n	8000716 <_svfiprintf_r+0x32>
 80006f8:	690b      	ldr	r3, [r1, #16]
 80006fa:	b963      	cbnz	r3, 8000716 <_svfiprintf_r+0x32>
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	f000 fb19 	bl	8000d34 <_malloc_r>
 8000702:	6028      	str	r0, [r5, #0]
 8000704:	6128      	str	r0, [r5, #16]
 8000706:	b920      	cbnz	r0, 8000712 <_svfiprintf_r+0x2e>
 8000708:	230c      	movs	r3, #12
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	f04f 30ff 	mov.w	r0, #4294967295
 8000710:	e0d1      	b.n	80008b6 <_svfiprintf_r+0x1d2>
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	616b      	str	r3, [r5, #20]
 8000716:	2300      	movs	r3, #0
 8000718:	9309      	str	r3, [sp, #36]	; 0x24
 800071a:	2320      	movs	r3, #32
 800071c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000720:	f8cd 800c 	str.w	r8, [sp, #12]
 8000724:	2330      	movs	r3, #48	; 0x30
 8000726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80008d0 <_svfiprintf_r+0x1ec>
 800072a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800072e:	f04f 0901 	mov.w	r9, #1
 8000732:	4623      	mov	r3, r4
 8000734:	469a      	mov	sl, r3
 8000736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800073a:	b10a      	cbz	r2, 8000740 <_svfiprintf_r+0x5c>
 800073c:	2a25      	cmp	r2, #37	; 0x25
 800073e:	d1f9      	bne.n	8000734 <_svfiprintf_r+0x50>
 8000740:	ebba 0b04 	subs.w	fp, sl, r4
 8000744:	d00b      	beq.n	800075e <_svfiprintf_r+0x7a>
 8000746:	465b      	mov	r3, fp
 8000748:	4622      	mov	r2, r4
 800074a:	4629      	mov	r1, r5
 800074c:	4638      	mov	r0, r7
 800074e:	f7ff ff6d 	bl	800062c <__ssputs_r>
 8000752:	3001      	adds	r0, #1
 8000754:	f000 80aa 	beq.w	80008ac <_svfiprintf_r+0x1c8>
 8000758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800075a:	445a      	add	r2, fp
 800075c:	9209      	str	r2, [sp, #36]	; 0x24
 800075e:	f89a 3000 	ldrb.w	r3, [sl]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f000 80a2 	beq.w	80008ac <_svfiprintf_r+0x1c8>
 8000768:	2300      	movs	r3, #0
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000772:	f10a 0a01 	add.w	sl, sl, #1
 8000776:	9304      	str	r3, [sp, #16]
 8000778:	9307      	str	r3, [sp, #28]
 800077a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800077e:	931a      	str	r3, [sp, #104]	; 0x68
 8000780:	4654      	mov	r4, sl
 8000782:	2205      	movs	r2, #5
 8000784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000788:	4851      	ldr	r0, [pc, #324]	; (80008d0 <_svfiprintf_r+0x1ec>)
 800078a:	f7ff fd31 	bl	80001f0 <memchr>
 800078e:	9a04      	ldr	r2, [sp, #16]
 8000790:	b9d8      	cbnz	r0, 80007ca <_svfiprintf_r+0xe6>
 8000792:	06d0      	lsls	r0, r2, #27
 8000794:	bf44      	itt	mi
 8000796:	2320      	movmi	r3, #32
 8000798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800079c:	0711      	lsls	r1, r2, #28
 800079e:	bf44      	itt	mi
 80007a0:	232b      	movmi	r3, #43	; 0x2b
 80007a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80007a6:	f89a 3000 	ldrb.w	r3, [sl]
 80007aa:	2b2a      	cmp	r3, #42	; 0x2a
 80007ac:	d015      	beq.n	80007da <_svfiprintf_r+0xf6>
 80007ae:	9a07      	ldr	r2, [sp, #28]
 80007b0:	4654      	mov	r4, sl
 80007b2:	2000      	movs	r0, #0
 80007b4:	f04f 0c0a 	mov.w	ip, #10
 80007b8:	4621      	mov	r1, r4
 80007ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80007be:	3b30      	subs	r3, #48	; 0x30
 80007c0:	2b09      	cmp	r3, #9
 80007c2:	d94e      	bls.n	8000862 <_svfiprintf_r+0x17e>
 80007c4:	b1b0      	cbz	r0, 80007f4 <_svfiprintf_r+0x110>
 80007c6:	9207      	str	r2, [sp, #28]
 80007c8:	e014      	b.n	80007f4 <_svfiprintf_r+0x110>
 80007ca:	eba0 0308 	sub.w	r3, r0, r8
 80007ce:	fa09 f303 	lsl.w	r3, r9, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	9304      	str	r3, [sp, #16]
 80007d6:	46a2      	mov	sl, r4
 80007d8:	e7d2      	b.n	8000780 <_svfiprintf_r+0x9c>
 80007da:	9b03      	ldr	r3, [sp, #12]
 80007dc:	1d19      	adds	r1, r3, #4
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	9103      	str	r1, [sp, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bfbb      	ittet	lt
 80007e6:	425b      	neglt	r3, r3
 80007e8:	f042 0202 	orrlt.w	r2, r2, #2
 80007ec:	9307      	strge	r3, [sp, #28]
 80007ee:	9307      	strlt	r3, [sp, #28]
 80007f0:	bfb8      	it	lt
 80007f2:	9204      	strlt	r2, [sp, #16]
 80007f4:	7823      	ldrb	r3, [r4, #0]
 80007f6:	2b2e      	cmp	r3, #46	; 0x2e
 80007f8:	d10c      	bne.n	8000814 <_svfiprintf_r+0x130>
 80007fa:	7863      	ldrb	r3, [r4, #1]
 80007fc:	2b2a      	cmp	r3, #42	; 0x2a
 80007fe:	d135      	bne.n	800086c <_svfiprintf_r+0x188>
 8000800:	9b03      	ldr	r3, [sp, #12]
 8000802:	1d1a      	adds	r2, r3, #4
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	9203      	str	r2, [sp, #12]
 8000808:	2b00      	cmp	r3, #0
 800080a:	bfb8      	it	lt
 800080c:	f04f 33ff 	movlt.w	r3, #4294967295
 8000810:	3402      	adds	r4, #2
 8000812:	9305      	str	r3, [sp, #20]
 8000814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80008e0 <_svfiprintf_r+0x1fc>
 8000818:	7821      	ldrb	r1, [r4, #0]
 800081a:	2203      	movs	r2, #3
 800081c:	4650      	mov	r0, sl
 800081e:	f7ff fce7 	bl	80001f0 <memchr>
 8000822:	b140      	cbz	r0, 8000836 <_svfiprintf_r+0x152>
 8000824:	2340      	movs	r3, #64	; 0x40
 8000826:	eba0 000a 	sub.w	r0, r0, sl
 800082a:	fa03 f000 	lsl.w	r0, r3, r0
 800082e:	9b04      	ldr	r3, [sp, #16]
 8000830:	4303      	orrs	r3, r0
 8000832:	3401      	adds	r4, #1
 8000834:	9304      	str	r3, [sp, #16]
 8000836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800083a:	4826      	ldr	r0, [pc, #152]	; (80008d4 <_svfiprintf_r+0x1f0>)
 800083c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000840:	2206      	movs	r2, #6
 8000842:	f7ff fcd5 	bl	80001f0 <memchr>
 8000846:	2800      	cmp	r0, #0
 8000848:	d038      	beq.n	80008bc <_svfiprintf_r+0x1d8>
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <_svfiprintf_r+0x1f4>)
 800084c:	bb1b      	cbnz	r3, 8000896 <_svfiprintf_r+0x1b2>
 800084e:	9b03      	ldr	r3, [sp, #12]
 8000850:	3307      	adds	r3, #7
 8000852:	f023 0307 	bic.w	r3, r3, #7
 8000856:	3308      	adds	r3, #8
 8000858:	9303      	str	r3, [sp, #12]
 800085a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800085c:	4433      	add	r3, r6
 800085e:	9309      	str	r3, [sp, #36]	; 0x24
 8000860:	e767      	b.n	8000732 <_svfiprintf_r+0x4e>
 8000862:	fb0c 3202 	mla	r2, ip, r2, r3
 8000866:	460c      	mov	r4, r1
 8000868:	2001      	movs	r0, #1
 800086a:	e7a5      	b.n	80007b8 <_svfiprintf_r+0xd4>
 800086c:	2300      	movs	r3, #0
 800086e:	3401      	adds	r4, #1
 8000870:	9305      	str	r3, [sp, #20]
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 0c0a 	mov.w	ip, #10
 8000878:	4620      	mov	r0, r4
 800087a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800087e:	3a30      	subs	r2, #48	; 0x30
 8000880:	2a09      	cmp	r2, #9
 8000882:	d903      	bls.n	800088c <_svfiprintf_r+0x1a8>
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0c5      	beq.n	8000814 <_svfiprintf_r+0x130>
 8000888:	9105      	str	r1, [sp, #20]
 800088a:	e7c3      	b.n	8000814 <_svfiprintf_r+0x130>
 800088c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000890:	4604      	mov	r4, r0
 8000892:	2301      	movs	r3, #1
 8000894:	e7f0      	b.n	8000878 <_svfiprintf_r+0x194>
 8000896:	ab03      	add	r3, sp, #12
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	462a      	mov	r2, r5
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <_svfiprintf_r+0x1f8>)
 800089e:	a904      	add	r1, sp, #16
 80008a0:	4638      	mov	r0, r7
 80008a2:	f3af 8000 	nop.w
 80008a6:	1c42      	adds	r2, r0, #1
 80008a8:	4606      	mov	r6, r0
 80008aa:	d1d6      	bne.n	800085a <_svfiprintf_r+0x176>
 80008ac:	89ab      	ldrh	r3, [r5, #12]
 80008ae:	065b      	lsls	r3, r3, #25
 80008b0:	f53f af2c 	bmi.w	800070c <_svfiprintf_r+0x28>
 80008b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80008b6:	b01d      	add	sp, #116	; 0x74
 80008b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008bc:	ab03      	add	r3, sp, #12
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	462a      	mov	r2, r5
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <_svfiprintf_r+0x1f8>)
 80008c4:	a904      	add	r1, sp, #16
 80008c6:	4638      	mov	r0, r7
 80008c8:	f000 f87a 	bl	80009c0 <_printf_i>
 80008cc:	e7eb      	b.n	80008a6 <_svfiprintf_r+0x1c2>
 80008ce:	bf00      	nop
 80008d0:	08000eed 	.word	0x08000eed
 80008d4:	08000ef7 	.word	0x08000ef7
 80008d8:	00000000 	.word	0x00000000
 80008dc:	0800062d 	.word	0x0800062d
 80008e0:	08000ef3 	.word	0x08000ef3

080008e4 <_printf_common>:
 80008e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e8:	4616      	mov	r6, r2
 80008ea:	4699      	mov	r9, r3
 80008ec:	688a      	ldr	r2, [r1, #8]
 80008ee:	690b      	ldr	r3, [r1, #16]
 80008f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80008f4:	4293      	cmp	r3, r2
 80008f6:	bfb8      	it	lt
 80008f8:	4613      	movlt	r3, r2
 80008fa:	6033      	str	r3, [r6, #0]
 80008fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000900:	4607      	mov	r7, r0
 8000902:	460c      	mov	r4, r1
 8000904:	b10a      	cbz	r2, 800090a <_printf_common+0x26>
 8000906:	3301      	adds	r3, #1
 8000908:	6033      	str	r3, [r6, #0]
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	0699      	lsls	r1, r3, #26
 800090e:	bf42      	ittt	mi
 8000910:	6833      	ldrmi	r3, [r6, #0]
 8000912:	3302      	addmi	r3, #2
 8000914:	6033      	strmi	r3, [r6, #0]
 8000916:	6825      	ldr	r5, [r4, #0]
 8000918:	f015 0506 	ands.w	r5, r5, #6
 800091c:	d106      	bne.n	800092c <_printf_common+0x48>
 800091e:	f104 0a19 	add.w	sl, r4, #25
 8000922:	68e3      	ldr	r3, [r4, #12]
 8000924:	6832      	ldr	r2, [r6, #0]
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	42ab      	cmp	r3, r5
 800092a:	dc26      	bgt.n	800097a <_printf_common+0x96>
 800092c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000930:	1e13      	subs	r3, r2, #0
 8000932:	6822      	ldr	r2, [r4, #0]
 8000934:	bf18      	it	ne
 8000936:	2301      	movne	r3, #1
 8000938:	0692      	lsls	r2, r2, #26
 800093a:	d42b      	bmi.n	8000994 <_printf_common+0xb0>
 800093c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000940:	4649      	mov	r1, r9
 8000942:	4638      	mov	r0, r7
 8000944:	47c0      	blx	r8
 8000946:	3001      	adds	r0, #1
 8000948:	d01e      	beq.n	8000988 <_printf_common+0xa4>
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	68e5      	ldr	r5, [r4, #12]
 800094e:	6832      	ldr	r2, [r6, #0]
 8000950:	f003 0306 	and.w	r3, r3, #6
 8000954:	2b04      	cmp	r3, #4
 8000956:	bf08      	it	eq
 8000958:	1aad      	subeq	r5, r5, r2
 800095a:	68a3      	ldr	r3, [r4, #8]
 800095c:	6922      	ldr	r2, [r4, #16]
 800095e:	bf0c      	ite	eq
 8000960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000964:	2500      	movne	r5, #0
 8000966:	4293      	cmp	r3, r2
 8000968:	bfc4      	itt	gt
 800096a:	1a9b      	subgt	r3, r3, r2
 800096c:	18ed      	addgt	r5, r5, r3
 800096e:	2600      	movs	r6, #0
 8000970:	341a      	adds	r4, #26
 8000972:	42b5      	cmp	r5, r6
 8000974:	d11a      	bne.n	80009ac <_printf_common+0xc8>
 8000976:	2000      	movs	r0, #0
 8000978:	e008      	b.n	800098c <_printf_common+0xa8>
 800097a:	2301      	movs	r3, #1
 800097c:	4652      	mov	r2, sl
 800097e:	4649      	mov	r1, r9
 8000980:	4638      	mov	r0, r7
 8000982:	47c0      	blx	r8
 8000984:	3001      	adds	r0, #1
 8000986:	d103      	bne.n	8000990 <_printf_common+0xac>
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000990:	3501      	adds	r5, #1
 8000992:	e7c6      	b.n	8000922 <_printf_common+0x3e>
 8000994:	18e1      	adds	r1, r4, r3
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	2030      	movs	r0, #48	; 0x30
 800099a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800099e:	4422      	add	r2, r4
 80009a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80009a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80009a8:	3302      	adds	r3, #2
 80009aa:	e7c7      	b.n	800093c <_printf_common+0x58>
 80009ac:	2301      	movs	r3, #1
 80009ae:	4622      	mov	r2, r4
 80009b0:	4649      	mov	r1, r9
 80009b2:	4638      	mov	r0, r7
 80009b4:	47c0      	blx	r8
 80009b6:	3001      	adds	r0, #1
 80009b8:	d0e6      	beq.n	8000988 <_printf_common+0xa4>
 80009ba:	3601      	adds	r6, #1
 80009bc:	e7d9      	b.n	8000972 <_printf_common+0x8e>
	...

080009c0 <_printf_i>:
 80009c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80009c4:	7e0f      	ldrb	r7, [r1, #24]
 80009c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80009c8:	2f78      	cmp	r7, #120	; 0x78
 80009ca:	4691      	mov	r9, r2
 80009cc:	4680      	mov	r8, r0
 80009ce:	460c      	mov	r4, r1
 80009d0:	469a      	mov	sl, r3
 80009d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80009d6:	d807      	bhi.n	80009e8 <_printf_i+0x28>
 80009d8:	2f62      	cmp	r7, #98	; 0x62
 80009da:	d80a      	bhi.n	80009f2 <_printf_i+0x32>
 80009dc:	2f00      	cmp	r7, #0
 80009de:	f000 80d8 	beq.w	8000b92 <_printf_i+0x1d2>
 80009e2:	2f58      	cmp	r7, #88	; 0x58
 80009e4:	f000 80a3 	beq.w	8000b2e <_printf_i+0x16e>
 80009e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80009ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80009f0:	e03a      	b.n	8000a68 <_printf_i+0xa8>
 80009f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80009f6:	2b15      	cmp	r3, #21
 80009f8:	d8f6      	bhi.n	80009e8 <_printf_i+0x28>
 80009fa:	a101      	add	r1, pc, #4	; (adr r1, 8000a00 <_printf_i+0x40>)
 80009fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000a00:	08000a59 	.word	0x08000a59
 8000a04:	08000a6d 	.word	0x08000a6d
 8000a08:	080009e9 	.word	0x080009e9
 8000a0c:	080009e9 	.word	0x080009e9
 8000a10:	080009e9 	.word	0x080009e9
 8000a14:	080009e9 	.word	0x080009e9
 8000a18:	08000a6d 	.word	0x08000a6d
 8000a1c:	080009e9 	.word	0x080009e9
 8000a20:	080009e9 	.word	0x080009e9
 8000a24:	080009e9 	.word	0x080009e9
 8000a28:	080009e9 	.word	0x080009e9
 8000a2c:	08000b79 	.word	0x08000b79
 8000a30:	08000a9d 	.word	0x08000a9d
 8000a34:	08000b5b 	.word	0x08000b5b
 8000a38:	080009e9 	.word	0x080009e9
 8000a3c:	080009e9 	.word	0x080009e9
 8000a40:	08000b9b 	.word	0x08000b9b
 8000a44:	080009e9 	.word	0x080009e9
 8000a48:	08000a9d 	.word	0x08000a9d
 8000a4c:	080009e9 	.word	0x080009e9
 8000a50:	080009e9 	.word	0x080009e9
 8000a54:	08000b63 	.word	0x08000b63
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	1d1a      	adds	r2, r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	602a      	str	r2, [r5, #0]
 8000a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e0a3      	b.n	8000bb4 <_printf_i+0x1f4>
 8000a6c:	6820      	ldr	r0, [r4, #0]
 8000a6e:	6829      	ldr	r1, [r5, #0]
 8000a70:	0606      	lsls	r6, r0, #24
 8000a72:	f101 0304 	add.w	r3, r1, #4
 8000a76:	d50a      	bpl.n	8000a8e <_printf_i+0xce>
 8000a78:	680e      	ldr	r6, [r1, #0]
 8000a7a:	602b      	str	r3, [r5, #0]
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	da03      	bge.n	8000a88 <_printf_i+0xc8>
 8000a80:	232d      	movs	r3, #45	; 0x2d
 8000a82:	4276      	negs	r6, r6
 8000a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000a88:	485e      	ldr	r0, [pc, #376]	; (8000c04 <_printf_i+0x244>)
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	e019      	b.n	8000ac2 <_printf_i+0x102>
 8000a8e:	680e      	ldr	r6, [r1, #0]
 8000a90:	602b      	str	r3, [r5, #0]
 8000a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000a96:	bf18      	it	ne
 8000a98:	b236      	sxthne	r6, r6
 8000a9a:	e7ef      	b.n	8000a7c <_printf_i+0xbc>
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	6820      	ldr	r0, [r4, #0]
 8000aa0:	1d19      	adds	r1, r3, #4
 8000aa2:	6029      	str	r1, [r5, #0]
 8000aa4:	0601      	lsls	r1, r0, #24
 8000aa6:	d501      	bpl.n	8000aac <_printf_i+0xec>
 8000aa8:	681e      	ldr	r6, [r3, #0]
 8000aaa:	e002      	b.n	8000ab2 <_printf_i+0xf2>
 8000aac:	0646      	lsls	r6, r0, #25
 8000aae:	d5fb      	bpl.n	8000aa8 <_printf_i+0xe8>
 8000ab0:	881e      	ldrh	r6, [r3, #0]
 8000ab2:	4854      	ldr	r0, [pc, #336]	; (8000c04 <_printf_i+0x244>)
 8000ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8000ab6:	bf0c      	ite	eq
 8000ab8:	2308      	moveq	r3, #8
 8000aba:	230a      	movne	r3, #10
 8000abc:	2100      	movs	r1, #0
 8000abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ac2:	6865      	ldr	r5, [r4, #4]
 8000ac4:	60a5      	str	r5, [r4, #8]
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	bfa2      	ittt	ge
 8000aca:	6821      	ldrge	r1, [r4, #0]
 8000acc:	f021 0104 	bicge.w	r1, r1, #4
 8000ad0:	6021      	strge	r1, [r4, #0]
 8000ad2:	b90e      	cbnz	r6, 8000ad8 <_printf_i+0x118>
 8000ad4:	2d00      	cmp	r5, #0
 8000ad6:	d04d      	beq.n	8000b74 <_printf_i+0x1b4>
 8000ad8:	4615      	mov	r5, r2
 8000ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ade:	fb03 6711 	mls	r7, r3, r1, r6
 8000ae2:	5dc7      	ldrb	r7, [r0, r7]
 8000ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ae8:	4637      	mov	r7, r6
 8000aea:	42bb      	cmp	r3, r7
 8000aec:	460e      	mov	r6, r1
 8000aee:	d9f4      	bls.n	8000ada <_printf_i+0x11a>
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d10b      	bne.n	8000b0c <_printf_i+0x14c>
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	07de      	lsls	r6, r3, #31
 8000af8:	d508      	bpl.n	8000b0c <_printf_i+0x14c>
 8000afa:	6923      	ldr	r3, [r4, #16]
 8000afc:	6861      	ldr	r1, [r4, #4]
 8000afe:	4299      	cmp	r1, r3
 8000b00:	bfde      	ittt	le
 8000b02:	2330      	movle	r3, #48	; 0x30
 8000b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000b08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000b0c:	1b52      	subs	r2, r2, r5
 8000b0e:	6122      	str	r2, [r4, #16]
 8000b10:	f8cd a000 	str.w	sl, [sp]
 8000b14:	464b      	mov	r3, r9
 8000b16:	aa03      	add	r2, sp, #12
 8000b18:	4621      	mov	r1, r4
 8000b1a:	4640      	mov	r0, r8
 8000b1c:	f7ff fee2 	bl	80008e4 <_printf_common>
 8000b20:	3001      	adds	r0, #1
 8000b22:	d14c      	bne.n	8000bbe <_printf_i+0x1fe>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	b004      	add	sp, #16
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	4835      	ldr	r0, [pc, #212]	; (8000c04 <_printf_i+0x244>)
 8000b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000b34:	6829      	ldr	r1, [r5, #0]
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8000b3c:	6029      	str	r1, [r5, #0]
 8000b3e:	061d      	lsls	r5, r3, #24
 8000b40:	d514      	bpl.n	8000b6c <_printf_i+0x1ac>
 8000b42:	07df      	lsls	r7, r3, #31
 8000b44:	bf44      	itt	mi
 8000b46:	f043 0320 	orrmi.w	r3, r3, #32
 8000b4a:	6023      	strmi	r3, [r4, #0]
 8000b4c:	b91e      	cbnz	r6, 8000b56 <_printf_i+0x196>
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	f023 0320 	bic.w	r3, r3, #32
 8000b54:	6023      	str	r3, [r4, #0]
 8000b56:	2310      	movs	r3, #16
 8000b58:	e7b0      	b.n	8000abc <_printf_i+0xfc>
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	6023      	str	r3, [r4, #0]
 8000b62:	2378      	movs	r3, #120	; 0x78
 8000b64:	4828      	ldr	r0, [pc, #160]	; (8000c08 <_printf_i+0x248>)
 8000b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b6a:	e7e3      	b.n	8000b34 <_printf_i+0x174>
 8000b6c:	0659      	lsls	r1, r3, #25
 8000b6e:	bf48      	it	mi
 8000b70:	b2b6      	uxthmi	r6, r6
 8000b72:	e7e6      	b.n	8000b42 <_printf_i+0x182>
 8000b74:	4615      	mov	r5, r2
 8000b76:	e7bb      	b.n	8000af0 <_printf_i+0x130>
 8000b78:	682b      	ldr	r3, [r5, #0]
 8000b7a:	6826      	ldr	r6, [r4, #0]
 8000b7c:	6961      	ldr	r1, [r4, #20]
 8000b7e:	1d18      	adds	r0, r3, #4
 8000b80:	6028      	str	r0, [r5, #0]
 8000b82:	0635      	lsls	r5, r6, #24
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	d501      	bpl.n	8000b8c <_printf_i+0x1cc>
 8000b88:	6019      	str	r1, [r3, #0]
 8000b8a:	e002      	b.n	8000b92 <_printf_i+0x1d2>
 8000b8c:	0670      	lsls	r0, r6, #25
 8000b8e:	d5fb      	bpl.n	8000b88 <_printf_i+0x1c8>
 8000b90:	8019      	strh	r1, [r3, #0]
 8000b92:	2300      	movs	r3, #0
 8000b94:	6123      	str	r3, [r4, #16]
 8000b96:	4615      	mov	r5, r2
 8000b98:	e7ba      	b.n	8000b10 <_printf_i+0x150>
 8000b9a:	682b      	ldr	r3, [r5, #0]
 8000b9c:	1d1a      	adds	r2, r3, #4
 8000b9e:	602a      	str	r2, [r5, #0]
 8000ba0:	681d      	ldr	r5, [r3, #0]
 8000ba2:	6862      	ldr	r2, [r4, #4]
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4628      	mov	r0, r5
 8000ba8:	f7ff fb22 	bl	80001f0 <memchr>
 8000bac:	b108      	cbz	r0, 8000bb2 <_printf_i+0x1f2>
 8000bae:	1b40      	subs	r0, r0, r5
 8000bb0:	6060      	str	r0, [r4, #4]
 8000bb2:	6863      	ldr	r3, [r4, #4]
 8000bb4:	6123      	str	r3, [r4, #16]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000bbc:	e7a8      	b.n	8000b10 <_printf_i+0x150>
 8000bbe:	6923      	ldr	r3, [r4, #16]
 8000bc0:	462a      	mov	r2, r5
 8000bc2:	4649      	mov	r1, r9
 8000bc4:	4640      	mov	r0, r8
 8000bc6:	47d0      	blx	sl
 8000bc8:	3001      	adds	r0, #1
 8000bca:	d0ab      	beq.n	8000b24 <_printf_i+0x164>
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	079b      	lsls	r3, r3, #30
 8000bd0:	d413      	bmi.n	8000bfa <_printf_i+0x23a>
 8000bd2:	68e0      	ldr	r0, [r4, #12]
 8000bd4:	9b03      	ldr	r3, [sp, #12]
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	bfb8      	it	lt
 8000bda:	4618      	movlt	r0, r3
 8000bdc:	e7a4      	b.n	8000b28 <_printf_i+0x168>
 8000bde:	2301      	movs	r3, #1
 8000be0:	4632      	mov	r2, r6
 8000be2:	4649      	mov	r1, r9
 8000be4:	4640      	mov	r0, r8
 8000be6:	47d0      	blx	sl
 8000be8:	3001      	adds	r0, #1
 8000bea:	d09b      	beq.n	8000b24 <_printf_i+0x164>
 8000bec:	3501      	adds	r5, #1
 8000bee:	68e3      	ldr	r3, [r4, #12]
 8000bf0:	9903      	ldr	r1, [sp, #12]
 8000bf2:	1a5b      	subs	r3, r3, r1
 8000bf4:	42ab      	cmp	r3, r5
 8000bf6:	dcf2      	bgt.n	8000bde <_printf_i+0x21e>
 8000bf8:	e7eb      	b.n	8000bd2 <_printf_i+0x212>
 8000bfa:	2500      	movs	r5, #0
 8000bfc:	f104 0619 	add.w	r6, r4, #25
 8000c00:	e7f5      	b.n	8000bee <_printf_i+0x22e>
 8000c02:	bf00      	nop
 8000c04:	08000efe 	.word	0x08000efe
 8000c08:	08000f0f 	.word	0x08000f0f

08000c0c <memcpy>:
 8000c0c:	440a      	add	r2, r1
 8000c0e:	4291      	cmp	r1, r2
 8000c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c14:	d100      	bne.n	8000c18 <memcpy+0xc>
 8000c16:	4770      	bx	lr
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000c22:	4291      	cmp	r1, r2
 8000c24:	d1f9      	bne.n	8000c1a <memcpy+0xe>
 8000c26:	bd10      	pop	{r4, pc}

08000c28 <memmove>:
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	b510      	push	{r4, lr}
 8000c2c:	eb01 0402 	add.w	r4, r1, r2
 8000c30:	d902      	bls.n	8000c38 <memmove+0x10>
 8000c32:	4284      	cmp	r4, r0
 8000c34:	4623      	mov	r3, r4
 8000c36:	d807      	bhi.n	8000c48 <memmove+0x20>
 8000c38:	1e43      	subs	r3, r0, #1
 8000c3a:	42a1      	cmp	r1, r4
 8000c3c:	d008      	beq.n	8000c50 <memmove+0x28>
 8000c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000c46:	e7f8      	b.n	8000c3a <memmove+0x12>
 8000c48:	4402      	add	r2, r0
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	d100      	bne.n	8000c52 <memmove+0x2a>
 8000c50:	bd10      	pop	{r4, pc}
 8000c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000c5a:	e7f7      	b.n	8000c4c <memmove+0x24>

08000c5c <_free_r>:
 8000c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c5e:	2900      	cmp	r1, #0
 8000c60:	d044      	beq.n	8000cec <_free_r+0x90>
 8000c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c66:	9001      	str	r0, [sp, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8000c6e:	bfb8      	it	lt
 8000c70:	18e4      	addlt	r4, r4, r3
 8000c72:	f000 f913 	bl	8000e9c <__malloc_lock>
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <_free_r+0x94>)
 8000c78:	9801      	ldr	r0, [sp, #4]
 8000c7a:	6813      	ldr	r3, [r2, #0]
 8000c7c:	b933      	cbnz	r3, 8000c8c <_free_r+0x30>
 8000c7e:	6063      	str	r3, [r4, #4]
 8000c80:	6014      	str	r4, [r2, #0]
 8000c82:	b003      	add	sp, #12
 8000c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c88:	f000 b90e 	b.w	8000ea8 <__malloc_unlock>
 8000c8c:	42a3      	cmp	r3, r4
 8000c8e:	d908      	bls.n	8000ca2 <_free_r+0x46>
 8000c90:	6825      	ldr	r5, [r4, #0]
 8000c92:	1961      	adds	r1, r4, r5
 8000c94:	428b      	cmp	r3, r1
 8000c96:	bf01      	itttt	eq
 8000c98:	6819      	ldreq	r1, [r3, #0]
 8000c9a:	685b      	ldreq	r3, [r3, #4]
 8000c9c:	1949      	addeq	r1, r1, r5
 8000c9e:	6021      	streq	r1, [r4, #0]
 8000ca0:	e7ed      	b.n	8000c7e <_free_r+0x22>
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	b10b      	cbz	r3, 8000cac <_free_r+0x50>
 8000ca8:	42a3      	cmp	r3, r4
 8000caa:	d9fa      	bls.n	8000ca2 <_free_r+0x46>
 8000cac:	6811      	ldr	r1, [r2, #0]
 8000cae:	1855      	adds	r5, r2, r1
 8000cb0:	42a5      	cmp	r5, r4
 8000cb2:	d10b      	bne.n	8000ccc <_free_r+0x70>
 8000cb4:	6824      	ldr	r4, [r4, #0]
 8000cb6:	4421      	add	r1, r4
 8000cb8:	1854      	adds	r4, r2, r1
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	6011      	str	r1, [r2, #0]
 8000cbe:	d1e0      	bne.n	8000c82 <_free_r+0x26>
 8000cc0:	681c      	ldr	r4, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	6053      	str	r3, [r2, #4]
 8000cc6:	4421      	add	r1, r4
 8000cc8:	6011      	str	r1, [r2, #0]
 8000cca:	e7da      	b.n	8000c82 <_free_r+0x26>
 8000ccc:	d902      	bls.n	8000cd4 <_free_r+0x78>
 8000cce:	230c      	movs	r3, #12
 8000cd0:	6003      	str	r3, [r0, #0]
 8000cd2:	e7d6      	b.n	8000c82 <_free_r+0x26>
 8000cd4:	6825      	ldr	r5, [r4, #0]
 8000cd6:	1961      	adds	r1, r4, r5
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	bf04      	itt	eq
 8000cdc:	6819      	ldreq	r1, [r3, #0]
 8000cde:	685b      	ldreq	r3, [r3, #4]
 8000ce0:	6063      	str	r3, [r4, #4]
 8000ce2:	bf04      	itt	eq
 8000ce4:	1949      	addeq	r1, r1, r5
 8000ce6:	6021      	streq	r1, [r4, #0]
 8000ce8:	6054      	str	r4, [r2, #4]
 8000cea:	e7ca      	b.n	8000c82 <_free_r+0x26>
 8000cec:	b003      	add	sp, #12
 8000cee:	bd30      	pop	{r4, r5, pc}
 8000cf0:	20000088 	.word	0x20000088

08000cf4 <sbrk_aligned>:
 8000cf4:	b570      	push	{r4, r5, r6, lr}
 8000cf6:	4e0e      	ldr	r6, [pc, #56]	; (8000d30 <sbrk_aligned+0x3c>)
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	6831      	ldr	r1, [r6, #0]
 8000cfc:	4605      	mov	r5, r0
 8000cfe:	b911      	cbnz	r1, 8000d06 <sbrk_aligned+0x12>
 8000d00:	f000 f8bc 	bl	8000e7c <_sbrk_r>
 8000d04:	6030      	str	r0, [r6, #0]
 8000d06:	4621      	mov	r1, r4
 8000d08:	4628      	mov	r0, r5
 8000d0a:	f000 f8b7 	bl	8000e7c <_sbrk_r>
 8000d0e:	1c43      	adds	r3, r0, #1
 8000d10:	d00a      	beq.n	8000d28 <sbrk_aligned+0x34>
 8000d12:	1cc4      	adds	r4, r0, #3
 8000d14:	f024 0403 	bic.w	r4, r4, #3
 8000d18:	42a0      	cmp	r0, r4
 8000d1a:	d007      	beq.n	8000d2c <sbrk_aligned+0x38>
 8000d1c:	1a21      	subs	r1, r4, r0
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f000 f8ac 	bl	8000e7c <_sbrk_r>
 8000d24:	3001      	adds	r0, #1
 8000d26:	d101      	bne.n	8000d2c <sbrk_aligned+0x38>
 8000d28:	f04f 34ff 	mov.w	r4, #4294967295
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	2000008c 	.word	0x2000008c

08000d34 <_malloc_r>:
 8000d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d38:	1ccd      	adds	r5, r1, #3
 8000d3a:	f025 0503 	bic.w	r5, r5, #3
 8000d3e:	3508      	adds	r5, #8
 8000d40:	2d0c      	cmp	r5, #12
 8000d42:	bf38      	it	cc
 8000d44:	250c      	movcc	r5, #12
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	4607      	mov	r7, r0
 8000d4a:	db01      	blt.n	8000d50 <_malloc_r+0x1c>
 8000d4c:	42a9      	cmp	r1, r5
 8000d4e:	d905      	bls.n	8000d5c <_malloc_r+0x28>
 8000d50:	230c      	movs	r3, #12
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	2600      	movs	r6, #0
 8000d56:	4630      	mov	r0, r6
 8000d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d5c:	4e2e      	ldr	r6, [pc, #184]	; (8000e18 <_malloc_r+0xe4>)
 8000d5e:	f000 f89d 	bl	8000e9c <__malloc_lock>
 8000d62:	6833      	ldr	r3, [r6, #0]
 8000d64:	461c      	mov	r4, r3
 8000d66:	bb34      	cbnz	r4, 8000db6 <_malloc_r+0x82>
 8000d68:	4629      	mov	r1, r5
 8000d6a:	4638      	mov	r0, r7
 8000d6c:	f7ff ffc2 	bl	8000cf4 <sbrk_aligned>
 8000d70:	1c43      	adds	r3, r0, #1
 8000d72:	4604      	mov	r4, r0
 8000d74:	d14d      	bne.n	8000e12 <_malloc_r+0xde>
 8000d76:	6834      	ldr	r4, [r6, #0]
 8000d78:	4626      	mov	r6, r4
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d140      	bne.n	8000e00 <_malloc_r+0xcc>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	4631      	mov	r1, r6
 8000d82:	4638      	mov	r0, r7
 8000d84:	eb04 0803 	add.w	r8, r4, r3
 8000d88:	f000 f878 	bl	8000e7c <_sbrk_r>
 8000d8c:	4580      	cmp	r8, r0
 8000d8e:	d13a      	bne.n	8000e06 <_malloc_r+0xd2>
 8000d90:	6821      	ldr	r1, [r4, #0]
 8000d92:	3503      	adds	r5, #3
 8000d94:	1a6d      	subs	r5, r5, r1
 8000d96:	f025 0503 	bic.w	r5, r5, #3
 8000d9a:	3508      	adds	r5, #8
 8000d9c:	2d0c      	cmp	r5, #12
 8000d9e:	bf38      	it	cc
 8000da0:	250c      	movcc	r5, #12
 8000da2:	4629      	mov	r1, r5
 8000da4:	4638      	mov	r0, r7
 8000da6:	f7ff ffa5 	bl	8000cf4 <sbrk_aligned>
 8000daa:	3001      	adds	r0, #1
 8000dac:	d02b      	beq.n	8000e06 <_malloc_r+0xd2>
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	442b      	add	r3, r5
 8000db2:	6023      	str	r3, [r4, #0]
 8000db4:	e00e      	b.n	8000dd4 <_malloc_r+0xa0>
 8000db6:	6822      	ldr	r2, [r4, #0]
 8000db8:	1b52      	subs	r2, r2, r5
 8000dba:	d41e      	bmi.n	8000dfa <_malloc_r+0xc6>
 8000dbc:	2a0b      	cmp	r2, #11
 8000dbe:	d916      	bls.n	8000dee <_malloc_r+0xba>
 8000dc0:	1961      	adds	r1, r4, r5
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	6025      	str	r5, [r4, #0]
 8000dc6:	bf18      	it	ne
 8000dc8:	6059      	strne	r1, [r3, #4]
 8000dca:	6863      	ldr	r3, [r4, #4]
 8000dcc:	bf08      	it	eq
 8000dce:	6031      	streq	r1, [r6, #0]
 8000dd0:	5162      	str	r2, [r4, r5]
 8000dd2:	604b      	str	r3, [r1, #4]
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	f104 060b 	add.w	r6, r4, #11
 8000dda:	f000 f865 	bl	8000ea8 <__malloc_unlock>
 8000dde:	f026 0607 	bic.w	r6, r6, #7
 8000de2:	1d23      	adds	r3, r4, #4
 8000de4:	1af2      	subs	r2, r6, r3
 8000de6:	d0b6      	beq.n	8000d56 <_malloc_r+0x22>
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	50a3      	str	r3, [r4, r2]
 8000dec:	e7b3      	b.n	8000d56 <_malloc_r+0x22>
 8000dee:	6862      	ldr	r2, [r4, #4]
 8000df0:	42a3      	cmp	r3, r4
 8000df2:	bf0c      	ite	eq
 8000df4:	6032      	streq	r2, [r6, #0]
 8000df6:	605a      	strne	r2, [r3, #4]
 8000df8:	e7ec      	b.n	8000dd4 <_malloc_r+0xa0>
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	6864      	ldr	r4, [r4, #4]
 8000dfe:	e7b2      	b.n	8000d66 <_malloc_r+0x32>
 8000e00:	4634      	mov	r4, r6
 8000e02:	6876      	ldr	r6, [r6, #4]
 8000e04:	e7b9      	b.n	8000d7a <_malloc_r+0x46>
 8000e06:	230c      	movs	r3, #12
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	f000 f84c 	bl	8000ea8 <__malloc_unlock>
 8000e10:	e7a1      	b.n	8000d56 <_malloc_r+0x22>
 8000e12:	6025      	str	r5, [r4, #0]
 8000e14:	e7de      	b.n	8000dd4 <_malloc_r+0xa0>
 8000e16:	bf00      	nop
 8000e18:	20000088 	.word	0x20000088

08000e1c <_realloc_r>:
 8000e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e20:	4680      	mov	r8, r0
 8000e22:	4614      	mov	r4, r2
 8000e24:	460e      	mov	r6, r1
 8000e26:	b921      	cbnz	r1, 8000e32 <_realloc_r+0x16>
 8000e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	f7ff bf81 	b.w	8000d34 <_malloc_r>
 8000e32:	b92a      	cbnz	r2, 8000e40 <_realloc_r+0x24>
 8000e34:	f7ff ff12 	bl	8000c5c <_free_r>
 8000e38:	4625      	mov	r5, r4
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e40:	f000 f838 	bl	8000eb4 <_malloc_usable_size_r>
 8000e44:	4284      	cmp	r4, r0
 8000e46:	4607      	mov	r7, r0
 8000e48:	d802      	bhi.n	8000e50 <_realloc_r+0x34>
 8000e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000e4e:	d812      	bhi.n	8000e76 <_realloc_r+0x5a>
 8000e50:	4621      	mov	r1, r4
 8000e52:	4640      	mov	r0, r8
 8000e54:	f7ff ff6e 	bl	8000d34 <_malloc_r>
 8000e58:	4605      	mov	r5, r0
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d0ed      	beq.n	8000e3a <_realloc_r+0x1e>
 8000e5e:	42bc      	cmp	r4, r7
 8000e60:	4622      	mov	r2, r4
 8000e62:	4631      	mov	r1, r6
 8000e64:	bf28      	it	cs
 8000e66:	463a      	movcs	r2, r7
 8000e68:	f7ff fed0 	bl	8000c0c <memcpy>
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	4640      	mov	r0, r8
 8000e70:	f7ff fef4 	bl	8000c5c <_free_r>
 8000e74:	e7e1      	b.n	8000e3a <_realloc_r+0x1e>
 8000e76:	4635      	mov	r5, r6
 8000e78:	e7df      	b.n	8000e3a <_realloc_r+0x1e>
	...

08000e7c <_sbrk_r>:
 8000e7c:	b538      	push	{r3, r4, r5, lr}
 8000e7e:	4d06      	ldr	r5, [pc, #24]	; (8000e98 <_sbrk_r+0x1c>)
 8000e80:	2300      	movs	r3, #0
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	f7ff faaa 	bl	80003e0 <_sbrk>
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	d102      	bne.n	8000e96 <_sbrk_r+0x1a>
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	b103      	cbz	r3, 8000e96 <_sbrk_r+0x1a>
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	20000090 	.word	0x20000090

08000e9c <__malloc_lock>:
 8000e9c:	4801      	ldr	r0, [pc, #4]	; (8000ea4 <__malloc_lock+0x8>)
 8000e9e:	f000 b811 	b.w	8000ec4 <__retarget_lock_acquire_recursive>
 8000ea2:	bf00      	nop
 8000ea4:	20000094 	.word	0x20000094

08000ea8 <__malloc_unlock>:
 8000ea8:	4801      	ldr	r0, [pc, #4]	; (8000eb0 <__malloc_unlock+0x8>)
 8000eaa:	f000 b80c 	b.w	8000ec6 <__retarget_lock_release_recursive>
 8000eae:	bf00      	nop
 8000eb0:	20000094 	.word	0x20000094

08000eb4 <_malloc_usable_size_r>:
 8000eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eb8:	1f18      	subs	r0, r3, #4
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bfbc      	itt	lt
 8000ebe:	580b      	ldrlt	r3, [r1, r0]
 8000ec0:	18c0      	addlt	r0, r0, r3
 8000ec2:	4770      	bx	lr

08000ec4 <__retarget_lock_acquire_recursive>:
 8000ec4:	4770      	bx	lr

08000ec6 <__retarget_lock_release_recursive>:
 8000ec6:	4770      	bx	lr

08000ec8 <_init>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	bf00      	nop
 8000ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ece:	bc08      	pop	{r3}
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	4770      	bx	lr

08000ed4 <_fini>:
 8000ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed6:	bf00      	nop
 8000ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eda:	bc08      	pop	{r3}
 8000edc:	469e      	mov	lr, r3
 8000ede:	4770      	bx	lr
